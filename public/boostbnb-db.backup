--
-- PostgreSQL database cluster dump
--

SET default_transaction_read_only = off;

SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;

--
-- Roles
--

CREATE ROLE anon;
ALTER ROLE anon WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE authenticated;
ALTER ROLE authenticated WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE authenticator;
ALTER ROLE authenticator WITH NOSUPERUSER NOINHERIT NOCREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE dashboard_user;
ALTER ROLE dashboard_user WITH NOSUPERUSER INHERIT CREATEROLE CREATEDB NOLOGIN REPLICATION NOBYPASSRLS;
CREATE ROLE pgbouncer;
ALTER ROLE pgbouncer WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE pgsodium_keyholder;
ALTER ROLE pgsodium_keyholder WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE pgsodium_keyiduser;
ALTER ROLE pgsodium_keyiduser WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE pgsodium_keymaker;
ALTER ROLE pgsodium_keymaker WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE postgres;
ALTER ROLE postgres WITH NOSUPERUSER INHERIT CREATEROLE CREATEDB LOGIN REPLICATION BYPASSRLS;
CREATE ROLE service_role;
ALTER ROLE service_role WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION BYPASSRLS;
CREATE ROLE supabase_admin;
ALTER ROLE supabase_admin WITH SUPERUSER INHERIT CREATEROLE CREATEDB LOGIN REPLICATION BYPASSRLS;
CREATE ROLE supabase_auth_admin;
ALTER ROLE supabase_auth_admin WITH NOSUPERUSER NOINHERIT CREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE supabase_read_only_user;
ALTER ROLE supabase_read_only_user WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB LOGIN NOREPLICATION BYPASSRLS;
CREATE ROLE supabase_realtime_admin;
ALTER ROLE supabase_realtime_admin WITH NOSUPERUSER NOINHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE supabase_replication_admin;
ALTER ROLE supabase_replication_admin WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB LOGIN REPLICATION NOBYPASSRLS;
CREATE ROLE supabase_storage_admin;
ALTER ROLE supabase_storage_admin WITH NOSUPERUSER NOINHERIT CREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;

--
-- User Configurations
--

--
-- User Config "anon"
--

ALTER ROLE anon SET statement_timeout TO '3s';

--
-- User Config "authenticated"
--

ALTER ROLE authenticated SET statement_timeout TO '8s';

--
-- User Config "authenticator"
--

ALTER ROLE authenticator SET session_preload_libraries TO 'safeupdate';
ALTER ROLE authenticator SET statement_timeout TO '8s';
ALTER ROLE authenticator SET lock_timeout TO '8s';

--
-- User Config "postgres"
--

ALTER ROLE postgres SET search_path TO E'\\$user', 'public', 'extensions';

--
-- User Config "supabase_admin"
--

ALTER ROLE supabase_admin SET search_path TO '$user', 'public', 'auth', 'extensions';
ALTER ROLE supabase_admin SET log_statement TO 'none';

--
-- User Config "supabase_auth_admin"
--

ALTER ROLE supabase_auth_admin SET search_path TO 'auth';
ALTER ROLE supabase_auth_admin SET idle_in_transaction_session_timeout TO '60000';
ALTER ROLE supabase_auth_admin SET log_statement TO 'none';

--
-- User Config "supabase_storage_admin"
--

ALTER ROLE supabase_storage_admin SET search_path TO 'storage';
ALTER ROLE supabase_storage_admin SET log_statement TO 'none';


--
-- Role memberships
--

GRANT anon TO authenticator GRANTED BY postgres;
GRANT anon TO postgres GRANTED BY supabase_admin;
GRANT authenticated TO authenticator GRANTED BY postgres;
GRANT authenticated TO postgres GRANTED BY supabase_admin;
GRANT authenticator TO supabase_storage_admin GRANTED BY supabase_admin;
GRANT pg_monitor TO postgres GRANTED BY supabase_admin;
GRANT pg_read_all_data TO postgres GRANTED BY supabase_admin;
GRANT pg_read_all_data TO supabase_read_only_user GRANTED BY postgres;
GRANT pg_signal_backend TO postgres GRANTED BY supabase_admin;
GRANT pgsodium_keyholder TO pgsodium_keymaker GRANTED BY supabase_admin;
GRANT pgsodium_keyholder TO postgres WITH ADMIN OPTION GRANTED BY supabase_admin;
GRANT pgsodium_keyholder TO service_role GRANTED BY supabase_admin;
GRANT pgsodium_keyiduser TO pgsodium_keyholder GRANTED BY supabase_admin;
GRANT pgsodium_keyiduser TO pgsodium_keymaker GRANTED BY supabase_admin;
GRANT pgsodium_keyiduser TO postgres WITH ADMIN OPTION GRANTED BY supabase_admin;
GRANT pgsodium_keymaker TO postgres WITH ADMIN OPTION GRANTED BY supabase_admin;
GRANT service_role TO authenticator GRANTED BY postgres;
GRANT service_role TO postgres GRANTED BY supabase_admin;
GRANT supabase_auth_admin TO postgres GRANTED BY supabase_admin;
GRANT supabase_realtime_admin TO postgres GRANTED BY supabase_admin;
GRANT supabase_storage_admin TO postgres GRANTED BY supabase_admin;






--
-- Databases
--

--
-- Database "template1" dump
--

\connect template1

--
-- PostgreSQL database dump
--

-- Dumped from database version 15.8
-- Dumped by pg_dump version 15.12 (Debian 15.12-1.pgdg120+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- PostgreSQL database dump complete
--

--
-- Database "postgres" dump
--

\connect postgres

--
-- PostgreSQL database dump
--

-- Dumped from database version 15.8
-- Dumped by pg_dump version 15.12 (Debian 15.12-1.pgdg120+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: auth; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA auth;


ALTER SCHEMA auth OWNER TO supabase_admin;

--
-- Name: extensions; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA extensions;


ALTER SCHEMA extensions OWNER TO postgres;

--
-- Name: graphql; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA graphql;


ALTER SCHEMA graphql OWNER TO supabase_admin;

--
-- Name: graphql_public; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA graphql_public;


ALTER SCHEMA graphql_public OWNER TO supabase_admin;

--
-- Name: pgbouncer; Type: SCHEMA; Schema: -; Owner: pgbouncer
--

CREATE SCHEMA pgbouncer;


ALTER SCHEMA pgbouncer OWNER TO pgbouncer;

--
-- Name: pgsodium; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA pgsodium;


ALTER SCHEMA pgsodium OWNER TO supabase_admin;

--
-- Name: pgsodium; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgsodium WITH SCHEMA pgsodium;


--
-- Name: EXTENSION pgsodium; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgsodium IS 'Pgsodium is a modern cryptography library for Postgres.';


--
-- Name: realtime; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA realtime;


ALTER SCHEMA realtime OWNER TO supabase_admin;

--
-- Name: storage; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA storage;


ALTER SCHEMA storage OWNER TO supabase_admin;

--
-- Name: vault; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA vault;


ALTER SCHEMA vault OWNER TO supabase_admin;

--
-- Name: pg_graphql; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pg_graphql WITH SCHEMA graphql;


--
-- Name: EXTENSION pg_graphql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pg_graphql IS 'pg_graphql: GraphQL support';


--
-- Name: pg_stat_statements; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pg_stat_statements WITH SCHEMA extensions;


--
-- Name: EXTENSION pg_stat_statements; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pg_stat_statements IS 'track planning and execution statistics of all SQL statements executed';


--
-- Name: pgcrypto; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA extensions;


--
-- Name: EXTENSION pgcrypto; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgcrypto IS 'cryptographic functions';


--
-- Name: pgjwt; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgjwt WITH SCHEMA extensions;


--
-- Name: EXTENSION pgjwt; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgjwt IS 'JSON Web Token API for Postgresql';


--
-- Name: supabase_vault; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS supabase_vault WITH SCHEMA vault;


--
-- Name: EXTENSION supabase_vault; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION supabase_vault IS 'Supabase Vault Extension';


--
-- Name: uuid-ossp; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA extensions;


--
-- Name: EXTENSION "uuid-ossp"; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION "uuid-ossp" IS 'generate universally unique identifiers (UUIDs)';


--
-- Name: aal_level; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.aal_level AS ENUM (
    'aal1',
    'aal2',
    'aal3'
);


ALTER TYPE auth.aal_level OWNER TO supabase_auth_admin;

--
-- Name: code_challenge_method; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.code_challenge_method AS ENUM (
    's256',
    'plain'
);


ALTER TYPE auth.code_challenge_method OWNER TO supabase_auth_admin;

--
-- Name: factor_status; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.factor_status AS ENUM (
    'unverified',
    'verified'
);


ALTER TYPE auth.factor_status OWNER TO supabase_auth_admin;

--
-- Name: factor_type; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.factor_type AS ENUM (
    'totp',
    'webauthn',
    'phone'
);


ALTER TYPE auth.factor_type OWNER TO supabase_auth_admin;

--
-- Name: one_time_token_type; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.one_time_token_type AS ENUM (
    'confirmation_token',
    'reauthentication_token',
    'recovery_token',
    'email_change_token_new',
    'email_change_token_current',
    'phone_change_token'
);


ALTER TYPE auth.one_time_token_type OWNER TO supabase_auth_admin;

--
-- Name: action; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.action AS ENUM (
    'INSERT',
    'UPDATE',
    'DELETE',
    'TRUNCATE',
    'ERROR'
);


ALTER TYPE realtime.action OWNER TO supabase_admin;

--
-- Name: equality_op; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.equality_op AS ENUM (
    'eq',
    'neq',
    'lt',
    'lte',
    'gt',
    'gte',
    'in'
);


ALTER TYPE realtime.equality_op OWNER TO supabase_admin;

--
-- Name: user_defined_filter; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.user_defined_filter AS (
	column_name text,
	op realtime.equality_op,
	value text
);


ALTER TYPE realtime.user_defined_filter OWNER TO supabase_admin;

--
-- Name: wal_column; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.wal_column AS (
	name text,
	type_name text,
	type_oid oid,
	value jsonb,
	is_pkey boolean,
	is_selectable boolean
);


ALTER TYPE realtime.wal_column OWNER TO supabase_admin;

--
-- Name: wal_rls; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.wal_rls AS (
	wal jsonb,
	is_rls_enabled boolean,
	subscription_ids uuid[],
	errors text[]
);


ALTER TYPE realtime.wal_rls OWNER TO supabase_admin;

--
-- Name: email(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.email() RETURNS text
    LANGUAGE sql STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.email', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'email')
  )::text
$$;


ALTER FUNCTION auth.email() OWNER TO supabase_auth_admin;

--
-- Name: FUNCTION email(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.email() IS 'Deprecated. Use auth.jwt() -> ''email'' instead.';


--
-- Name: jwt(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.jwt() RETURNS jsonb
    LANGUAGE sql STABLE
    AS $$
  select 
    coalesce(
        nullif(current_setting('request.jwt.claim', true), ''),
        nullif(current_setting('request.jwt.claims', true), '')
    )::jsonb
$$;


ALTER FUNCTION auth.jwt() OWNER TO supabase_auth_admin;

--
-- Name: role(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.role() RETURNS text
    LANGUAGE sql STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.role', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'role')
  )::text
$$;


ALTER FUNCTION auth.role() OWNER TO supabase_auth_admin;

--
-- Name: FUNCTION role(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.role() IS 'Deprecated. Use auth.jwt() -> ''role'' instead.';


--
-- Name: uid(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.uid() RETURNS uuid
    LANGUAGE sql STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.sub', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'sub')
  )::uuid
$$;


ALTER FUNCTION auth.uid() OWNER TO supabase_auth_admin;

--
-- Name: FUNCTION uid(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.uid() IS 'Deprecated. Use auth.jwt() -> ''sub'' instead.';


--
-- Name: grant_pg_cron_access(); Type: FUNCTION; Schema: extensions; Owner: postgres
--

CREATE FUNCTION extensions.grant_pg_cron_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF EXISTS (
    SELECT
    FROM pg_event_trigger_ddl_commands() AS ev
    JOIN pg_extension AS ext
    ON ev.objid = ext.oid
    WHERE ext.extname = 'pg_cron'
  )
  THEN
    grant usage on schema cron to postgres with grant option;

    alter default privileges in schema cron grant all on tables to postgres with grant option;
    alter default privileges in schema cron grant all on functions to postgres with grant option;
    alter default privileges in schema cron grant all on sequences to postgres with grant option;

    alter default privileges for user supabase_admin in schema cron grant all
        on sequences to postgres with grant option;
    alter default privileges for user supabase_admin in schema cron grant all
        on tables to postgres with grant option;
    alter default privileges for user supabase_admin in schema cron grant all
        on functions to postgres with grant option;

    grant all privileges on all tables in schema cron to postgres with grant option;
    revoke all on table cron.job from postgres;
    grant select on table cron.job to postgres with grant option;
  END IF;
END;
$$;


ALTER FUNCTION extensions.grant_pg_cron_access() OWNER TO postgres;

--
-- Name: FUNCTION grant_pg_cron_access(); Type: COMMENT; Schema: extensions; Owner: postgres
--

COMMENT ON FUNCTION extensions.grant_pg_cron_access() IS 'Grants access to pg_cron';


--
-- Name: grant_pg_graphql_access(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.grant_pg_graphql_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $_$
DECLARE
    func_is_graphql_resolve bool;
BEGIN
    func_is_graphql_resolve = (
        SELECT n.proname = 'resolve'
        FROM pg_event_trigger_ddl_commands() AS ev
        LEFT JOIN pg_catalog.pg_proc AS n
        ON ev.objid = n.oid
    );

    IF func_is_graphql_resolve
    THEN
        -- Update public wrapper to pass all arguments through to the pg_graphql resolve func
        DROP FUNCTION IF EXISTS graphql_public.graphql;
        create or replace function graphql_public.graphql(
            "operationName" text default null,
            query text default null,
            variables jsonb default null,
            extensions jsonb default null
        )
            returns jsonb
            language sql
        as $$
            select graphql.resolve(
                query := query,
                variables := coalesce(variables, '{}'),
                "operationName" := "operationName",
                extensions := extensions
            );
        $$;

        -- This hook executes when `graphql.resolve` is created. That is not necessarily the last
        -- function in the extension so we need to grant permissions on existing entities AND
        -- update default permissions to any others that are created after `graphql.resolve`
        grant usage on schema graphql to postgres, anon, authenticated, service_role;
        grant select on all tables in schema graphql to postgres, anon, authenticated, service_role;
        grant execute on all functions in schema graphql to postgres, anon, authenticated, service_role;
        grant all on all sequences in schema graphql to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on tables to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on functions to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on sequences to postgres, anon, authenticated, service_role;

        -- Allow postgres role to allow granting usage on graphql and graphql_public schemas to custom roles
        grant usage on schema graphql_public to postgres with grant option;
        grant usage on schema graphql to postgres with grant option;
    END IF;

END;
$_$;


ALTER FUNCTION extensions.grant_pg_graphql_access() OWNER TO supabase_admin;

--
-- Name: FUNCTION grant_pg_graphql_access(); Type: COMMENT; Schema: extensions; Owner: supabase_admin
--

COMMENT ON FUNCTION extensions.grant_pg_graphql_access() IS 'Grants access to pg_graphql';


--
-- Name: grant_pg_net_access(); Type: FUNCTION; Schema: extensions; Owner: postgres
--

CREATE FUNCTION extensions.grant_pg_net_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF EXISTS (
    SELECT 1
    FROM pg_event_trigger_ddl_commands() AS ev
    JOIN pg_extension AS ext
    ON ev.objid = ext.oid
    WHERE ext.extname = 'pg_net'
  )
  THEN
    IF NOT EXISTS (
      SELECT 1
      FROM pg_roles
      WHERE rolname = 'supabase_functions_admin'
    )
    THEN
      CREATE USER supabase_functions_admin NOINHERIT CREATEROLE LOGIN NOREPLICATION;
    END IF;

    GRANT USAGE ON SCHEMA net TO supabase_functions_admin, postgres, anon, authenticated, service_role;

    IF EXISTS (
      SELECT FROM pg_extension
      WHERE extname = 'pg_net'
      -- all versions in use on existing projects as of 2025-02-20
      -- version 0.12.0 onwards don't need these applied
      AND extversion IN ('0.2', '0.6', '0.7', '0.7.1', '0.8', '0.10.0', '0.11.0')
    ) THEN
      ALTER function net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) SECURITY DEFINER;
      ALTER function net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) SECURITY DEFINER;

      ALTER function net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) SET search_path = net;
      ALTER function net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) SET search_path = net;

      REVOKE ALL ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;
      REVOKE ALL ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;

      GRANT EXECUTE ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin, postgres, anon, authenticated, service_role;
      GRANT EXECUTE ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin, postgres, anon, authenticated, service_role;
    END IF;
  END IF;
END;
$$;


ALTER FUNCTION extensions.grant_pg_net_access() OWNER TO postgres;

--
-- Name: FUNCTION grant_pg_net_access(); Type: COMMENT; Schema: extensions; Owner: postgres
--

COMMENT ON FUNCTION extensions.grant_pg_net_access() IS 'Grants access to pg_net';


--
-- Name: pgrst_ddl_watch(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.pgrst_ddl_watch() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  cmd record;
BEGIN
  FOR cmd IN SELECT * FROM pg_event_trigger_ddl_commands()
  LOOP
    IF cmd.command_tag IN (
      'CREATE SCHEMA', 'ALTER SCHEMA'
    , 'CREATE TABLE', 'CREATE TABLE AS', 'SELECT INTO', 'ALTER TABLE'
    , 'CREATE FOREIGN TABLE', 'ALTER FOREIGN TABLE'
    , 'CREATE VIEW', 'ALTER VIEW'
    , 'CREATE MATERIALIZED VIEW', 'ALTER MATERIALIZED VIEW'
    , 'CREATE FUNCTION', 'ALTER FUNCTION'
    , 'CREATE TRIGGER'
    , 'CREATE TYPE', 'ALTER TYPE'
    , 'CREATE RULE'
    , 'COMMENT'
    )
    -- don't notify in case of CREATE TEMP table or other objects created on pg_temp
    AND cmd.schema_name is distinct from 'pg_temp'
    THEN
      NOTIFY pgrst, 'reload schema';
    END IF;
  END LOOP;
END; $$;


ALTER FUNCTION extensions.pgrst_ddl_watch() OWNER TO supabase_admin;

--
-- Name: pgrst_drop_watch(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.pgrst_drop_watch() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  obj record;
BEGIN
  FOR obj IN SELECT * FROM pg_event_trigger_dropped_objects()
  LOOP
    IF obj.object_type IN (
      'schema'
    , 'table'
    , 'foreign table'
    , 'view'
    , 'materialized view'
    , 'function'
    , 'trigger'
    , 'type'
    , 'rule'
    )
    AND obj.is_temporary IS false -- no pg_temp objects
    THEN
      NOTIFY pgrst, 'reload schema';
    END IF;
  END LOOP;
END; $$;


ALTER FUNCTION extensions.pgrst_drop_watch() OWNER TO supabase_admin;

--
-- Name: set_graphql_placeholder(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.set_graphql_placeholder() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $_$
    DECLARE
    graphql_is_dropped bool;
    BEGIN
    graphql_is_dropped = (
        SELECT ev.schema_name = 'graphql_public'
        FROM pg_event_trigger_dropped_objects() AS ev
        WHERE ev.schema_name = 'graphql_public'
    );

    IF graphql_is_dropped
    THEN
        create or replace function graphql_public.graphql(
            "operationName" text default null,
            query text default null,
            variables jsonb default null,
            extensions jsonb default null
        )
            returns jsonb
            language plpgsql
        as $$
            DECLARE
                server_version float;
            BEGIN
                server_version = (SELECT (SPLIT_PART((select version()), ' ', 2))::float);

                IF server_version >= 14 THEN
                    RETURN jsonb_build_object(
                        'errors', jsonb_build_array(
                            jsonb_build_object(
                                'message', 'pg_graphql extension is not enabled.'
                            )
                        )
                    );
                ELSE
                    RETURN jsonb_build_object(
                        'errors', jsonb_build_array(
                            jsonb_build_object(
                                'message', 'pg_graphql is only available on projects running Postgres 14 onwards.'
                            )
                        )
                    );
                END IF;
            END;
        $$;
    END IF;

    END;
$_$;


ALTER FUNCTION extensions.set_graphql_placeholder() OWNER TO supabase_admin;

--
-- Name: FUNCTION set_graphql_placeholder(); Type: COMMENT; Schema: extensions; Owner: supabase_admin
--

COMMENT ON FUNCTION extensions.set_graphql_placeholder() IS 'Reintroduces placeholder function for graphql_public.graphql';


--
-- Name: get_auth(text); Type: FUNCTION; Schema: pgbouncer; Owner: supabase_admin
--

CREATE FUNCTION pgbouncer.get_auth(p_usename text) RETURNS TABLE(username text, password text)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    RAISE WARNING 'PgBouncer auth request: %', p_usename;

    RETURN QUERY
    SELECT usename::TEXT, passwd::TEXT FROM pg_catalog.pg_shadow
    WHERE usename = p_usename;
END;
$$;


ALTER FUNCTION pgbouncer.get_auth(p_usename text) OWNER TO supabase_admin;

--
-- Name: getuid(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.getuid(user_email text) RETURNS uuid
    LANGUAGE plpgsql
    AS $$
BEGIN
  RETURN (
    SELECT id
    FROM auth.users
    WHERE auth.users.email = user_email
  );
END; $$;


ALTER FUNCTION public.getuid(user_email text) OWNER TO postgres;

--
-- Name: apply_rls(jsonb, integer); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer DEFAULT (1024 * 1024)) RETURNS SETOF realtime.wal_rls
    LANGUAGE plpgsql
    AS $$
declare
-- Regclass of the table e.g. public.notes
entity_ regclass = (quote_ident(wal ->> 'schema') || '.' || quote_ident(wal ->> 'table'))::regclass;

-- I, U, D, T: insert, update ...
action realtime.action = (
    case wal ->> 'action'
        when 'I' then 'INSERT'
        when 'U' then 'UPDATE'
        when 'D' then 'DELETE'
        else 'ERROR'
    end
);

-- Is row level security enabled for the table
is_rls_enabled bool = relrowsecurity from pg_class where oid = entity_;

subscriptions realtime.subscription[] = array_agg(subs)
    from
        realtime.subscription subs
    where
        subs.entity = entity_;

-- Subscription vars
roles regrole[] = array_agg(distinct us.claims_role::text)
    from
        unnest(subscriptions) us;

working_role regrole;
claimed_role regrole;
claims jsonb;

subscription_id uuid;
subscription_has_access bool;
visible_to_subscription_ids uuid[] = '{}';

-- structured info for wal's columns
columns realtime.wal_column[];
-- previous identity values for update/delete
old_columns realtime.wal_column[];

error_record_exceeds_max_size boolean = octet_length(wal::text) > max_record_bytes;

-- Primary jsonb output for record
output jsonb;

begin
perform set_config('role', null, true);

columns =
    array_agg(
        (
            x->>'name',
            x->>'type',
            x->>'typeoid',
            realtime.cast(
                (x->'value') #>> '{}',
                coalesce(
                    (x->>'typeoid')::regtype, -- null when wal2json version <= 2.4
                    (x->>'type')::regtype
                )
            ),
            (pks ->> 'name') is not null,
            true
        )::realtime.wal_column
    )
    from
        jsonb_array_elements(wal -> 'columns') x
        left join jsonb_array_elements(wal -> 'pk') pks
            on (x ->> 'name') = (pks ->> 'name');

old_columns =
    array_agg(
        (
            x->>'name',
            x->>'type',
            x->>'typeoid',
            realtime.cast(
                (x->'value') #>> '{}',
                coalesce(
                    (x->>'typeoid')::regtype, -- null when wal2json version <= 2.4
                    (x->>'type')::regtype
                )
            ),
            (pks ->> 'name') is not null,
            true
        )::realtime.wal_column
    )
    from
        jsonb_array_elements(wal -> 'identity') x
        left join jsonb_array_elements(wal -> 'pk') pks
            on (x ->> 'name') = (pks ->> 'name');

for working_role in select * from unnest(roles) loop

    -- Update `is_selectable` for columns and old_columns
    columns =
        array_agg(
            (
                c.name,
                c.type_name,
                c.type_oid,
                c.value,
                c.is_pkey,
                pg_catalog.has_column_privilege(working_role, entity_, c.name, 'SELECT')
            )::realtime.wal_column
        )
        from
            unnest(columns) c;

    old_columns =
            array_agg(
                (
                    c.name,
                    c.type_name,
                    c.type_oid,
                    c.value,
                    c.is_pkey,
                    pg_catalog.has_column_privilege(working_role, entity_, c.name, 'SELECT')
                )::realtime.wal_column
            )
            from
                unnest(old_columns) c;

    if action <> 'DELETE' and count(1) = 0 from unnest(columns) c where c.is_pkey then
        return next (
            jsonb_build_object(
                'schema', wal ->> 'schema',
                'table', wal ->> 'table',
                'type', action
            ),
            is_rls_enabled,
            -- subscriptions is already filtered by entity
            (select array_agg(s.subscription_id) from unnest(subscriptions) as s where claims_role = working_role),
            array['Error 400: Bad Request, no primary key']
        )::realtime.wal_rls;

    -- The claims role does not have SELECT permission to the primary key of entity
    elsif action <> 'DELETE' and sum(c.is_selectable::int) <> count(1) from unnest(columns) c where c.is_pkey then
        return next (
            jsonb_build_object(
                'schema', wal ->> 'schema',
                'table', wal ->> 'table',
                'type', action
            ),
            is_rls_enabled,
            (select array_agg(s.subscription_id) from unnest(subscriptions) as s where claims_role = working_role),
            array['Error 401: Unauthorized']
        )::realtime.wal_rls;

    else
        output = jsonb_build_object(
            'schema', wal ->> 'schema',
            'table', wal ->> 'table',
            'type', action,
            'commit_timestamp', to_char(
                ((wal ->> 'timestamp')::timestamptz at time zone 'utc'),
                'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"'
            ),
            'columns', (
                select
                    jsonb_agg(
                        jsonb_build_object(
                            'name', pa.attname,
                            'type', pt.typname
                        )
                        order by pa.attnum asc
                    )
                from
                    pg_attribute pa
                    join pg_type pt
                        on pa.atttypid = pt.oid
                where
                    attrelid = entity_
                    and attnum > 0
                    and pg_catalog.has_column_privilege(working_role, entity_, pa.attname, 'SELECT')
            )
        )
        -- Add "record" key for insert and update
        || case
            when action in ('INSERT', 'UPDATE') then
                jsonb_build_object(
                    'record',
                    (
                        select
                            jsonb_object_agg(
                                -- if unchanged toast, get column name and value from old record
                                coalesce((c).name, (oc).name),
                                case
                                    when (c).name is null then (oc).value
                                    else (c).value
                                end
                            )
                        from
                            unnest(columns) c
                            full outer join unnest(old_columns) oc
                                on (c).name = (oc).name
                        where
                            coalesce((c).is_selectable, (oc).is_selectable)
                            and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                    )
                )
            else '{}'::jsonb
        end
        -- Add "old_record" key for update and delete
        || case
            when action = 'UPDATE' then
                jsonb_build_object(
                        'old_record',
                        (
                            select jsonb_object_agg((c).name, (c).value)
                            from unnest(old_columns) c
                            where
                                (c).is_selectable
                                and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                        )
                    )
            when action = 'DELETE' then
                jsonb_build_object(
                    'old_record',
                    (
                        select jsonb_object_agg((c).name, (c).value)
                        from unnest(old_columns) c
                        where
                            (c).is_selectable
                            and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                            and ( not is_rls_enabled or (c).is_pkey ) -- if RLS enabled, we can't secure deletes so filter to pkey
                    )
                )
            else '{}'::jsonb
        end;

        -- Create the prepared statement
        if is_rls_enabled and action <> 'DELETE' then
            if (select 1 from pg_prepared_statements where name = 'walrus_rls_stmt' limit 1) > 0 then
                deallocate walrus_rls_stmt;
            end if;
            execute realtime.build_prepared_statement_sql('walrus_rls_stmt', entity_, columns);
        end if;

        visible_to_subscription_ids = '{}';

        for subscription_id, claims in (
                select
                    subs.subscription_id,
                    subs.claims
                from
                    unnest(subscriptions) subs
                where
                    subs.entity = entity_
                    and subs.claims_role = working_role
                    and (
                        realtime.is_visible_through_filters(columns, subs.filters)
                        or (
                          action = 'DELETE'
                          and realtime.is_visible_through_filters(old_columns, subs.filters)
                        )
                    )
        ) loop

            if not is_rls_enabled or action = 'DELETE' then
                visible_to_subscription_ids = visible_to_subscription_ids || subscription_id;
            else
                -- Check if RLS allows the role to see the record
                perform
                    -- Trim leading and trailing quotes from working_role because set_config
                    -- doesn't recognize the role as valid if they are included
                    set_config('role', trim(both '"' from working_role::text), true),
                    set_config('request.jwt.claims', claims::text, true);

                execute 'execute walrus_rls_stmt' into subscription_has_access;

                if subscription_has_access then
                    visible_to_subscription_ids = visible_to_subscription_ids || subscription_id;
                end if;
            end if;
        end loop;

        perform set_config('role', null, true);

        return next (
            output,
            is_rls_enabled,
            visible_to_subscription_ids,
            case
                when error_record_exceeds_max_size then array['Error 413: Payload Too Large']
                else '{}'
            end
        )::realtime.wal_rls;

    end if;
end loop;

perform set_config('role', null, true);
end;
$$;


ALTER FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) OWNER TO supabase_admin;

--
-- Name: broadcast_changes(text, text, text, text, text, record, record, text); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text DEFAULT 'ROW'::text) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
    -- Declare a variable to hold the JSONB representation of the row
    row_data jsonb := '{}'::jsonb;
BEGIN
    IF level = 'STATEMENT' THEN
        RAISE EXCEPTION 'function can only be triggered for each row, not for each statement';
    END IF;
    -- Check the operation type and handle accordingly
    IF operation = 'INSERT' OR operation = 'UPDATE' OR operation = 'DELETE' THEN
        row_data := jsonb_build_object('old_record', OLD, 'record', NEW, 'operation', operation, 'table', table_name, 'schema', table_schema);
        PERFORM realtime.send (row_data, event_name, topic_name);
    ELSE
        RAISE EXCEPTION 'Unexpected operation type: %', operation;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RAISE EXCEPTION 'Failed to process the row: %', SQLERRM;
END;

$$;


ALTER FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text) OWNER TO supabase_admin;

--
-- Name: build_prepared_statement_sql(text, regclass, realtime.wal_column[]); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) RETURNS text
    LANGUAGE sql
    AS $$
      /*
      Builds a sql string that, if executed, creates a prepared statement to
      tests retrive a row from *entity* by its primary key columns.
      Example
          select realtime.build_prepared_statement_sql('public.notes', '{"id"}'::text[], '{"bigint"}'::text[])
      */
          select
      'prepare ' || prepared_statement_name || ' as
          select
              exists(
                  select
                      1
                  from
                      ' || entity || '
                  where
                      ' || string_agg(quote_ident(pkc.name) || '=' || quote_nullable(pkc.value #>> '{}') , ' and ') || '
              )'
          from
              unnest(columns) pkc
          where
              pkc.is_pkey
          group by
              entity
      $$;


ALTER FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) OWNER TO supabase_admin;

--
-- Name: cast(text, regtype); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime."cast"(val text, type_ regtype) RETURNS jsonb
    LANGUAGE plpgsql IMMUTABLE
    AS $$
    declare
      res jsonb;
    begin
      execute format('select to_jsonb(%L::'|| type_::text || ')', val)  into res;
      return res;
    end
    $$;


ALTER FUNCTION realtime."cast"(val text, type_ regtype) OWNER TO supabase_admin;

--
-- Name: check_equality_op(realtime.equality_op, regtype, text, text); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) RETURNS boolean
    LANGUAGE plpgsql IMMUTABLE
    AS $$
      /*
      Casts *val_1* and *val_2* as type *type_* and check the *op* condition for truthiness
      */
      declare
          op_symbol text = (
              case
                  when op = 'eq' then '='
                  when op = 'neq' then '!='
                  when op = 'lt' then '<'
                  when op = 'lte' then '<='
                  when op = 'gt' then '>'
                  when op = 'gte' then '>='
                  when op = 'in' then '= any'
                  else 'UNKNOWN OP'
              end
          );
          res boolean;
      begin
          execute format(
              'select %L::'|| type_::text || ' ' || op_symbol
              || ' ( %L::'
              || (
                  case
                      when op = 'in' then type_::text || '[]'
                      else type_::text end
              )
              || ')', val_1, val_2) into res;
          return res;
      end;
      $$;


ALTER FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) OWNER TO supabase_admin;

--
-- Name: is_visible_through_filters(realtime.wal_column[], realtime.user_defined_filter[]); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$
    /*
    Should the record be visible (true) or filtered out (false) after *filters* are applied
    */
        select
            -- Default to allowed when no filters present
            $2 is null -- no filters. this should not happen because subscriptions has a default
            or array_length($2, 1) is null -- array length of an empty array is null
            or bool_and(
                coalesce(
                    realtime.check_equality_op(
                        op:=f.op,
                        type_:=coalesce(
                            col.type_oid::regtype, -- null when wal2json version <= 2.4
                            col.type_name::regtype
                        ),
                        -- cast jsonb to text
                        val_1:=col.value #>> '{}',
                        val_2:=f.value
                    ),
                    false -- if null, filter does not match
                )
            )
        from
            unnest(filters) f
            join unnest(columns) col
                on f.column_name = col.name;
    $_$;


ALTER FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) OWNER TO supabase_admin;

--
-- Name: list_changes(name, name, integer, integer); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) RETURNS SETOF realtime.wal_rls
    LANGUAGE sql
    SET log_min_messages TO 'fatal'
    AS $$
      with pub as (
        select
          concat_ws(
            ',',
            case when bool_or(pubinsert) then 'insert' else null end,
            case when bool_or(pubupdate) then 'update' else null end,
            case when bool_or(pubdelete) then 'delete' else null end
          ) as w2j_actions,
          coalesce(
            string_agg(
              realtime.quote_wal2json(format('%I.%I', schemaname, tablename)::regclass),
              ','
            ) filter (where ppt.tablename is not null and ppt.tablename not like '% %'),
            ''
          ) w2j_add_tables
        from
          pg_publication pp
          left join pg_publication_tables ppt
            on pp.pubname = ppt.pubname
        where
          pp.pubname = publication
        group by
          pp.pubname
        limit 1
      ),
      w2j as (
        select
          x.*, pub.w2j_add_tables
        from
          pub,
          pg_logical_slot_get_changes(
            slot_name, null, max_changes,
            'include-pk', 'true',
            'include-transaction', 'false',
            'include-timestamp', 'true',
            'include-type-oids', 'true',
            'format-version', '2',
            'actions', pub.w2j_actions,
            'add-tables', pub.w2j_add_tables
          ) x
      )
      select
        xyz.wal,
        xyz.is_rls_enabled,
        xyz.subscription_ids,
        xyz.errors
      from
        w2j,
        realtime.apply_rls(
          wal := w2j.data::jsonb,
          max_record_bytes := max_record_bytes
        ) xyz(wal, is_rls_enabled, subscription_ids, errors)
      where
        w2j.w2j_add_tables <> ''
        and xyz.subscription_ids[1] is not null
    $$;


ALTER FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) OWNER TO supabase_admin;

--
-- Name: quote_wal2json(regclass); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.quote_wal2json(entity regclass) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $$
      select
        (
          select string_agg('' || ch,'')
          from unnest(string_to_array(nsp.nspname::text, null)) with ordinality x(ch, idx)
          where
            not (x.idx = 1 and x.ch = '"')
            and not (
              x.idx = array_length(string_to_array(nsp.nspname::text, null), 1)
              and x.ch = '"'
            )
        )
        || '.'
        || (
          select string_agg('' || ch,'')
          from unnest(string_to_array(pc.relname::text, null)) with ordinality x(ch, idx)
          where
            not (x.idx = 1 and x.ch = '"')
            and not (
              x.idx = array_length(string_to_array(nsp.nspname::text, null), 1)
              and x.ch = '"'
            )
          )
      from
        pg_class pc
        join pg_namespace nsp
          on pc.relnamespace = nsp.oid
      where
        pc.oid = entity
    $$;


ALTER FUNCTION realtime.quote_wal2json(entity regclass) OWNER TO supabase_admin;

--
-- Name: send(jsonb, text, text, boolean); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean DEFAULT true) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  BEGIN
    -- Set the topic configuration
    EXECUTE format('SET LOCAL realtime.topic TO %L', topic);

    -- Attempt to insert the message
    INSERT INTO realtime.messages (payload, event, topic, private, extension)
    VALUES (payload, event, topic, private, 'broadcast');
  EXCEPTION
    WHEN OTHERS THEN
      -- Capture and notify the error
      PERFORM pg_notify(
          'realtime:system',
          jsonb_build_object(
              'error', SQLERRM,
              'function', 'realtime.send',
              'event', event,
              'topic', topic,
              'private', private
          )::text
      );
  END;
END;
$$;


ALTER FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean) OWNER TO supabase_admin;

--
-- Name: subscription_check_filters(); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.subscription_check_filters() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    /*
    Validates that the user defined filters for a subscription:
    - refer to valid columns that the claimed role may access
    - values are coercable to the correct column type
    */
    declare
        col_names text[] = coalesce(
                array_agg(c.column_name order by c.ordinal_position),
                '{}'::text[]
            )
            from
                information_schema.columns c
            where
                format('%I.%I', c.table_schema, c.table_name)::regclass = new.entity
                and pg_catalog.has_column_privilege(
                    (new.claims ->> 'role'),
                    format('%I.%I', c.table_schema, c.table_name)::regclass,
                    c.column_name,
                    'SELECT'
                );
        filter realtime.user_defined_filter;
        col_type regtype;

        in_val jsonb;
    begin
        for filter in select * from unnest(new.filters) loop
            -- Filtered column is valid
            if not filter.column_name = any(col_names) then
                raise exception 'invalid column for filter %', filter.column_name;
            end if;

            -- Type is sanitized and safe for string interpolation
            col_type = (
                select atttypid::regtype
                from pg_catalog.pg_attribute
                where attrelid = new.entity
                      and attname = filter.column_name
            );
            if col_type is null then
                raise exception 'failed to lookup type for column %', filter.column_name;
            end if;

            -- Set maximum number of entries for in filter
            if filter.op = 'in'::realtime.equality_op then
                in_val = realtime.cast(filter.value, (col_type::text || '[]')::regtype);
                if coalesce(jsonb_array_length(in_val), 0) > 100 then
                    raise exception 'too many values for `in` filter. Maximum 100';
                end if;
            else
                -- raises an exception if value is not coercable to type
                perform realtime.cast(filter.value, col_type);
            end if;

        end loop;

        -- Apply consistent order to filters so the unique constraint on
        -- (subscription_id, entity, filters) can't be tricked by a different filter order
        new.filters = coalesce(
            array_agg(f order by f.column_name, f.op, f.value),
            '{}'
        ) from unnest(new.filters) f;

        return new;
    end;
    $$;


ALTER FUNCTION realtime.subscription_check_filters() OWNER TO supabase_admin;

--
-- Name: to_regrole(text); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.to_regrole(role_name text) RETURNS regrole
    LANGUAGE sql IMMUTABLE
    AS $$ select role_name::regrole $$;


ALTER FUNCTION realtime.to_regrole(role_name text) OWNER TO supabase_admin;

--
-- Name: topic(); Type: FUNCTION; Schema: realtime; Owner: supabase_realtime_admin
--

CREATE FUNCTION realtime.topic() RETURNS text
    LANGUAGE sql STABLE
    AS $$
select nullif(current_setting('realtime.topic', true), '')::text;
$$;


ALTER FUNCTION realtime.topic() OWNER TO supabase_realtime_admin;

--
-- Name: add_prefixes(text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.add_prefixes(_bucket_id text, _name text) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    prefixes text[];
BEGIN
    prefixes := "storage"."get_prefixes"("_name");

    IF array_length(prefixes, 1) > 0 THEN
        INSERT INTO storage.prefixes (name, bucket_id)
        SELECT UNNEST(prefixes) as name, "_bucket_id" ON CONFLICT DO NOTHING;
    END IF;
END;
$$;


ALTER FUNCTION storage.add_prefixes(_bucket_id text, _name text) OWNER TO supabase_storage_admin;

--
-- Name: can_insert_object(text, text, uuid, jsonb); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.can_insert_object(bucketid text, name text, owner uuid, metadata jsonb) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  INSERT INTO "storage"."objects" ("bucket_id", "name", "owner", "metadata") VALUES (bucketid, name, owner, metadata);
  -- hack to rollback the successful insert
  RAISE sqlstate 'PT200' using
  message = 'ROLLBACK',
  detail = 'rollback successful insert';
END
$$;


ALTER FUNCTION storage.can_insert_object(bucketid text, name text, owner uuid, metadata jsonb) OWNER TO supabase_storage_admin;

--
-- Name: delete_prefix(text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.delete_prefix(_bucket_id text, _name text) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    -- Check if we can delete the prefix
    IF EXISTS(
        SELECT FROM "storage"."prefixes"
        WHERE "prefixes"."bucket_id" = "_bucket_id"
          AND level = "storage"."get_level"("_name") + 1
          AND "prefixes"."name" COLLATE "C" LIKE "_name" || '/%'
        LIMIT 1
    )
    OR EXISTS(
        SELECT FROM "storage"."objects"
        WHERE "objects"."bucket_id" = "_bucket_id"
          AND "storage"."get_level"("objects"."name") = "storage"."get_level"("_name") + 1
          AND "objects"."name" COLLATE "C" LIKE "_name" || '/%'
        LIMIT 1
    ) THEN
    -- There are sub-objects, skip deletion
    RETURN false;
    ELSE
        DELETE FROM "storage"."prefixes"
        WHERE "prefixes"."bucket_id" = "_bucket_id"
          AND level = "storage"."get_level"("_name")
          AND "prefixes"."name" = "_name";
        RETURN true;
    END IF;
END;
$$;


ALTER FUNCTION storage.delete_prefix(_bucket_id text, _name text) OWNER TO supabase_storage_admin;

--
-- Name: delete_prefix_hierarchy_trigger(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.delete_prefix_hierarchy_trigger() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
    prefix text;
BEGIN
    prefix := "storage"."get_prefix"(OLD."name");

    IF coalesce(prefix, '') != '' THEN
        PERFORM "storage"."delete_prefix"(OLD."bucket_id", prefix);
    END IF;

    RETURN OLD;
END;
$$;


ALTER FUNCTION storage.delete_prefix_hierarchy_trigger() OWNER TO supabase_storage_admin;

--
-- Name: extension(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.extension(name text) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
_filename text;
BEGIN
	select string_to_array(name, '/') into _parts;
	select _parts[array_length(_parts,1)] into _filename;
	-- @todo return the last part instead of 2
	return reverse(split_part(reverse(_filename), '.', 1));
END
$$;


ALTER FUNCTION storage.extension(name text) OWNER TO supabase_storage_admin;

--
-- Name: filename(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.filename(name text) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
BEGIN
	select string_to_array(name, '/') into _parts;
	return _parts[array_length(_parts,1)];
END
$$;


ALTER FUNCTION storage.filename(name text) OWNER TO supabase_storage_admin;

--
-- Name: foldername(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.foldername(name text) RETURNS text[]
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
BEGIN
	select string_to_array(name, '/') into _parts;
	return _parts[1:array_length(_parts,1)-1];
END
$$;


ALTER FUNCTION storage.foldername(name text) OWNER TO supabase_storage_admin;

--
-- Name: get_level(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.get_level(name text) RETURNS integer
    LANGUAGE sql IMMUTABLE STRICT
    AS $$
SELECT array_length(string_to_array("name", '/'), 1);
$$;


ALTER FUNCTION storage.get_level(name text) OWNER TO supabase_storage_admin;

--
-- Name: get_prefix(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.get_prefix(name text) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
SELECT
    CASE WHEN strpos("name", '/') > 0 THEN
             regexp_replace("name", '[\/]{1}[^\/]+\/?$', '')
         ELSE
             ''
        END;
$_$;


ALTER FUNCTION storage.get_prefix(name text) OWNER TO supabase_storage_admin;

--
-- Name: get_prefixes(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.get_prefixes(name text) RETURNS text[]
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $$
DECLARE
    parts text[];
    prefixes text[];
    prefix text;
BEGIN
    -- Split the name into parts by '/'
    parts := string_to_array("name", '/');
    prefixes := '{}';

    -- Construct the prefixes, stopping one level below the last part
    FOR i IN 1..array_length(parts, 1) - 1 LOOP
            prefix := array_to_string(parts[1:i], '/');
            prefixes := array_append(prefixes, prefix);
    END LOOP;

    RETURN prefixes;
END;
$$;


ALTER FUNCTION storage.get_prefixes(name text) OWNER TO supabase_storage_admin;

--
-- Name: get_size_by_bucket(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.get_size_by_bucket() RETURNS TABLE(size bigint, bucket_id text)
    LANGUAGE plpgsql
    AS $$
BEGIN
    return query
        select sum((metadata->>'size')::int) as size, obj.bucket_id
        from "storage".objects as obj
        group by obj.bucket_id;
END
$$;


ALTER FUNCTION storage.get_size_by_bucket() OWNER TO supabase_storage_admin;

--
-- Name: list_multipart_uploads_with_delimiter(text, text, text, integer, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.list_multipart_uploads_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer DEFAULT 100, next_key_token text DEFAULT ''::text, next_upload_token text DEFAULT ''::text) RETURNS TABLE(key text, id text, created_at timestamp with time zone)
    LANGUAGE plpgsql
    AS $_$
BEGIN
    RETURN QUERY EXECUTE
        'SELECT DISTINCT ON(key COLLATE "C") * from (
            SELECT
                CASE
                    WHEN position($2 IN substring(key from length($1) + 1)) > 0 THEN
                        substring(key from 1 for length($1) + position($2 IN substring(key from length($1) + 1)))
                    ELSE
                        key
                END AS key, id, created_at
            FROM
                storage.s3_multipart_uploads
            WHERE
                bucket_id = $5 AND
                key ILIKE $1 || ''%'' AND
                CASE
                    WHEN $4 != '''' AND $6 = '''' THEN
                        CASE
                            WHEN position($2 IN substring(key from length($1) + 1)) > 0 THEN
                                substring(key from 1 for length($1) + position($2 IN substring(key from length($1) + 1))) COLLATE "C" > $4
                            ELSE
                                key COLLATE "C" > $4
                            END
                    ELSE
                        true
                END AND
                CASE
                    WHEN $6 != '''' THEN
                        id COLLATE "C" > $6
                    ELSE
                        true
                    END
            ORDER BY
                key COLLATE "C" ASC, created_at ASC) as e order by key COLLATE "C" LIMIT $3'
        USING prefix_param, delimiter_param, max_keys, next_key_token, bucket_id, next_upload_token;
END;
$_$;


ALTER FUNCTION storage.list_multipart_uploads_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, next_key_token text, next_upload_token text) OWNER TO supabase_storage_admin;

--
-- Name: list_objects_with_delimiter(text, text, text, integer, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.list_objects_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer DEFAULT 100, start_after text DEFAULT ''::text, next_token text DEFAULT ''::text) RETURNS TABLE(name text, id uuid, metadata jsonb, updated_at timestamp with time zone)
    LANGUAGE plpgsql
    AS $_$
BEGIN
    RETURN QUERY EXECUTE
        'SELECT DISTINCT ON(name COLLATE "C") * from (
            SELECT
                CASE
                    WHEN position($2 IN substring(name from length($1) + 1)) > 0 THEN
                        substring(name from 1 for length($1) + position($2 IN substring(name from length($1) + 1)))
                    ELSE
                        name
                END AS name, id, metadata, updated_at
            FROM
                storage.objects
            WHERE
                bucket_id = $5 AND
                name ILIKE $1 || ''%'' AND
                CASE
                    WHEN $6 != '''' THEN
                    name COLLATE "C" > $6
                ELSE true END
                AND CASE
                    WHEN $4 != '''' THEN
                        CASE
                            WHEN position($2 IN substring(name from length($1) + 1)) > 0 THEN
                                substring(name from 1 for length($1) + position($2 IN substring(name from length($1) + 1))) COLLATE "C" > $4
                            ELSE
                                name COLLATE "C" > $4
                            END
                    ELSE
                        true
                END
            ORDER BY
                name COLLATE "C" ASC) as e order by name COLLATE "C" LIMIT $3'
        USING prefix_param, delimiter_param, max_keys, next_token, bucket_id, start_after;
END;
$_$;


ALTER FUNCTION storage.list_objects_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, start_after text, next_token text) OWNER TO supabase_storage_admin;

--
-- Name: objects_insert_prefix_trigger(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.objects_insert_prefix_trigger() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    PERFORM "storage"."add_prefixes"(NEW."bucket_id", NEW."name");
    NEW.level := "storage"."get_level"(NEW."name");

    RETURN NEW;
END;
$$;


ALTER FUNCTION storage.objects_insert_prefix_trigger() OWNER TO supabase_storage_admin;

--
-- Name: operation(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.operation() RETURNS text
    LANGUAGE plpgsql STABLE
    AS $$
BEGIN
    RETURN current_setting('storage.operation', true);
END;
$$;


ALTER FUNCTION storage.operation() OWNER TO supabase_storage_admin;

--
-- Name: prefixes_insert_trigger(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.prefixes_insert_trigger() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    PERFORM "storage"."add_prefixes"(NEW."bucket_id", NEW."name");
    RETURN NEW;
END;
$$;


ALTER FUNCTION storage.prefixes_insert_trigger() OWNER TO supabase_storage_admin;

--
-- Name: search(text, text, integer, integer, integer, text, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.search(prefix text, bucketname text, limits integer DEFAULT 100, levels integer DEFAULT 1, offsets integer DEFAULT 0, search text DEFAULT ''::text, sortcolumn text DEFAULT 'name'::text, sortorder text DEFAULT 'asc'::text) RETURNS TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)
    LANGUAGE plpgsql STABLE
    AS $$
declare
    can_bypass_rls BOOLEAN;
begin
    SELECT rolbypassrls
    INTO can_bypass_rls
    FROM pg_roles
    WHERE rolname = coalesce(nullif(current_setting('role', true), 'none'), current_user);

    IF can_bypass_rls THEN
        RETURN QUERY SELECT * FROM storage.search_v1_optimised(prefix, bucketname, limits, levels, offsets, search, sortcolumn, sortorder);
    ELSE
        RETURN QUERY SELECT * FROM storage.search_legacy_v1(prefix, bucketname, limits, levels, offsets, search, sortcolumn, sortorder);
    END IF;
end;
$$;


ALTER FUNCTION storage.search(prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text) OWNER TO supabase_storage_admin;

--
-- Name: search_legacy_v1(text, text, integer, integer, integer, text, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.search_legacy_v1(prefix text, bucketname text, limits integer DEFAULT 100, levels integer DEFAULT 1, offsets integer DEFAULT 0, search text DEFAULT ''::text, sortcolumn text DEFAULT 'name'::text, sortorder text DEFAULT 'asc'::text) RETURNS TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)
    LANGUAGE plpgsql STABLE
    AS $_$
declare
    v_order_by text;
    v_sort_order text;
begin
    case
        when sortcolumn = 'name' then
            v_order_by = 'name';
        when sortcolumn = 'updated_at' then
            v_order_by = 'updated_at';
        when sortcolumn = 'created_at' then
            v_order_by = 'created_at';
        when sortcolumn = 'last_accessed_at' then
            v_order_by = 'last_accessed_at';
        else
            v_order_by = 'name';
        end case;

    case
        when sortorder = 'asc' then
            v_sort_order = 'asc';
        when sortorder = 'desc' then
            v_sort_order = 'desc';
        else
            v_sort_order = 'asc';
        end case;

    v_order_by = v_order_by || ' ' || v_sort_order;

    return query execute
        'with folders as (
           select path_tokens[$1] as folder
           from storage.objects
             where objects.name ilike $2 || $3 || ''%''
               and bucket_id = $4
               and array_length(objects.path_tokens, 1) <> $1
           group by folder
           order by folder ' || v_sort_order || '
     )
     (select folder as "name",
            null as id,
            null as updated_at,
            null as created_at,
            null as last_accessed_at,
            null as metadata from folders)
     union all
     (select path_tokens[$1] as "name",
            id,
            updated_at,
            created_at,
            last_accessed_at,
            metadata
     from storage.objects
     where objects.name ilike $2 || $3 || ''%''
       and bucket_id = $4
       and array_length(objects.path_tokens, 1) = $1
     order by ' || v_order_by || ')
     limit $5
     offset $6' using levels, prefix, search, bucketname, limits, offsets;
end;
$_$;


ALTER FUNCTION storage.search_legacy_v1(prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text) OWNER TO supabase_storage_admin;

--
-- Name: search_v1_optimised(text, text, integer, integer, integer, text, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.search_v1_optimised(prefix text, bucketname text, limits integer DEFAULT 100, levels integer DEFAULT 1, offsets integer DEFAULT 0, search text DEFAULT ''::text, sortcolumn text DEFAULT 'name'::text, sortorder text DEFAULT 'asc'::text) RETURNS TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)
    LANGUAGE plpgsql STABLE
    AS $_$
declare
    v_order_by text;
    v_sort_order text;
begin
    case
        when sortcolumn = 'name' then
            v_order_by = 'name';
        when sortcolumn = 'updated_at' then
            v_order_by = 'updated_at';
        when sortcolumn = 'created_at' then
            v_order_by = 'created_at';
        when sortcolumn = 'last_accessed_at' then
            v_order_by = 'last_accessed_at';
        else
            v_order_by = 'name';
        end case;

    case
        when sortorder = 'asc' then
            v_sort_order = 'asc';
        when sortorder = 'desc' then
            v_sort_order = 'desc';
        else
            v_sort_order = 'asc';
        end case;

    v_order_by = v_order_by || ' ' || v_sort_order;

    return query execute
        'with folders as (
           select (string_to_array(name, ''/''))[level] as name
           from storage.prefixes
             where lower(prefixes.name) like lower($2 || $3) || ''%''
               and bucket_id = $4
               and level = $1
           order by name ' || v_sort_order || '
     )
     (select name,
            null as id,
            null as updated_at,
            null as created_at,
            null as last_accessed_at,
            null as metadata from folders)
     union all
     (select path_tokens[level] as "name",
            id,
            updated_at,
            created_at,
            last_accessed_at,
            metadata
     from storage.objects
     where lower(objects.name) like lower($2 || $3) || ''%''
       and bucket_id = $4
       and level = $1
     order by ' || v_order_by || ')
     limit $5
     offset $6' using levels, prefix, search, bucketname, limits, offsets;
end;
$_$;


ALTER FUNCTION storage.search_v1_optimised(prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text) OWNER TO supabase_storage_admin;

--
-- Name: search_v2(text, text, integer, integer, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.search_v2(prefix text, bucket_name text, limits integer DEFAULT 100, levels integer DEFAULT 1, start_after text DEFAULT ''::text) RETURNS TABLE(key text, name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, metadata jsonb)
    LANGUAGE plpgsql STABLE
    AS $_$
BEGIN
    RETURN query EXECUTE
        $sql$
        SELECT * FROM (
            (
                SELECT
                    split_part(name, '/', $4) AS key,
                    name || '/' AS name,
                    NULL::uuid AS id,
                    NULL::timestamptz AS updated_at,
                    NULL::timestamptz AS created_at,
                    NULL::jsonb AS metadata
                FROM storage.prefixes
                WHERE name COLLATE "C" LIKE $1 || '%'
                AND bucket_id = $2
                AND level = $4
                AND name COLLATE "C" > $5
                ORDER BY prefixes.name COLLATE "C" LIMIT $3
            )
            UNION ALL
            (SELECT split_part(name, '/', $4) AS key,
                name,
                id,
                updated_at,
                created_at,
                metadata
            FROM storage.objects
            WHERE name COLLATE "C" LIKE $1 || '%'
                AND bucket_id = $2
                AND level = $4
                AND name COLLATE "C" > $5
            ORDER BY name COLLATE "C" LIMIT $3)
        ) obj
        ORDER BY name COLLATE "C" LIMIT $3;
        $sql$
        USING prefix, bucket_name, limits, levels, start_after;
END;
$_$;


ALTER FUNCTION storage.search_v2(prefix text, bucket_name text, limits integer, levels integer, start_after text) OWNER TO supabase_storage_admin;

--
-- Name: update_updated_at_column(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.update_updated_at_column() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW; 
END;
$$;


ALTER FUNCTION storage.update_updated_at_column() OWNER TO supabase_storage_admin;

--
-- Name: secrets_encrypt_secret_secret(); Type: FUNCTION; Schema: vault; Owner: supabase_admin
--

CREATE FUNCTION vault.secrets_encrypt_secret_secret() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
		BEGIN
		        new.secret = CASE WHEN new.secret IS NULL THEN NULL ELSE
			CASE WHEN new.key_id IS NULL THEN NULL ELSE pg_catalog.encode(
			  pgsodium.crypto_aead_det_encrypt(
				pg_catalog.convert_to(new.secret, 'utf8'),
				pg_catalog.convert_to((new.id::text || new.description::text || new.created_at::text || new.updated_at::text)::text, 'utf8'),
				new.key_id::uuid,
				new.nonce
			  ),
				'base64') END END;
		RETURN new;
		END;
		$$;


ALTER FUNCTION vault.secrets_encrypt_secret_secret() OWNER TO supabase_admin;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: audit_log_entries; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.audit_log_entries (
    instance_id uuid,
    id uuid NOT NULL,
    payload json,
    created_at timestamp with time zone,
    ip_address character varying(64) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE auth.audit_log_entries OWNER TO supabase_auth_admin;

--
-- Name: TABLE audit_log_entries; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.audit_log_entries IS 'Auth: Audit trail for user actions.';


--
-- Name: flow_state; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.flow_state (
    id uuid NOT NULL,
    user_id uuid,
    auth_code text NOT NULL,
    code_challenge_method auth.code_challenge_method NOT NULL,
    code_challenge text NOT NULL,
    provider_type text NOT NULL,
    provider_access_token text,
    provider_refresh_token text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    authentication_method text NOT NULL,
    auth_code_issued_at timestamp with time zone
);


ALTER TABLE auth.flow_state OWNER TO supabase_auth_admin;

--
-- Name: TABLE flow_state; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.flow_state IS 'stores metadata for pkce logins';


--
-- Name: identities; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.identities (
    provider_id text NOT NULL,
    user_id uuid NOT NULL,
    identity_data jsonb NOT NULL,
    provider text NOT NULL,
    last_sign_in_at timestamp with time zone,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    email text GENERATED ALWAYS AS (lower((identity_data ->> 'email'::text))) STORED,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE auth.identities OWNER TO supabase_auth_admin;

--
-- Name: TABLE identities; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.identities IS 'Auth: Stores identities associated to a user.';


--
-- Name: COLUMN identities.email; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.identities.email IS 'Auth: Email is a generated column that references the optional email property in the identity_data';


--
-- Name: instances; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.instances (
    id uuid NOT NULL,
    uuid uuid,
    raw_base_config text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone
);


ALTER TABLE auth.instances OWNER TO supabase_auth_admin;

--
-- Name: TABLE instances; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.instances IS 'Auth: Manages users across multiple sites.';


--
-- Name: mfa_amr_claims; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_amr_claims (
    session_id uuid NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    authentication_method text NOT NULL,
    id uuid NOT NULL
);


ALTER TABLE auth.mfa_amr_claims OWNER TO supabase_auth_admin;

--
-- Name: TABLE mfa_amr_claims; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_amr_claims IS 'auth: stores authenticator method reference claims for multi factor authentication';


--
-- Name: mfa_challenges; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_challenges (
    id uuid NOT NULL,
    factor_id uuid NOT NULL,
    created_at timestamp with time zone NOT NULL,
    verified_at timestamp with time zone,
    ip_address inet NOT NULL,
    otp_code text,
    web_authn_session_data jsonb
);


ALTER TABLE auth.mfa_challenges OWNER TO supabase_auth_admin;

--
-- Name: TABLE mfa_challenges; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_challenges IS 'auth: stores metadata about challenge requests made';


--
-- Name: mfa_factors; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_factors (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    friendly_name text,
    factor_type auth.factor_type NOT NULL,
    status auth.factor_status NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    secret text,
    phone text,
    last_challenged_at timestamp with time zone,
    web_authn_credential jsonb,
    web_authn_aaguid uuid
);


ALTER TABLE auth.mfa_factors OWNER TO supabase_auth_admin;

--
-- Name: TABLE mfa_factors; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_factors IS 'auth: stores metadata about factors';


--
-- Name: one_time_tokens; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.one_time_tokens (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    token_type auth.one_time_token_type NOT NULL,
    token_hash text NOT NULL,
    relates_to text NOT NULL,
    created_at timestamp without time zone DEFAULT now() NOT NULL,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    CONSTRAINT one_time_tokens_token_hash_check CHECK ((char_length(token_hash) > 0))
);


ALTER TABLE auth.one_time_tokens OWNER TO supabase_auth_admin;

--
-- Name: refresh_tokens; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.refresh_tokens (
    instance_id uuid,
    id bigint NOT NULL,
    token character varying(255),
    user_id character varying(255),
    revoked boolean,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    parent character varying(255),
    session_id uuid
);


ALTER TABLE auth.refresh_tokens OWNER TO supabase_auth_admin;

--
-- Name: TABLE refresh_tokens; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.refresh_tokens IS 'Auth: Store of tokens used to refresh JWT tokens once they expire.';


--
-- Name: refresh_tokens_id_seq; Type: SEQUENCE; Schema: auth; Owner: supabase_auth_admin
--

CREATE SEQUENCE auth.refresh_tokens_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE auth.refresh_tokens_id_seq OWNER TO supabase_auth_admin;

--
-- Name: refresh_tokens_id_seq; Type: SEQUENCE OWNED BY; Schema: auth; Owner: supabase_auth_admin
--

ALTER SEQUENCE auth.refresh_tokens_id_seq OWNED BY auth.refresh_tokens.id;


--
-- Name: saml_providers; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.saml_providers (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    entity_id text NOT NULL,
    metadata_xml text NOT NULL,
    metadata_url text,
    attribute_mapping jsonb,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    name_id_format text,
    CONSTRAINT "entity_id not empty" CHECK ((char_length(entity_id) > 0)),
    CONSTRAINT "metadata_url not empty" CHECK (((metadata_url = NULL::text) OR (char_length(metadata_url) > 0))),
    CONSTRAINT "metadata_xml not empty" CHECK ((char_length(metadata_xml) > 0))
);


ALTER TABLE auth.saml_providers OWNER TO supabase_auth_admin;

--
-- Name: TABLE saml_providers; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.saml_providers IS 'Auth: Manages SAML Identity Provider connections.';


--
-- Name: saml_relay_states; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.saml_relay_states (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    request_id text NOT NULL,
    for_email text,
    redirect_to text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    flow_state_id uuid,
    CONSTRAINT "request_id not empty" CHECK ((char_length(request_id) > 0))
);


ALTER TABLE auth.saml_relay_states OWNER TO supabase_auth_admin;

--
-- Name: TABLE saml_relay_states; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.saml_relay_states IS 'Auth: Contains SAML Relay State information for each Service Provider initiated login.';


--
-- Name: schema_migrations; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.schema_migrations (
    version character varying(255) NOT NULL
);


ALTER TABLE auth.schema_migrations OWNER TO supabase_auth_admin;

--
-- Name: TABLE schema_migrations; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.schema_migrations IS 'Auth: Manages updates to the auth system.';


--
-- Name: sessions; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sessions (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    factor_id uuid,
    aal auth.aal_level,
    not_after timestamp with time zone,
    refreshed_at timestamp without time zone,
    user_agent text,
    ip inet,
    tag text
);


ALTER TABLE auth.sessions OWNER TO supabase_auth_admin;

--
-- Name: TABLE sessions; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sessions IS 'Auth: Stores session data associated to a user.';


--
-- Name: COLUMN sessions.not_after; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.sessions.not_after IS 'Auth: Not after is a nullable column that contains a timestamp after which the session should be regarded as expired.';


--
-- Name: sso_domains; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sso_domains (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    domain text NOT NULL,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    CONSTRAINT "domain not empty" CHECK ((char_length(domain) > 0))
);


ALTER TABLE auth.sso_domains OWNER TO supabase_auth_admin;

--
-- Name: TABLE sso_domains; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sso_domains IS 'Auth: Manages SSO email address domain mapping to an SSO Identity Provider.';


--
-- Name: sso_providers; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sso_providers (
    id uuid NOT NULL,
    resource_id text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    CONSTRAINT "resource_id not empty" CHECK (((resource_id = NULL::text) OR (char_length(resource_id) > 0)))
);


ALTER TABLE auth.sso_providers OWNER TO supabase_auth_admin;

--
-- Name: TABLE sso_providers; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sso_providers IS 'Auth: Manages SSO identity provider information; see saml_providers for SAML.';


--
-- Name: COLUMN sso_providers.resource_id; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.sso_providers.resource_id IS 'Auth: Uniquely identifies a SSO provider according to a user-chosen resource ID (case insensitive), useful in infrastructure as code.';


--
-- Name: users; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.users (
    instance_id uuid,
    id uuid NOT NULL,
    aud character varying(255),
    role character varying(255),
    email character varying(255),
    encrypted_password character varying(255),
    email_confirmed_at timestamp with time zone,
    invited_at timestamp with time zone,
    confirmation_token character varying(255),
    confirmation_sent_at timestamp with time zone,
    recovery_token character varying(255),
    recovery_sent_at timestamp with time zone,
    email_change_token_new character varying(255),
    email_change character varying(255),
    email_change_sent_at timestamp with time zone,
    last_sign_in_at timestamp with time zone,
    raw_app_meta_data jsonb,
    raw_user_meta_data jsonb,
    is_super_admin boolean,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    phone text DEFAULT NULL::character varying,
    phone_confirmed_at timestamp with time zone,
    phone_change text DEFAULT ''::character varying,
    phone_change_token character varying(255) DEFAULT ''::character varying,
    phone_change_sent_at timestamp with time zone,
    confirmed_at timestamp with time zone GENERATED ALWAYS AS (LEAST(email_confirmed_at, phone_confirmed_at)) STORED,
    email_change_token_current character varying(255) DEFAULT ''::character varying,
    email_change_confirm_status smallint DEFAULT 0,
    banned_until timestamp with time zone,
    reauthentication_token character varying(255) DEFAULT ''::character varying,
    reauthentication_sent_at timestamp with time zone,
    is_sso_user boolean DEFAULT false NOT NULL,
    deleted_at timestamp with time zone,
    is_anonymous boolean DEFAULT false NOT NULL,
    CONSTRAINT users_email_change_confirm_status_check CHECK (((email_change_confirm_status >= 0) AND (email_change_confirm_status <= 2)))
);


ALTER TABLE auth.users OWNER TO supabase_auth_admin;

--
-- Name: TABLE users; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.users IS 'Auth: Stores user login data within a secure schema.';


--
-- Name: COLUMN users.is_sso_user; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.users.is_sso_user IS 'Auth: Set this column to true when the account comes from SSO. These accounts can have duplicate emails.';


--
-- Name: cohost_conversations; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.cohost_conversations (
    id integer NOT NULL,
    user_id uuid NOT NULL,
    chats json
);


ALTER TABLE public.cohost_conversations OWNER TO postgres;

--
-- Name: cohost_conversations_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.cohost_conversations_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.cohost_conversations_id_seq OWNER TO postgres;

--
-- Name: cohost_conversations_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.cohost_conversations_id_seq OWNED BY public.cohost_conversations.id;


--
-- Name: emails; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.emails (
    id integer NOT NULL,
    email character varying(255)
);


ALTER TABLE public.emails OWNER TO postgres;

--
-- Name: emails_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.emails_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.emails_id_seq OWNER TO postgres;

--
-- Name: emails_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.emails_id_seq OWNED BY public.emails.id;


--
-- Name: listings; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.listings (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid,
    data jsonb DEFAULT '{}'::jsonb,
    url text NOT NULL,
    "time" timestamp without time zone DEFAULT now()
);


ALTER TABLE public.listings OWNER TO postgres;

--
-- Name: stripe_sessions; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.stripe_sessions (
    id integer NOT NULL,
    user_id uuid,
    plan character varying(8),
    session_id character varying(255),
    customer_id character varying(255),
    subscription_id character varying(255),
    is_verified boolean
);


ALTER TABLE public.stripe_sessions OWNER TO postgres;

--
-- Name: stripe_sessions_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.stripe_sessions_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.stripe_sessions_id_seq OWNER TO postgres;

--
-- Name: stripe_sessions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.stripe_sessions_id_seq OWNED BY public.stripe_sessions.id;


--
-- Name: messages; Type: TABLE; Schema: realtime; Owner: supabase_realtime_admin
--

CREATE TABLE realtime.messages (
    topic text NOT NULL,
    extension text NOT NULL,
    payload jsonb,
    event text,
    private boolean DEFAULT false,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    inserted_at timestamp without time zone DEFAULT now() NOT NULL,
    id uuid DEFAULT gen_random_uuid() NOT NULL
)
PARTITION BY RANGE (inserted_at);


ALTER TABLE realtime.messages OWNER TO supabase_realtime_admin;

--
-- Name: schema_migrations; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.schema_migrations (
    version bigint NOT NULL,
    inserted_at timestamp(0) without time zone
);


ALTER TABLE realtime.schema_migrations OWNER TO supabase_admin;

--
-- Name: subscription; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.subscription (
    id bigint NOT NULL,
    subscription_id uuid NOT NULL,
    entity regclass NOT NULL,
    filters realtime.user_defined_filter[] DEFAULT '{}'::realtime.user_defined_filter[] NOT NULL,
    claims jsonb NOT NULL,
    claims_role regrole GENERATED ALWAYS AS (realtime.to_regrole((claims ->> 'role'::text))) STORED NOT NULL,
    created_at timestamp without time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);


ALTER TABLE realtime.subscription OWNER TO supabase_admin;

--
-- Name: subscription_id_seq; Type: SEQUENCE; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE realtime.subscription ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME realtime.subscription_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: buckets; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.buckets (
    id text NOT NULL,
    name text NOT NULL,
    owner uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    public boolean DEFAULT false,
    avif_autodetection boolean DEFAULT false,
    file_size_limit bigint,
    allowed_mime_types text[],
    owner_id text
);


ALTER TABLE storage.buckets OWNER TO supabase_storage_admin;

--
-- Name: COLUMN buckets.owner; Type: COMMENT; Schema: storage; Owner: supabase_storage_admin
--

COMMENT ON COLUMN storage.buckets.owner IS 'Field is deprecated, use owner_id instead';


--
-- Name: migrations; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.migrations (
    id integer NOT NULL,
    name character varying(100) NOT NULL,
    hash character varying(40) NOT NULL,
    executed_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE storage.migrations OWNER TO supabase_storage_admin;

--
-- Name: objects; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.objects (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    bucket_id text,
    name text,
    owner uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    last_accessed_at timestamp with time zone DEFAULT now(),
    metadata jsonb,
    path_tokens text[] GENERATED ALWAYS AS (string_to_array(name, '/'::text)) STORED,
    version text,
    owner_id text,
    user_metadata jsonb,
    level integer
);


ALTER TABLE storage.objects OWNER TO supabase_storage_admin;

--
-- Name: COLUMN objects.owner; Type: COMMENT; Schema: storage; Owner: supabase_storage_admin
--

COMMENT ON COLUMN storage.objects.owner IS 'Field is deprecated, use owner_id instead';


--
-- Name: prefixes; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.prefixes (
    bucket_id text NOT NULL,
    name text NOT NULL COLLATE pg_catalog."C",
    level integer GENERATED ALWAYS AS (storage.get_level(name)) STORED NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE storage.prefixes OWNER TO supabase_storage_admin;

--
-- Name: s3_multipart_uploads; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.s3_multipart_uploads (
    id text NOT NULL,
    in_progress_size bigint DEFAULT 0 NOT NULL,
    upload_signature text NOT NULL,
    bucket_id text NOT NULL,
    key text NOT NULL COLLATE pg_catalog."C",
    version text NOT NULL,
    owner_id text,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    user_metadata jsonb
);


ALTER TABLE storage.s3_multipart_uploads OWNER TO supabase_storage_admin;

--
-- Name: s3_multipart_uploads_parts; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.s3_multipart_uploads_parts (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    upload_id text NOT NULL,
    size bigint DEFAULT 0 NOT NULL,
    part_number integer NOT NULL,
    bucket_id text NOT NULL,
    key text NOT NULL COLLATE pg_catalog."C",
    etag text NOT NULL,
    owner_id text,
    version text NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE storage.s3_multipart_uploads_parts OWNER TO supabase_storage_admin;

--
-- Name: decrypted_secrets; Type: VIEW; Schema: vault; Owner: supabase_admin
--

CREATE VIEW vault.decrypted_secrets AS
 SELECT secrets.id,
    secrets.name,
    secrets.description,
    secrets.secret,
        CASE
            WHEN (secrets.secret IS NULL) THEN NULL::text
            ELSE
            CASE
                WHEN (secrets.key_id IS NULL) THEN NULL::text
                ELSE convert_from(pgsodium.crypto_aead_det_decrypt(decode(secrets.secret, 'base64'::text), convert_to(((((secrets.id)::text || secrets.description) || (secrets.created_at)::text) || (secrets.updated_at)::text), 'utf8'::name), secrets.key_id, secrets.nonce), 'utf8'::name)
            END
        END AS decrypted_secret,
    secrets.key_id,
    secrets.nonce,
    secrets.created_at,
    secrets.updated_at
   FROM vault.secrets;


ALTER TABLE vault.decrypted_secrets OWNER TO supabase_admin;

--
-- Name: refresh_tokens id; Type: DEFAULT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens ALTER COLUMN id SET DEFAULT nextval('auth.refresh_tokens_id_seq'::regclass);


--
-- Name: cohost_conversations id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cohost_conversations ALTER COLUMN id SET DEFAULT nextval('public.cohost_conversations_id_seq'::regclass);


--
-- Name: emails id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.emails ALTER COLUMN id SET DEFAULT nextval('public.emails_id_seq'::regclass);


--
-- Name: stripe_sessions id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stripe_sessions ALTER COLUMN id SET DEFAULT nextval('public.stripe_sessions_id_seq'::regclass);


--
-- Data for Name: audit_log_entries; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.audit_log_entries (instance_id, id, payload, created_at, ip_address) FROM stdin;
00000000-0000-0000-0000-000000000000	8a31a4f6-e8a4-4a29-9474-78a4acea6ac6	{"action":"user_confirmation_requested","actor_id":"f17cfd2b-5f65-4143-bfd4-bd1d38c13280","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-01-24 03:38:10.284423+00	
00000000-0000-0000-0000-000000000000	8fe8bfc9-b276-4106-8f35-27f3a0261819	{"action":"user_signedup","actor_id":"f17cfd2b-5f65-4143-bfd4-bd1d38c13280","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"team"}	2025-01-24 03:38:22.998707+00	
00000000-0000-0000-0000-000000000000	fc91fb44-6c64-4c6b-9771-d327dbb07af6	{"action":"login","actor_id":"f17cfd2b-5f65-4143-bfd4-bd1d38c13280","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"account","traits":{"provider_type":"email"}}	2025-01-24 03:38:37.704426+00	
00000000-0000-0000-0000-000000000000	98c5db68-87cd-4d3a-89d1-25162b410716	{"action":"user_recovery_requested","actor_id":"f17cfd2b-5f65-4143-bfd4-bd1d38c13280","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"user"}	2025-01-24 03:45:19.884094+00	
00000000-0000-0000-0000-000000000000	7ac39cbd-6280-408d-877f-008a97f378c0	{"action":"login","actor_id":"f17cfd2b-5f65-4143-bfd4-bd1d38c13280","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"account"}	2025-01-24 03:45:34.280344+00	
00000000-0000-0000-0000-000000000000	c8256e06-0abe-4898-9c8f-915fc73aad09	{"action":"login","actor_id":"f17cfd2b-5f65-4143-bfd4-bd1d38c13280","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"account","traits":{"provider_type":"magiclink"}}	2025-01-24 03:45:38.681044+00	
00000000-0000-0000-0000-000000000000	9657f82a-2d09-422f-b858-28829b9de21b	{"action":"user_recovery_requested","actor_id":"f17cfd2b-5f65-4143-bfd4-bd1d38c13280","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"user"}	2025-01-24 04:02:35.517171+00	
00000000-0000-0000-0000-000000000000	4e6abb59-d961-446c-b2a1-6712c527caab	{"action":"login","actor_id":"f17cfd2b-5f65-4143-bfd4-bd1d38c13280","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"account"}	2025-01-24 04:02:53.283293+00	
00000000-0000-0000-0000-000000000000	8d9177cd-f727-45a7-8818-2a2444ad7b19	{"action":"login","actor_id":"f17cfd2b-5f65-4143-bfd4-bd1d38c13280","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"account","traits":{"provider_type":"magiclink"}}	2025-01-24 04:02:53.705221+00	
00000000-0000-0000-0000-000000000000	7c733b15-8c7e-4e2f-8c50-f2c7cf7742a5	{"action":"user_recovery_requested","actor_id":"f17cfd2b-5f65-4143-bfd4-bd1d38c13280","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"user"}	2025-01-24 13:51:59.31461+00	
00000000-0000-0000-0000-000000000000	ebd09361-78e8-4fcf-a13b-fdb5e6cb4b13	{"action":"login","actor_id":"f17cfd2b-5f65-4143-bfd4-bd1d38c13280","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"account"}	2025-01-24 13:52:10.015159+00	
00000000-0000-0000-0000-000000000000	e1e5a51a-ae2d-4927-a64e-0fe16729bea0	{"action":"login","actor_id":"f17cfd2b-5f65-4143-bfd4-bd1d38c13280","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"account","traits":{"provider_type":"magiclink"}}	2025-01-24 13:52:11.007501+00	
00000000-0000-0000-0000-000000000000	af22a037-9f95-41cc-8e7c-d8e4f7430067	{"action":"user_repeated_signup","actor_id":"f17cfd2b-5f65-4143-bfd4-bd1d38c13280","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-01-24 19:26:29.243306+00	
00000000-0000-0000-0000-000000000000	93f63e5f-004f-4ebc-9571-6bd968dbd521	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"ari@arithefirst.com","user_id":"f17cfd2b-5f65-4143-bfd4-bd1d38c13280","user_phone":""}}	2025-01-24 19:27:54.907498+00	
00000000-0000-0000-0000-000000000000	21d647c5-e974-4038-b617-4a3ccc3c9fbb	{"action":"user_confirmation_requested","actor_id":"66ddac5e-bc52-4963-9e11-f0d938c920f4","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-01-24 19:28:09.582186+00	
00000000-0000-0000-0000-000000000000	5247120a-54d1-4841-b8ae-7e90d4564f44	{"action":"user_confirmation_requested","actor_id":"66ddac5e-bc52-4963-9e11-f0d938c920f4","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-01-24 20:02:28.104668+00	
00000000-0000-0000-0000-000000000000	8f671258-3869-489f-bd85-5d6a01773783	{"action":"user_signedup","actor_id":"66ddac5e-bc52-4963-9e11-f0d938c920f4","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"team"}	2025-01-24 20:02:38.134427+00	
00000000-0000-0000-0000-000000000000	28543863-22dd-4efd-9557-326c1f5ce471	{"action":"login","actor_id":"66ddac5e-bc52-4963-9e11-f0d938c920f4","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"account","traits":{"provider_type":"email"}}	2025-01-24 20:02:38.90451+00	
00000000-0000-0000-0000-000000000000	a07ebe76-2101-480b-acd9-694a1c6fb749	{"action":"login","actor_id":"66ddac5e-bc52-4963-9e11-f0d938c920f4","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-01-24 20:03:02.626821+00	
00000000-0000-0000-0000-000000000000	af7d01e8-dac2-4c05-8791-761e3e5b6857	{"action":"user_confirmation_requested","actor_id":"1be84c60-ce80-4243-b54f-56b7078389c5","actor_username":"adrian.aryeh@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-01-31 15:22:41.180241+00	
00000000-0000-0000-0000-000000000000	42384eb1-13b7-4fd5-b05e-53a459e4574f	{"action":"user_signedup","actor_id":"1be84c60-ce80-4243-b54f-56b7078389c5","actor_username":"adrian.aryeh@gmail.com","actor_via_sso":false,"log_type":"team"}	2025-01-31 15:22:50.051083+00	
00000000-0000-0000-0000-000000000000	a8b11f57-bb2e-4303-88e2-d047f96e9865	{"action":"login","actor_id":"1be84c60-ce80-4243-b54f-56b7078389c5","actor_username":"adrian.aryeh@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider_type":"email"}}	2025-01-31 15:22:53.531791+00	
00000000-0000-0000-0000-000000000000	2e8f2310-f702-4e7f-992e-24df5a8871a9	{"action":"login","actor_id":"1be84c60-ce80-4243-b54f-56b7078389c5","actor_username":"adrian.aryeh@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-01-31 15:23:02.409837+00	
00000000-0000-0000-0000-000000000000	de104a25-ae81-4421-b707-cb43cbe8f095	{"action":"token_refreshed","actor_id":"1be84c60-ce80-4243-b54f-56b7078389c5","actor_username":"adrian.aryeh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-03 18:55:48.899024+00	
00000000-0000-0000-0000-000000000000	278cab61-df3f-4e67-ae82-122ac20aeaac	{"action":"token_revoked","actor_id":"1be84c60-ce80-4243-b54f-56b7078389c5","actor_username":"adrian.aryeh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-03 18:55:48.918511+00	
00000000-0000-0000-0000-000000000000	636a95b0-9e25-448a-a3c9-6b6dc980f074	{"action":"login","actor_id":"1be84c60-ce80-4243-b54f-56b7078389c5","actor_username":"adrian.aryeh@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-02-04 14:53:48.968954+00	
00000000-0000-0000-0000-000000000000	7bb088f0-c71f-4a03-b077-29f3948c4448	{"action":"token_refreshed","actor_id":"1be84c60-ce80-4243-b54f-56b7078389c5","actor_username":"adrian.aryeh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-04 16:17:05.961526+00	
00000000-0000-0000-0000-000000000000	f4bbecbf-b564-450a-bdad-5d9426cb888e	{"action":"token_revoked","actor_id":"1be84c60-ce80-4243-b54f-56b7078389c5","actor_username":"adrian.aryeh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-04 16:17:05.962566+00	
00000000-0000-0000-0000-000000000000	8a0e4f29-16a7-4826-8fa4-dbc2c920b0f9	{"action":"login","actor_id":"66ddac5e-bc52-4963-9e11-f0d938c920f4","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-02-04 17:13:16.491305+00	
00000000-0000-0000-0000-000000000000	62cba443-3b2c-44a0-a503-dfd01a7b6d11	{"action":"user_confirmation_requested","actor_id":"a4a8b29c-6144-4352-8360-3b41bdd72816","actor_username":"testing@arithefirst.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-02-04 17:14:16.020261+00	
00000000-0000-0000-0000-000000000000	3c34348a-f483-4476-8d84-8a98e36e44a1	{"action":"user_signedup","actor_id":"a4a8b29c-6144-4352-8360-3b41bdd72816","actor_username":"testing@arithefirst.com","actor_via_sso":false,"log_type":"team"}	2025-02-04 17:14:32.838548+00	
00000000-0000-0000-0000-000000000000	9d35bf09-c93a-48e1-b8ff-ab91ac537d8b	{"action":"login","actor_id":"a4a8b29c-6144-4352-8360-3b41bdd72816","actor_username":"testing@arithefirst.com","actor_via_sso":false,"log_type":"account","traits":{"provider_type":"email"}}	2025-02-04 17:14:33.922227+00	
00000000-0000-0000-0000-000000000000	427b7827-66d3-4499-812e-cce4a99b3358	{"action":"login","actor_id":"a4a8b29c-6144-4352-8360-3b41bdd72816","actor_username":"testing@arithefirst.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-02-04 17:14:42.699721+00	
00000000-0000-0000-0000-000000000000	5e4fef1f-042f-4c13-b005-f7f8486f9256	{"action":"login","actor_id":"66ddac5e-bc52-4963-9e11-f0d938c920f4","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-02-04 17:58:27.383826+00	
00000000-0000-0000-0000-000000000000	41ca08b0-9c32-4a31-9f4f-2f06c23edc6b	{"action":"login","actor_id":"66ddac5e-bc52-4963-9e11-f0d938c920f4","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-02-04 18:11:14.982433+00	
00000000-0000-0000-0000-000000000000	fdb541d8-4451-4bc3-ac2c-6e83a14144ab	{"action":"login","actor_id":"66ddac5e-bc52-4963-9e11-f0d938c920f4","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-02-04 19:15:59.737594+00	
00000000-0000-0000-0000-000000000000	f7b0904a-4e8b-4a33-aff5-ebf6dd5b8bfe	{"action":"token_refreshed","actor_id":"66ddac5e-bc52-4963-9e11-f0d938c920f4","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"token"}	2025-02-04 20:31:42.39358+00	
00000000-0000-0000-0000-000000000000	6fb2685f-d164-4c8d-a2c0-c81e8b76be5f	{"action":"token_revoked","actor_id":"66ddac5e-bc52-4963-9e11-f0d938c920f4","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"token"}	2025-02-04 20:31:42.395434+00	
00000000-0000-0000-0000-000000000000	dc1ff0fe-5764-4bc6-91ee-84e76bf7ba4c	{"action":"login","actor_id":"66ddac5e-bc52-4963-9e11-f0d938c920f4","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-02-04 21:06:55.448688+00	
00000000-0000-0000-0000-000000000000	154eefbc-0711-4dcb-b3af-6dd1a6baed30	{"action":"logout","actor_id":"66ddac5e-bc52-4963-9e11-f0d938c920f4","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"account"}	2025-02-04 21:41:28.549948+00	
00000000-0000-0000-0000-000000000000	f3c60e18-0621-4f51-bf59-3f2eb47414b7	{"action":"login","actor_id":"66ddac5e-bc52-4963-9e11-f0d938c920f4","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-02-04 21:42:00.902285+00	
00000000-0000-0000-0000-000000000000	ace9e8ba-4a5c-4964-96cf-29b1ea85f95f	{"action":"logout","actor_id":"66ddac5e-bc52-4963-9e11-f0d938c920f4","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"account"}	2025-02-04 21:49:55.084732+00	
00000000-0000-0000-0000-000000000000	142803e0-fc3e-4150-aa1b-2e9d72517e08	{"action":"login","actor_id":"66ddac5e-bc52-4963-9e11-f0d938c920f4","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-02-04 21:51:32.732303+00	
00000000-0000-0000-0000-000000000000	eedff3e4-dc9c-4c97-bf2c-f2e59b4ab9ba	{"action":"logout","actor_id":"66ddac5e-bc52-4963-9e11-f0d938c920f4","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"account"}	2025-02-04 21:51:36.08445+00	
00000000-0000-0000-0000-000000000000	a21b4a10-f36a-45f7-92b0-040bd8a2b669	{"action":"login","actor_id":"66ddac5e-bc52-4963-9e11-f0d938c920f4","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-02-04 21:52:20.635049+00	
00000000-0000-0000-0000-000000000000	96ec2068-bba7-4f56-9170-18a71cddd79d	{"action":"logout","actor_id":"66ddac5e-bc52-4963-9e11-f0d938c920f4","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"account"}	2025-02-04 21:52:23.721747+00	
00000000-0000-0000-0000-000000000000	221b600b-8d96-47a3-8904-566948cf8e93	{"action":"login","actor_id":"66ddac5e-bc52-4963-9e11-f0d938c920f4","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-02-04 21:55:07.018472+00	
00000000-0000-0000-0000-000000000000	abafc1eb-b307-476c-bb82-b2be742f04d5	{"action":"logout","actor_id":"66ddac5e-bc52-4963-9e11-f0d938c920f4","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"account"}	2025-02-04 22:10:36.604976+00	
00000000-0000-0000-0000-000000000000	72b270e7-6fd8-4967-85dd-b433c42777d6	{"action":"token_refreshed","actor_id":"1be84c60-ce80-4243-b54f-56b7078389c5","actor_username":"adrian.aryeh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-05 02:23:16.129379+00	
00000000-0000-0000-0000-000000000000	10f6065d-1b62-4810-a6e1-92dbae0aa40d	{"action":"token_revoked","actor_id":"1be84c60-ce80-4243-b54f-56b7078389c5","actor_username":"adrian.aryeh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-05 02:23:16.131365+00	
00000000-0000-0000-0000-000000000000	212789e9-dbe4-417e-89f0-0f217a968db0	{"action":"login","actor_id":"66ddac5e-bc52-4963-9e11-f0d938c920f4","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-02-05 02:33:05.580226+00	
00000000-0000-0000-0000-000000000000	7120e5e9-0585-4aa1-9e18-9ae1507e100d	{"action":"logout","actor_id":"66ddac5e-bc52-4963-9e11-f0d938c920f4","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"account"}	2025-02-05 02:33:18.88379+00	
00000000-0000-0000-0000-000000000000	6410f241-de73-42e3-9dbb-16bc0e48e28a	{"action":"login","actor_id":"66ddac5e-bc52-4963-9e11-f0d938c920f4","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-02-05 13:29:22.715015+00	
00000000-0000-0000-0000-000000000000	819d4776-d523-4b35-81bf-6310f2d4f112	{"action":"logout","actor_id":"66ddac5e-bc52-4963-9e11-f0d938c920f4","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"account"}	2025-02-05 13:38:28.707323+00	
00000000-0000-0000-0000-000000000000	598ad1d6-a170-49d8-9905-4a62968b8751	{"action":"login","actor_id":"66ddac5e-bc52-4963-9e11-f0d938c920f4","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-02-05 13:40:27.571047+00	
00000000-0000-0000-0000-000000000000	09ac375f-df30-425b-9b81-0a2082e01af3	{"action":"token_refreshed","actor_id":"66ddac5e-bc52-4963-9e11-f0d938c920f4","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"token"}	2025-02-05 15:58:09.557751+00	
00000000-0000-0000-0000-000000000000	b2de8f63-3185-4754-ac52-a53eeee0fd05	{"action":"token_revoked","actor_id":"66ddac5e-bc52-4963-9e11-f0d938c920f4","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"token"}	2025-02-05 15:58:09.571115+00	
00000000-0000-0000-0000-000000000000	7a21c469-f3dc-4875-b139-33e14891377b	{"action":"token_refreshed","actor_id":"66ddac5e-bc52-4963-9e11-f0d938c920f4","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"token"}	2025-02-05 15:58:09.619405+00	
00000000-0000-0000-0000-000000000000	936d187f-1779-4104-b4ec-fa192a0a9492	{"action":"token_refreshed","actor_id":"66ddac5e-bc52-4963-9e11-f0d938c920f4","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"token"}	2025-02-05 17:11:11.205217+00	
00000000-0000-0000-0000-000000000000	a2f6ace1-4d20-491a-9808-4302e01ea2a9	{"action":"token_revoked","actor_id":"66ddac5e-bc52-4963-9e11-f0d938c920f4","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"token"}	2025-02-05 17:11:11.210499+00	
00000000-0000-0000-0000-000000000000	a03a3067-cb14-4ca8-9526-2cf2d1052fb3	{"action":"token_refreshed","actor_id":"66ddac5e-bc52-4963-9e11-f0d938c920f4","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"token"}	2025-02-05 17:11:23.630979+00	
00000000-0000-0000-0000-000000000000	3e9a5391-61d3-4cf1-ab0c-5e28cc021dbf	{"action":"login","actor_id":"66ddac5e-bc52-4963-9e11-f0d938c920f4","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-02-05 17:32:11.718455+00	
00000000-0000-0000-0000-000000000000	02cd2752-5efe-484f-93c4-b3ee71697bf8	{"action":"login","actor_id":"66ddac5e-bc52-4963-9e11-f0d938c920f4","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-02-05 17:32:50.14728+00	
00000000-0000-0000-0000-000000000000	4241ca10-2cfc-4563-a9ea-5dfd7d18b06e	{"action":"login","actor_id":"66ddac5e-bc52-4963-9e11-f0d938c920f4","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-02-05 17:33:19.237943+00	
00000000-0000-0000-0000-000000000000	e0081949-84d9-4bfc-9584-38c17aee064b	{"action":"user_repeated_signup","actor_id":"66ddac5e-bc52-4963-9e11-f0d938c920f4","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-02-05 18:07:50.037832+00	
00000000-0000-0000-0000-000000000000	83b05c79-77ba-4653-9ef8-f179d61720b3	{"action":"user_confirmation_requested","actor_id":"12171891-246d-4630-8215-d628807f8654","actor_username":"newaccount@arithefirst.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-02-05 18:08:33.256008+00	
00000000-0000-0000-0000-000000000000	25ca1eb4-e866-45e1-a404-8e1621c9c915	{"action":"user_signedup","actor_id":"12171891-246d-4630-8215-d628807f8654","actor_username":"newaccount@arithefirst.com","actor_via_sso":false,"log_type":"team"}	2025-02-05 18:08:41.380092+00	
00000000-0000-0000-0000-000000000000	17d898b3-d430-45d6-81ab-71134859faf5	{"action":"login","actor_id":"12171891-246d-4630-8215-d628807f8654","actor_username":"newaccount@arithefirst.com","actor_via_sso":false,"log_type":"account","traits":{"provider_type":"email"}}	2025-02-05 18:08:42.137186+00	
00000000-0000-0000-0000-000000000000	d666a586-0c85-4a57-8616-3e1b0f6f07fb	{"action":"login","actor_id":"12171891-246d-4630-8215-d628807f8654","actor_username":"newaccount@arithefirst.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-02-05 18:08:48.440121+00	
00000000-0000-0000-0000-000000000000	291d6631-8808-4053-8f13-bdae86495983	{"action":"login","actor_id":"1be84c60-ce80-4243-b54f-56b7078389c5","actor_username":"adrian.aryeh@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-02-10 18:57:14.697271+00	
00000000-0000-0000-0000-000000000000	a1e49650-88f7-4116-9efb-3d6e748abab2	{"action":"token_refreshed","actor_id":"1be84c60-ce80-4243-b54f-56b7078389c5","actor_username":"adrian.aryeh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-10 19:06:08.941432+00	
00000000-0000-0000-0000-000000000000	e1f371f9-df70-4059-b647-e87f60922d76	{"action":"token_revoked","actor_id":"1be84c60-ce80-4243-b54f-56b7078389c5","actor_username":"adrian.aryeh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-10 19:06:08.944377+00	
00000000-0000-0000-0000-000000000000	b8ced66d-958c-4d18-a9b2-20954e79ed05	{"action":"token_refreshed","actor_id":"1be84c60-ce80-4243-b54f-56b7078389c5","actor_username":"adrian.aryeh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-10 19:55:20.22744+00	
00000000-0000-0000-0000-000000000000	42bb4bcf-10c2-4089-b160-59834c507056	{"action":"token_revoked","actor_id":"1be84c60-ce80-4243-b54f-56b7078389c5","actor_username":"adrian.aryeh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-10 19:55:20.228945+00	
00000000-0000-0000-0000-000000000000	0add613e-8246-4e88-87b2-e8413732cf87	{"action":"token_refreshed","actor_id":"1be84c60-ce80-4243-b54f-56b7078389c5","actor_username":"adrian.aryeh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-10 20:14:16.942517+00	
00000000-0000-0000-0000-000000000000	5c328a77-7619-40d9-aee4-dd714ccdf915	{"action":"token_revoked","actor_id":"1be84c60-ce80-4243-b54f-56b7078389c5","actor_username":"adrian.aryeh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-10 20:14:16.943426+00	
00000000-0000-0000-0000-000000000000	e4ffd849-7fbb-4762-8b6e-cfb99146f5df	{"action":"token_refreshed","actor_id":"1be84c60-ce80-4243-b54f-56b7078389c5","actor_username":"adrian.aryeh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-10 20:53:41.430522+00	
00000000-0000-0000-0000-000000000000	a096561f-e1fd-4b4c-86aa-e25f344f5f56	{"action":"token_revoked","actor_id":"1be84c60-ce80-4243-b54f-56b7078389c5","actor_username":"adrian.aryeh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-10 20:53:41.436012+00	
00000000-0000-0000-0000-000000000000	f2f4a673-f089-425b-b7cd-cf6037da94a2	{"action":"user_confirmation_requested","actor_id":"75fa2b2b-89d4-43a9-a3f3-33913fca6524","actor_username":"platinumplus999@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-02-10 21:02:41.268368+00	
00000000-0000-0000-0000-000000000000	2b0ef2f4-fd18-4dbc-920e-ad590e5bccb5	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"platinumplus999@gmail.com","user_id":"75fa2b2b-89d4-43a9-a3f3-33913fca6524","user_phone":""}}	2025-02-10 21:04:46.704101+00	
00000000-0000-0000-0000-000000000000	182bfeec-e35d-4a9c-a0a8-27235c0b9cb2	{"action":"user_confirmation_requested","actor_id":"eecf27d9-7ad7-4694-84b5-c52ac01f662f","actor_username":"platinumplus999@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-02-10 21:04:55.196052+00	
00000000-0000-0000-0000-000000000000	7a5f8a2d-c778-4b9c-b7fc-640c8330fbd6	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"platinumplus999@gmail.com","user_id":"eecf27d9-7ad7-4694-84b5-c52ac01f662f","user_phone":""}}	2025-02-10 21:06:52.92279+00	
00000000-0000-0000-0000-000000000000	7e0dded6-0289-49d1-b25a-6d8168c06c19	{"action":"user_confirmation_requested","actor_id":"1406567c-aaaa-44b1-8d1e-bf80358e17d8","actor_username":"platinumplus999@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-02-10 21:06:59.971083+00	
00000000-0000-0000-0000-000000000000	b11f6276-d9d1-4890-82ed-91f5a1476349	{"action":"token_refreshed","actor_id":"1be84c60-ce80-4243-b54f-56b7078389c5","actor_username":"adrian.aryeh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-10 21:41:23.743738+00	
00000000-0000-0000-0000-000000000000	21a78daa-2399-41b4-b4aa-0cf808acbd8b	{"action":"token_revoked","actor_id":"1be84c60-ce80-4243-b54f-56b7078389c5","actor_username":"adrian.aryeh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-10 21:41:23.746072+00	
00000000-0000-0000-0000-000000000000	5f4089e4-3f5a-4151-b95e-75d05376013a	{"action":"token_refreshed","actor_id":"1be84c60-ce80-4243-b54f-56b7078389c5","actor_username":"adrian.aryeh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-10 21:55:00.899133+00	
00000000-0000-0000-0000-000000000000	6eaf9f48-1ede-4e5d-bf7c-a74541f80782	{"action":"token_refreshed","actor_id":"1be84c60-ce80-4243-b54f-56b7078389c5","actor_username":"adrian.aryeh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-10 21:55:01.135888+00	
00000000-0000-0000-0000-000000000000	c31cbfbc-4948-4685-9402-5c019987cea5	{"action":"logout","actor_id":"1be84c60-ce80-4243-b54f-56b7078389c5","actor_username":"adrian.aryeh@gmail.com","actor_via_sso":false,"log_type":"account"}	2025-02-10 21:55:22.658251+00	
00000000-0000-0000-0000-000000000000	04883117-2eef-4e55-ae19-c0c597e6ea1a	{"action":"user_confirmation_requested","actor_id":"32fe9209-3831-4d9f-9f53-b5617d863a2f","actor_username":"justinebanks580@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-02-10 21:56:02.149085+00	
00000000-0000-0000-0000-000000000000	b474f193-cd0b-4a43-84ff-f2b813fb1ed1	{"action":"user_confirmation_requested","actor_id":"7234fc96-83d5-4676-ad86-c6fba921b1ae","actor_username":"hk12eqawsdas@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-02-10 21:57:43.834347+00	
00000000-0000-0000-0000-000000000000	734d340c-ce1e-466a-819c-41e7e577e559	{"action":"user_confirmation_requested","actor_id":"0e089fc7-cc77-4529-8a0e-28c2f9231de2","actor_username":"jj2guys@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-02-10 21:58:08.987036+00	
00000000-0000-0000-0000-000000000000	e79dbdb3-36ee-4951-be9f-c875bd2a635c	{"action":"user_confirmation_requested","actor_id":"32fe9209-3831-4d9f-9f53-b5617d863a2f","actor_username":"justinebanks580@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-02-10 21:59:11.782546+00	
00000000-0000-0000-0000-000000000000	885f9a29-09a4-45b8-97d9-d2fb63c51413	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"jj2guys@gmail.com","user_id":"0e089fc7-cc77-4529-8a0e-28c2f9231de2","user_phone":""}}	2025-02-10 21:59:39.483225+00	
00000000-0000-0000-0000-000000000000	9637e541-2b35-4d6c-ba7f-37e0d6a9c932	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"hk12eqawsdas@gmail.com","user_id":"7234fc96-83d5-4676-ad86-c6fba921b1ae","user_phone":""}}	2025-02-10 21:59:39.490696+00	
00000000-0000-0000-0000-000000000000	23e55a2c-6477-4cb6-955c-686e835c1cb5	{"action":"login","actor_id":"1be84c60-ce80-4243-b54f-56b7078389c5","actor_username":"adrian.aryeh@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-02-10 22:00:00.392311+00	
00000000-0000-0000-0000-000000000000	acdca93d-1a77-446e-a55e-9ff1b68634cb	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"platinumplus999@gmail.com","user_id":"1406567c-aaaa-44b1-8d1e-bf80358e17d8","user_phone":""}}	2025-02-10 22:00:21.48088+00	
00000000-0000-0000-0000-000000000000	c895418e-ed22-4154-aa6c-4f2741cd4b70	{"action":"logout","actor_id":"1be84c60-ce80-4243-b54f-56b7078389c5","actor_username":"adrian.aryeh@gmail.com","actor_via_sso":false,"log_type":"account"}	2025-02-10 22:00:35.199146+00	
00000000-0000-0000-0000-000000000000	bbeb6c6b-d066-41a6-81e9-7092b061312a	{"action":"user_confirmation_requested","actor_id":"c12daa5a-cc49-46cf-8eca-0f717d7f1a4d","actor_username":"platinumplus999@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-02-10 22:00:44.960949+00	
00000000-0000-0000-0000-000000000000	1d7e9847-0d7f-4912-a535-36faa464c707	{"action":"login","actor_id":"1be84c60-ce80-4243-b54f-56b7078389c5","actor_username":"adrian.aryeh@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-02-10 22:03:37.411182+00	
00000000-0000-0000-0000-000000000000	a55e1687-72f7-4c3a-a005-0a8871c422cc	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"justinebanks580@gmail.com","user_id":"32fe9209-3831-4d9f-9f53-b5617d863a2f","user_phone":""}}	2025-02-10 22:06:36.39989+00	
00000000-0000-0000-0000-000000000000	c87f2c99-54e7-4a19-8ff2-2498a3b7daa4	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"platinumplus999@gmail.com","user_id":"c12daa5a-cc49-46cf-8eca-0f717d7f1a4d","user_phone":""}}	2025-02-10 22:06:36.414714+00	
00000000-0000-0000-0000-000000000000	f7a84f66-5835-4bc5-b6b9-5dafecdb4258	{"action":"logout","actor_id":"1be84c60-ce80-4243-b54f-56b7078389c5","actor_username":"adrian.aryeh@gmail.com","actor_via_sso":false,"log_type":"account"}	2025-02-10 22:06:45.694102+00	
00000000-0000-0000-0000-000000000000	a4705817-2e98-4092-9cc6-fe467cd64f30	{"action":"user_confirmation_requested","actor_id":"f09afae3-6681-43dd-a48d-118947a6caeb","actor_username":"platinumplus999@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-02-10 22:06:59.847696+00	
00000000-0000-0000-0000-000000000000	da9f5572-e820-49a9-8c92-7bb6ba66dbe3	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"platinumplus999@gmail.com","user_id":"f09afae3-6681-43dd-a48d-118947a6caeb","user_phone":""}}	2025-02-10 22:08:35.112677+00	
00000000-0000-0000-0000-000000000000	83865ace-96e3-437b-bded-106ad1b7df2d	{"action":"user_confirmation_requested","actor_id":"0d1955bc-f3f9-4460-be33-d9a1d176f91d","actor_username":"platinumplus999@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-02-10 22:09:05.412475+00	
00000000-0000-0000-0000-000000000000	60a067ef-9473-46a4-ab42-e69f71e3b242	{"action":"user_signedup","actor_id":"0d1955bc-f3f9-4460-be33-d9a1d176f91d","actor_username":"platinumplus999@gmail.com","actor_via_sso":false,"log_type":"team"}	2025-02-10 22:09:24.196244+00	
00000000-0000-0000-0000-000000000000	bfa959e8-c285-4360-b3f7-1380d1fc0726	{"action":"login","actor_id":"0d1955bc-f3f9-4460-be33-d9a1d176f91d","actor_username":"platinumplus999@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider_type":"email"}}	2025-02-10 22:09:24.751395+00	
00000000-0000-0000-0000-000000000000	546de136-6f5c-4f20-a252-09a6f767c9f5	{"action":"login","actor_id":"0d1955bc-f3f9-4460-be33-d9a1d176f91d","actor_username":"platinumplus999@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-02-10 22:09:35.819975+00	
00000000-0000-0000-0000-000000000000	ddf96700-c87a-4c5c-b9fb-adaa747afafd	{"action":"user_confirmation_requested","actor_id":"ef817874-a92d-4c10-beeb-c6180d14621b","actor_username":"justinebanks580@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-02-10 22:15:14.965769+00	
00000000-0000-0000-0000-000000000000	eb720eba-ea2d-4c5f-8f8a-6e8e749c00c1	{"action":"user_signedup","actor_id":"ef817874-a92d-4c10-beeb-c6180d14621b","actor_username":"justinebanks580@gmail.com","actor_via_sso":false,"log_type":"team"}	2025-02-10 22:25:45.232452+00	
00000000-0000-0000-0000-000000000000	4afe8c69-6e2c-4582-b399-e2d40cbb9957	{"action":"login","actor_id":"ef817874-a92d-4c10-beeb-c6180d14621b","actor_username":"justinebanks580@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-02-10 22:26:21.44056+00	
00000000-0000-0000-0000-000000000000	f3b30878-873d-473a-ba8a-ad0175e21d26	{"action":"token_refreshed","actor_id":"ef817874-a92d-4c10-beeb-c6180d14621b","actor_username":"justinebanks580@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-10 23:47:39.360727+00	
00000000-0000-0000-0000-000000000000	e6393f57-cf6d-4996-ac83-ff6ea876f4f1	{"action":"token_revoked","actor_id":"ef817874-a92d-4c10-beeb-c6180d14621b","actor_username":"justinebanks580@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-10 23:47:39.364919+00	
00000000-0000-0000-0000-000000000000	3c693a0e-36be-4a26-8efb-5fab7752bf86	{"action":"token_refreshed","actor_id":"ef817874-a92d-4c10-beeb-c6180d14621b","actor_username":"justinebanks580@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-14 12:50:02.963891+00	
00000000-0000-0000-0000-000000000000	ffafac86-3951-4186-8580-4ebaf65eaf0b	{"action":"token_revoked","actor_id":"ef817874-a92d-4c10-beeb-c6180d14621b","actor_username":"justinebanks580@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-14 12:50:02.985176+00	
00000000-0000-0000-0000-000000000000	e6e82df7-5d56-48bf-8b79-5546527fee8e	{"action":"token_refreshed","actor_id":"ef817874-a92d-4c10-beeb-c6180d14621b","actor_username":"justinebanks580@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-14 16:04:31.936727+00	
00000000-0000-0000-0000-000000000000	d0f92066-639d-416b-89bf-6708a77f9396	{"action":"token_revoked","actor_id":"ef817874-a92d-4c10-beeb-c6180d14621b","actor_username":"justinebanks580@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-14 16:04:31.943143+00	
00000000-0000-0000-0000-000000000000	3d7622e1-dec5-4d8f-9f84-1e1a52010055	{"action":"token_refreshed","actor_id":"ef817874-a92d-4c10-beeb-c6180d14621b","actor_username":"justinebanks580@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-14 18:04:51.80506+00	
00000000-0000-0000-0000-000000000000	a41482ac-7a12-479e-aa83-74a48c611119	{"action":"token_revoked","actor_id":"ef817874-a92d-4c10-beeb-c6180d14621b","actor_username":"justinebanks580@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-14 18:04:51.808904+00	
00000000-0000-0000-0000-000000000000	9f6ccbab-09b4-487c-b5b8-a0285f52230c	{"action":"login","actor_id":"66ddac5e-bc52-4963-9e11-f0d938c920f4","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-02-14 22:37:51.590002+00	
00000000-0000-0000-0000-000000000000	83adf49e-4a91-44c8-af72-bff30573fa15	{"action":"token_refreshed","actor_id":"0d1955bc-f3f9-4460-be33-d9a1d176f91d","actor_username":"platinumplus999@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-17 23:48:29.031192+00	
00000000-0000-0000-0000-000000000000	af98df1e-482a-4d26-bb0c-c4df9bdb0399	{"action":"token_revoked","actor_id":"0d1955bc-f3f9-4460-be33-d9a1d176f91d","actor_username":"platinumplus999@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-17 23:48:29.058576+00	
00000000-0000-0000-0000-000000000000	8815c09c-2028-47dc-b5e3-f93a4cf01643	{"action":"token_refreshed","actor_id":"0d1955bc-f3f9-4460-be33-d9a1d176f91d","actor_username":"platinumplus999@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-18 00:58:23.497099+00	
00000000-0000-0000-0000-000000000000	1ca8ae65-b8ae-4ad9-bf5c-351883bb64ec	{"action":"token_revoked","actor_id":"0d1955bc-f3f9-4460-be33-d9a1d176f91d","actor_username":"platinumplus999@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-18 00:58:23.504585+00	
00000000-0000-0000-0000-000000000000	3aaea814-228b-4e3b-a0c1-03b96208a79b	{"action":"token_refreshed","actor_id":"0d1955bc-f3f9-4460-be33-d9a1d176f91d","actor_username":"platinumplus999@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-18 00:58:23.558704+00	
00000000-0000-0000-0000-000000000000	c57144ec-2064-4c5c-b25b-9aa8a6c3a268	{"action":"login","actor_id":"66ddac5e-bc52-4963-9e11-f0d938c920f4","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-02-18 01:58:06.467118+00	
00000000-0000-0000-0000-000000000000	14e7bcd8-cd6c-4bb2-a79c-8e9b703162b6	{"action":"token_refreshed","actor_id":"0d1955bc-f3f9-4460-be33-d9a1d176f91d","actor_username":"platinumplus999@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-18 01:58:33.867384+00	
00000000-0000-0000-0000-000000000000	8a27ba67-2313-4be4-b6ad-1d8aabf6e162	{"action":"token_revoked","actor_id":"0d1955bc-f3f9-4460-be33-d9a1d176f91d","actor_username":"platinumplus999@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-18 01:58:33.868087+00	
00000000-0000-0000-0000-000000000000	42179de4-954a-460c-b6d1-9a81770ad065	{"action":"login","actor_id":"0d1955bc-f3f9-4460-be33-d9a1d176f91d","actor_username":"platinumplus999@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-02-18 02:58:22.817342+00	
00000000-0000-0000-0000-000000000000	215bdd06-3ed0-499d-9222-f9a9b4b3c6f3	{"action":"login","actor_id":"0d1955bc-f3f9-4460-be33-d9a1d176f91d","actor_username":"platinumplus999@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-02-18 03:03:43.712345+00	
00000000-0000-0000-0000-000000000000	7e0b2f5e-7ae7-440e-9397-2b5f855f09c1	{"action":"token_refreshed","actor_id":"66ddac5e-bc52-4963-9e11-f0d938c920f4","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"token"}	2025-02-21 21:08:20.396575+00	
00000000-0000-0000-0000-000000000000	eb659f9f-5bad-4371-9c6a-6e6ee04db6db	{"action":"token_revoked","actor_id":"66ddac5e-bc52-4963-9e11-f0d938c920f4","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"token"}	2025-02-21 21:08:20.429919+00	
00000000-0000-0000-0000-000000000000	5aa84a0f-27b3-4049-8322-08a2c5975808	{"action":"token_refreshed","actor_id":"66ddac5e-bc52-4963-9e11-f0d938c920f4","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"token"}	2025-02-21 22:08:33.189213+00	
00000000-0000-0000-0000-000000000000	1d863258-7189-4705-b5e2-7cb4ad98f915	{"action":"token_revoked","actor_id":"66ddac5e-bc52-4963-9e11-f0d938c920f4","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"token"}	2025-02-21 22:08:33.193247+00	
00000000-0000-0000-0000-000000000000	bfc24df1-c237-42b2-a835-66e1ed92e7d0	{"action":"token_refreshed","actor_id":"ef817874-a92d-4c10-beeb-c6180d14621b","actor_username":"justinebanks580@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-23 14:09:55.337804+00	
00000000-0000-0000-0000-000000000000	a449396c-e16f-49fb-abd5-bcbc203b67d3	{"action":"token_revoked","actor_id":"ef817874-a92d-4c10-beeb-c6180d14621b","actor_username":"justinebanks580@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-23 14:09:55.356692+00	
00000000-0000-0000-0000-000000000000	02137fed-b0b9-40d9-ab58-cf6cb98d4f20	{"action":"token_refreshed","actor_id":"ef817874-a92d-4c10-beeb-c6180d14621b","actor_username":"justinebanks580@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-23 15:22:14.242701+00	
00000000-0000-0000-0000-000000000000	241f8b0f-f488-46b3-9db4-bc3de9ea9234	{"action":"token_revoked","actor_id":"ef817874-a92d-4c10-beeb-c6180d14621b","actor_username":"justinebanks580@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-23 15:22:14.244837+00	
00000000-0000-0000-0000-000000000000	2367e39a-6309-48d7-901e-c3af6188017e	{"action":"token_refreshed","actor_id":"ef817874-a92d-4c10-beeb-c6180d14621b","actor_username":"justinebanks580@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-23 20:18:46.849306+00	
00000000-0000-0000-0000-000000000000	72ac163e-ea91-4e98-83c9-45587abb37fb	{"action":"token_revoked","actor_id":"ef817874-a92d-4c10-beeb-c6180d14621b","actor_username":"justinebanks580@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-23 20:18:46.85268+00	
00000000-0000-0000-0000-000000000000	fa77cdaa-1984-4191-b623-00bff5d798b9	{"action":"token_refreshed","actor_id":"ef817874-a92d-4c10-beeb-c6180d14621b","actor_username":"justinebanks580@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-23 21:19:30.844744+00	
00000000-0000-0000-0000-000000000000	4073b51f-367c-4473-8414-f40dc029cb0c	{"action":"token_revoked","actor_id":"ef817874-a92d-4c10-beeb-c6180d14621b","actor_username":"justinebanks580@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-23 21:19:30.846509+00	
00000000-0000-0000-0000-000000000000	261cc0b1-2ec2-46db-9dd1-d56f3f577cb2	{"action":"token_refreshed","actor_id":"ef817874-a92d-4c10-beeb-c6180d14621b","actor_username":"justinebanks580@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-24 14:25:08.576216+00	
00000000-0000-0000-0000-000000000000	973ab9c3-f83b-40c4-90f3-faf85fc9a84a	{"action":"token_revoked","actor_id":"ef817874-a92d-4c10-beeb-c6180d14621b","actor_username":"justinebanks580@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-24 14:25:08.592165+00	
00000000-0000-0000-0000-000000000000	3780fc63-ede4-4788-b38c-db0b1155105d	{"action":"token_refreshed","actor_id":"ef817874-a92d-4c10-beeb-c6180d14621b","actor_username":"justinebanks580@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-24 18:11:02.298303+00	
00000000-0000-0000-0000-000000000000	6e702c88-67fa-47f9-a042-af7a3bc14372	{"action":"token_revoked","actor_id":"ef817874-a92d-4c10-beeb-c6180d14621b","actor_username":"justinebanks580@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-24 18:11:02.300573+00	
00000000-0000-0000-0000-000000000000	d85e259a-464b-4e16-bad3-3144e930445b	{"action":"token_refreshed","actor_id":"ef817874-a92d-4c10-beeb-c6180d14621b","actor_username":"justinebanks580@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-24 19:17:12.67471+00	
00000000-0000-0000-0000-000000000000	64f7cf59-fe2a-4daa-a3a3-4d5d3da31b53	{"action":"token_revoked","actor_id":"ef817874-a92d-4c10-beeb-c6180d14621b","actor_username":"justinebanks580@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-24 19:17:12.676602+00	
00000000-0000-0000-0000-000000000000	120163de-2c07-431b-af7d-e3b2f5b30c2c	{"action":"login","actor_id":"1be84c60-ce80-4243-b54f-56b7078389c5","actor_username":"adrian.aryeh@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-02-24 19:20:08.754093+00	
00000000-0000-0000-0000-000000000000	884c1ee0-c989-4014-b8c8-3433381993bb	{"action":"user_confirmation_requested","actor_id":"18d19b49-bb99-4581-90c6-28e7ff16ff3f","actor_username":"aaryeh27@palmertrinity.org","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-02-24 19:20:23.15471+00	
00000000-0000-0000-0000-000000000000	65173f46-7ea6-4c4f-b151-d997ec03cdee	{"action":"user_signedup","actor_id":"18d19b49-bb99-4581-90c6-28e7ff16ff3f","actor_username":"aaryeh27@palmertrinity.org","actor_via_sso":false,"log_type":"team"}	2025-02-24 19:20:30.345316+00	
00000000-0000-0000-0000-000000000000	361014b4-9ddf-4cb1-802c-04d8aaaba1a2	{"action":"token_refreshed","actor_id":"ef817874-a92d-4c10-beeb-c6180d14621b","actor_username":"justinebanks580@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-24 22:51:07.673098+00	
00000000-0000-0000-0000-000000000000	1ef9b50a-ae77-475b-ad18-06ee647d27dd	{"action":"token_revoked","actor_id":"ef817874-a92d-4c10-beeb-c6180d14621b","actor_username":"justinebanks580@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-24 22:51:07.677626+00	
00000000-0000-0000-0000-000000000000	2afd8c6d-b1d1-4b97-8ed7-2920b713e160	{"action":"token_refreshed","actor_id":"ef817874-a92d-4c10-beeb-c6180d14621b","actor_username":"justinebanks580@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-25 00:36:28.224438+00	
00000000-0000-0000-0000-000000000000	03dc31ef-14b7-4e79-a491-690a913dd67f	{"action":"token_revoked","actor_id":"ef817874-a92d-4c10-beeb-c6180d14621b","actor_username":"justinebanks580@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-25 00:36:28.226788+00	
00000000-0000-0000-0000-000000000000	73368e6b-43d7-49b3-a842-8c2cf371a7c3	{"action":"token_refreshed","actor_id":"ef817874-a92d-4c10-beeb-c6180d14621b","actor_username":"justinebanks580@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-26 23:55:14.795265+00	
00000000-0000-0000-0000-000000000000	756e0be8-3b12-47ce-84e3-c56aa8482aa2	{"action":"token_revoked","actor_id":"ef817874-a92d-4c10-beeb-c6180d14621b","actor_username":"justinebanks580@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-02-26 23:55:14.828458+00	
00000000-0000-0000-0000-000000000000	a0518006-c155-41bb-9e14-92e69a42d639	{"action":"user_repeated_signup","actor_id":"ef817874-a92d-4c10-beeb-c6180d14621b","actor_username":"justinebanks580@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-03-05 01:58:52.171596+00	
00000000-0000-0000-0000-000000000000	9649cb81-41c0-4650-b250-8f1e24d2f875	{"action":"user_confirmation_requested","actor_id":"d1849754-b996-46c0-8274-09f6ed44fda4","actor_username":"juebanks27@palmertrinity.org","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-03-05 02:00:40.672326+00	
00000000-0000-0000-0000-000000000000	f63c85b5-6db2-4163-9bbd-590bae4e45c4	{"action":"user_signedup","actor_id":"d1849754-b996-46c0-8274-09f6ed44fda4","actor_username":"juebanks27@palmertrinity.org","actor_via_sso":false,"log_type":"team"}	2025-03-05 02:00:50.141823+00	
00000000-0000-0000-0000-000000000000	03b58d41-955f-46e8-8ef7-27f013da9598	{"action":"login","actor_id":"d1849754-b996-46c0-8274-09f6ed44fda4","actor_username":"juebanks27@palmertrinity.org","actor_via_sso":false,"log_type":"account","traits":{"provider_type":"email"}}	2025-03-05 02:00:52.720112+00	
00000000-0000-0000-0000-000000000000	e6e9d0d3-e407-4d10-b8a4-81916e8290ac	{"action":"login","actor_id":"d1849754-b996-46c0-8274-09f6ed44fda4","actor_username":"juebanks27@palmertrinity.org","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-03-05 02:01:12.059991+00	
00000000-0000-0000-0000-000000000000	2b2b2b80-bc86-4e6f-a6f3-05a2cc3519a2	{"action":"token_refreshed","actor_id":"0d1955bc-f3f9-4460-be33-d9a1d176f91d","actor_username":"platinumplus999@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-03-08 16:35:42.627104+00	
00000000-0000-0000-0000-000000000000	581900a6-68e7-4f41-b694-7a5f1abbf541	{"action":"token_revoked","actor_id":"0d1955bc-f3f9-4460-be33-d9a1d176f91d","actor_username":"platinumplus999@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-03-08 16:35:42.650926+00	
00000000-0000-0000-0000-000000000000	f3649f24-071c-4a55-816c-5ee1046b6b60	{"action":"token_refreshed","actor_id":"0d1955bc-f3f9-4460-be33-d9a1d176f91d","actor_username":"platinumplus999@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-03-08 16:36:38.823262+00	
00000000-0000-0000-0000-000000000000	c68d08d9-324c-4fe3-b4c8-84ae5850270a	{"action":"token_refreshed","actor_id":"0d1955bc-f3f9-4460-be33-d9a1d176f91d","actor_username":"platinumplus999@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-03-08 22:08:55.059619+00	
00000000-0000-0000-0000-000000000000	3752bc7f-1487-4746-9b54-b66bd1b2247a	{"action":"token_revoked","actor_id":"0d1955bc-f3f9-4460-be33-d9a1d176f91d","actor_username":"platinumplus999@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-03-08 22:08:55.068217+00	
00000000-0000-0000-0000-000000000000	7eabd5bf-34a4-4328-a358-5b5fc936a017	{"action":"token_refreshed","actor_id":"0d1955bc-f3f9-4460-be33-d9a1d176f91d","actor_username":"platinumplus999@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-03-08 23:33:46.215254+00	
00000000-0000-0000-0000-000000000000	c3324846-07a6-428d-a6d7-52ab5408f933	{"action":"token_revoked","actor_id":"0d1955bc-f3f9-4460-be33-d9a1d176f91d","actor_username":"platinumplus999@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-03-08 23:33:46.221246+00	
00000000-0000-0000-0000-000000000000	86f1e767-faab-4adb-a4f8-edebcab05c02	{"action":"token_refreshed","actor_id":"0d1955bc-f3f9-4460-be33-d9a1d176f91d","actor_username":"platinumplus999@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-03-09 00:32:57.55416+00	
00000000-0000-0000-0000-000000000000	ab8682cd-feef-4b5f-9269-781d7a261da3	{"action":"token_revoked","actor_id":"0d1955bc-f3f9-4460-be33-d9a1d176f91d","actor_username":"platinumplus999@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-03-09 00:32:57.557644+00	
00000000-0000-0000-0000-000000000000	6bd6c61a-a42c-45ba-8bc3-1812cd949d08	{"action":"login","actor_id":"66ddac5e-bc52-4963-9e11-f0d938c920f4","actor_username":"ari@arithefirst.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-03-10 01:45:54.983029+00	
00000000-0000-0000-0000-000000000000	1dc49c51-6a4e-4477-9010-7895b709ba86	{"action":"token_refreshed","actor_id":"d1849754-b996-46c0-8274-09f6ed44fda4","actor_username":"juebanks27@palmertrinity.org","actor_via_sso":false,"log_type":"token"}	2025-03-27 13:40:56.597293+00	
00000000-0000-0000-0000-000000000000	eaa66fb2-cfc8-4cb7-b7d5-d2b34a4e581b	{"action":"token_revoked","actor_id":"d1849754-b996-46c0-8274-09f6ed44fda4","actor_username":"juebanks27@palmertrinity.org","actor_via_sso":false,"log_type":"token"}	2025-03-27 13:40:56.612536+00	
00000000-0000-0000-0000-000000000000	070545bd-1811-4dca-a9d8-bd6b0d84d7b0	{"action":"token_refreshed","actor_id":"ef817874-a92d-4c10-beeb-c6180d14621b","actor_username":"justinebanks580@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-03-27 13:44:56.664688+00	
00000000-0000-0000-0000-000000000000	2d84860a-74d3-4159-b7c5-417645fcc090	{"action":"token_revoked","actor_id":"ef817874-a92d-4c10-beeb-c6180d14621b","actor_username":"justinebanks580@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-03-27 13:44:56.667369+00	
00000000-0000-0000-0000-000000000000	bfd118c6-b1c4-4241-84e4-3908e1ff713c	{"action":"token_refreshed","actor_id":"ef817874-a92d-4c10-beeb-c6180d14621b","actor_username":"justinebanks580@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-03-27 14:58:51.730182+00	
00000000-0000-0000-0000-000000000000	2f5afbcb-1a88-4aeb-8d08-7a34172a0d71	{"action":"token_revoked","actor_id":"ef817874-a92d-4c10-beeb-c6180d14621b","actor_username":"justinebanks580@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-03-27 14:58:51.733917+00	
00000000-0000-0000-0000-000000000000	65f85b31-026c-4123-acd3-9ab4b71a8134	{"action":"token_refreshed","actor_id":"ef817874-a92d-4c10-beeb-c6180d14621b","actor_username":"justinebanks580@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-03-28 17:24:07.227271+00	
00000000-0000-0000-0000-000000000000	6c499ea9-ccf0-43cc-8a5e-384c1444a6d5	{"action":"token_revoked","actor_id":"ef817874-a92d-4c10-beeb-c6180d14621b","actor_username":"justinebanks580@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-03-28 17:24:07.260989+00	
00000000-0000-0000-0000-000000000000	a2aee261-a1fd-4f5c-88bc-809416a6282a	{"action":"token_refreshed","actor_id":"ef817874-a92d-4c10-beeb-c6180d14621b","actor_username":"justinebanks580@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-03-30 12:45:11.767504+00	
00000000-0000-0000-0000-000000000000	69a9492a-ede2-413c-8c8d-c1e826d542a0	{"action":"token_revoked","actor_id":"ef817874-a92d-4c10-beeb-c6180d14621b","actor_username":"justinebanks580@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-03-30 12:45:11.785007+00	
00000000-0000-0000-0000-000000000000	0a1a56c1-67a0-4f23-8d39-83e1e21066b9	{"action":"token_refreshed","actor_id":"d1849754-b996-46c0-8274-09f6ed44fda4","actor_username":"juebanks27@palmertrinity.org","actor_via_sso":false,"log_type":"token"}	2025-04-08 12:22:34.978521+00	
00000000-0000-0000-0000-000000000000	96732e43-3570-4d21-b9df-53c4839c9546	{"action":"token_revoked","actor_id":"d1849754-b996-46c0-8274-09f6ed44fda4","actor_username":"juebanks27@palmertrinity.org","actor_via_sso":false,"log_type":"token"}	2025-04-08 12:22:35.003969+00	
00000000-0000-0000-0000-000000000000	1592739e-cf45-47f5-b427-b60faccb9c6d	{"action":"login","actor_id":"d1849754-b996-46c0-8274-09f6ed44fda4","actor_username":"juebanks27@palmertrinity.org","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-04-13 23:11:55.926575+00	
00000000-0000-0000-0000-000000000000	1dd26d32-b18d-4ea1-a701-2708e9b84b77	{"action":"token_refreshed","actor_id":"1be84c60-ce80-4243-b54f-56b7078389c5","actor_username":"adrian.aryeh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-14 17:11:10.443616+00	
00000000-0000-0000-0000-000000000000	d774ade0-565e-44c8-8fe6-a917e859cf0d	{"action":"token_revoked","actor_id":"1be84c60-ce80-4243-b54f-56b7078389c5","actor_username":"adrian.aryeh@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-14 17:11:10.468072+00	
00000000-0000-0000-0000-000000000000	3c7c1a01-5dc3-43ab-a3ff-e71ddaeec17c	{"action":"login","actor_id":"0d1955bc-f3f9-4460-be33-d9a1d176f91d","actor_username":"platinumplus999@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-04-20 22:04:21.990232+00	
00000000-0000-0000-0000-000000000000	bb355750-c63e-4286-bda8-d6219b05fc6c	{"action":"token_refreshed","actor_id":"0d1955bc-f3f9-4460-be33-d9a1d176f91d","actor_username":"platinumplus999@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-20 23:30:37.459014+00	
00000000-0000-0000-0000-000000000000	b6c751ea-3342-4488-8c8e-3da4c60cf372	{"action":"token_revoked","actor_id":"0d1955bc-f3f9-4460-be33-d9a1d176f91d","actor_username":"platinumplus999@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-20 23:30:37.463507+00	
00000000-0000-0000-0000-000000000000	b37387e5-51e8-41f7-ae89-82c139f33a14	{"action":"token_refreshed","actor_id":"0d1955bc-f3f9-4460-be33-d9a1d176f91d","actor_username":"platinumplus999@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-21 00:29:50.876715+00	
00000000-0000-0000-0000-000000000000	303073ce-1832-4ed1-878b-4caf865371d5	{"action":"token_revoked","actor_id":"0d1955bc-f3f9-4460-be33-d9a1d176f91d","actor_username":"platinumplus999@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-04-21 00:29:50.879554+00	
\.


--
-- Data for Name: flow_state; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.flow_state (id, user_id, auth_code, code_challenge_method, code_challenge, provider_type, provider_access_token, provider_refresh_token, created_at, updated_at, authentication_method, auth_code_issued_at) FROM stdin;
af2dd10d-6f72-4434-a0fc-056510001f60	f17cfd2b-5f65-4143-bfd4-bd1d38c13280	eed88105-ee24-4b54-a671-fea2fa1c26a4	s256	wczIpej10ONLTQBJ4nLsKKzmcZDkZaewrgZLyGeGvFc	magiclink			2025-01-24 04:03:16.500331+00	2025-01-24 04:03:16.500331+00	magiclink	\N
ca867705-c776-498d-be07-723b65c15515	66ddac5e-bc52-4963-9e11-f0d938c920f4	b86943af-8b9b-466d-913c-629a81eb1981	s256	BKuZDfBCQEbAaqoxYTxgxlANU129xC_YVp84yUfI_Wg	email			2025-01-24 19:28:09.582784+00	2025-01-24 19:28:09.582784+00	email/signup	\N
b0d2ef1c-90a6-4d78-b1c9-b955933fc64b	75fa2b2b-89d4-43a9-a3f3-33913fca6524	95bb136a-79ee-479c-ab96-a8218ad849cf	s256	Lb6SVrrAjmGXX_IFY6nfwdQTtJR7LXu5A4nggYlepnw	email			2025-02-10 21:02:41.269745+00	2025-02-10 21:02:41.269745+00	email/signup	\N
620f87ba-3d3c-4f91-853b-16bff81f9070	eecf27d9-7ad7-4694-84b5-c52ac01f662f	8e663a60-63d2-4d32-ab29-4e95d470b69d	s256	0z5o6xJ4ZsKBZw9cVqub-TQKWTHl6Dv4yTsWGcNtmvA	email			2025-02-10 21:04:55.196718+00	2025-02-10 21:04:55.196718+00	email/signup	\N
be29407f-d9a8-40ab-8563-3f0e5551c52d	1406567c-aaaa-44b1-8d1e-bf80358e17d8	d4a63c6b-9fc4-4f05-85cb-4e351bfacc80	s256	neDfoMx6bnr8uZthxaRYH2q1Bmu2XSVKECz06iMBVdo	email			2025-02-10 21:06:59.971615+00	2025-02-10 21:06:59.971615+00	email/signup	\N
06d7b755-3763-4404-bf8f-c5d90ddd1b2c	32fe9209-3831-4d9f-9f53-b5617d863a2f	d480b267-ae75-49eb-b7b8-5521eefe1174	s256	PwVm4Mzm6Hpg5z_rx2TwG76qu-LVBZSEQOrTUn9ZVKc	email			2025-02-10 21:56:02.149634+00	2025-02-10 21:56:02.149634+00	email/signup	\N
cd6a7e21-77e7-4aa1-95b3-1dbfe930b22f	7234fc96-83d5-4676-ad86-c6fba921b1ae	00293588-bc68-4c92-8406-888492860b8e	s256	R8BPhj_glScvTqZkPJsxvgW-LzD_YaCGkzGZH0XKmqk	email			2025-02-10 21:57:43.83671+00	2025-02-10 21:57:43.83671+00	email/signup	\N
1a840358-85c7-4223-bb7e-18e4ecb9f6eb	0e089fc7-cc77-4529-8a0e-28c2f9231de2	ba99c15f-1245-4c37-8e3c-30efca3461dd	s256	55ZidFQPQ_33c0U88kVaSapkr35m8ukb0bBovi3e8RI	email			2025-02-10 21:58:08.989008+00	2025-02-10 21:58:08.989008+00	email/signup	\N
d06a67f5-e521-4f59-98c8-3d2d251f48eb	32fe9209-3831-4d9f-9f53-b5617d863a2f	0620bdf7-a4d2-4858-9bca-c3d724d253db	s256	fy9JveRsf0PDIDw5hKwUAfaC-YmW1gtrs8gIIzroAUI	email			2025-02-10 21:59:11.783238+00	2025-02-10 21:59:11.783238+00	email/signup	\N
7a9d6837-d374-46f3-ac56-b6dd59168fe5	c12daa5a-cc49-46cf-8eca-0f717d7f1a4d	3bfb308c-6ba0-4391-9ac1-13d8e9b27aac	s256	55_375sFkkCqVmzlxVpxBNRjIvQKGKEy_bGY0SdstOE	email			2025-02-10 22:00:44.962511+00	2025-02-10 22:00:44.962511+00	email/signup	\N
cb5515be-05bc-455b-a3a5-9307637a1815	f09afae3-6681-43dd-a48d-118947a6caeb	b114f57a-1ef6-4364-af2b-81b138441854	s256	1f7tyrHzdILQjFL_o1oxpUbCQ_VxNuZMo0XLzFEdwjk	email			2025-02-10 22:06:59.848296+00	2025-02-10 22:06:59.848296+00	email/signup	\N
4c462dd8-fa45-4661-af72-d0baa63e98a8	ef817874-a92d-4c10-beeb-c6180d14621b	c771f599-3f54-46f3-9054-2834f227bf4d	s256	0ED_of4EG6H8yhyp--CLBSLx-_-Cb-MKPLV4KJ4JruE	email			2025-02-10 22:15:14.96704+00	2025-02-10 22:25:45.246214+00	email/signup	2025-02-10 22:25:45.246175+00
7faa8b5d-db74-4fdb-8ae1-3dd1f7b006db	18d19b49-bb99-4581-90c6-28e7ff16ff3f	800007c3-b6e6-4b54-94b9-c483ec0c6bbd	s256	WFv8RWWCU8-2RTRpusyHKFED3FAZOjA99WjHUrfTxpU	email			2025-02-24 19:20:23.156708+00	2025-02-24 19:20:30.364225+00	email/signup	2025-02-24 19:20:30.364179+00
\.


--
-- Data for Name: identities; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.identities (provider_id, user_id, identity_data, provider, last_sign_in_at, created_at, updated_at, id) FROM stdin;
d1849754-b996-46c0-8274-09f6ed44fda4	d1849754-b996-46c0-8274-09f6ed44fda4	{"sub": "d1849754-b996-46c0-8274-09f6ed44fda4", "email": "juebanks27@palmertrinity.org", "email_verified": true, "phone_verified": false}	email	2025-03-05 02:00:40.663223+00	2025-03-05 02:00:40.663288+00	2025-03-05 02:00:40.663288+00	5a00729a-3dce-4296-b071-d0c653ed642e
66ddac5e-bc52-4963-9e11-f0d938c920f4	66ddac5e-bc52-4963-9e11-f0d938c920f4	{"sub": "66ddac5e-bc52-4963-9e11-f0d938c920f4", "email": "ari@arithefirst.com", "email_verified": true, "phone_verified": false}	email	2025-01-24 19:28:09.575841+00	2025-01-24 19:28:09.575893+00	2025-01-24 19:28:09.575893+00	98d40f66-cef5-45d2-a7dc-b9ce3d1df9fd
1be84c60-ce80-4243-b54f-56b7078389c5	1be84c60-ce80-4243-b54f-56b7078389c5	{"sub": "1be84c60-ce80-4243-b54f-56b7078389c5", "email": "adrian.aryeh@gmail.com", "email_verified": true, "phone_verified": false}	email	2025-01-31 15:22:41.172963+00	2025-01-31 15:22:41.173019+00	2025-01-31 15:22:41.173019+00	b1750b20-c944-4aa6-a728-378ef829869f
a4a8b29c-6144-4352-8360-3b41bdd72816	a4a8b29c-6144-4352-8360-3b41bdd72816	{"sub": "a4a8b29c-6144-4352-8360-3b41bdd72816", "email": "testing@arithefirst.com", "email_verified": true, "phone_verified": false}	email	2025-02-04 17:14:16.011717+00	2025-02-04 17:14:16.011786+00	2025-02-04 17:14:16.011786+00	91c65ebe-9f0f-44c0-8364-c4d0a74303f3
12171891-246d-4630-8215-d628807f8654	12171891-246d-4630-8215-d628807f8654	{"sub": "12171891-246d-4630-8215-d628807f8654", "email": "newaccount@arithefirst.com", "email_verified": true, "phone_verified": false}	email	2025-02-05 18:08:33.252222+00	2025-02-05 18:08:33.252285+00	2025-02-05 18:08:33.252285+00	be906f47-281c-4ede-9e67-39fabf64aa24
0d1955bc-f3f9-4460-be33-d9a1d176f91d	0d1955bc-f3f9-4460-be33-d9a1d176f91d	{"sub": "0d1955bc-f3f9-4460-be33-d9a1d176f91d", "email": "platinumplus999@gmail.com", "email_verified": true, "phone_verified": false}	email	2025-02-10 22:09:05.410504+00	2025-02-10 22:09:05.410552+00	2025-02-10 22:09:05.410552+00	a5742cc9-9971-4a15-a58e-99a7effc45c4
ef817874-a92d-4c10-beeb-c6180d14621b	ef817874-a92d-4c10-beeb-c6180d14621b	{"sub": "ef817874-a92d-4c10-beeb-c6180d14621b", "email": "justinebanks580@gmail.com", "email_verified": true, "phone_verified": false}	email	2025-02-10 22:15:14.962323+00	2025-02-10 22:15:14.962373+00	2025-02-10 22:15:14.962373+00	cef4c401-d40f-4cd6-b104-a08381a76c69
18d19b49-bb99-4581-90c6-28e7ff16ff3f	18d19b49-bb99-4581-90c6-28e7ff16ff3f	{"sub": "18d19b49-bb99-4581-90c6-28e7ff16ff3f", "email": "aaryeh27@palmertrinity.org", "email_verified": true, "phone_verified": false}	email	2025-02-24 19:20:23.147611+00	2025-02-24 19:20:23.147678+00	2025-02-24 19:20:23.147678+00	5fa28262-26c7-419c-a86f-c260e5959415
\.


--
-- Data for Name: instances; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.instances (id, uuid, raw_base_config, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: mfa_amr_claims; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_amr_claims (session_id, created_at, updated_at, authentication_method, id) FROM stdin;
34e2f72d-138e-45e1-b3c8-1a92e50ecfe7	2025-02-04 17:14:33.927115+00	2025-02-04 17:14:33.927115+00	email/signup	701a1478-0cad-4e4e-8dac-4a25f4d2e9f2
210e4c29-73d0-4a4d-be8a-82b29dbf1d24	2025-02-04 17:14:42.702705+00	2025-02-04 17:14:42.702705+00	password	c49e90f4-30b6-4c53-9339-d1d80eb39f71
f7a252da-36eb-47b1-80d7-714a550f55dc	2025-02-05 13:40:27.577425+00	2025-02-05 13:40:27.577425+00	password	55180264-1012-4248-a3c3-18734a49dda4
c1ad26be-a503-459f-b4b8-4ca70a8a324a	2025-02-05 17:32:11.729175+00	2025-02-05 17:32:11.729175+00	password	1a45d99c-fa58-4b52-85b3-dc5b01f91116
17900bf6-ce94-4d2e-9391-c935e4c9d769	2025-02-05 17:32:50.154105+00	2025-02-05 17:32:50.154105+00	password	16c3b99a-c792-4438-a528-bc334da4aa05
649e7e12-7d88-415a-a1ab-9ac7820e325b	2025-02-05 17:33:19.241078+00	2025-02-05 17:33:19.241078+00	password	f22b147d-de77-47bb-985b-f78cdda8e69a
42580a44-693f-4767-a1f9-b5c2604a34e7	2025-02-05 18:08:42.144997+00	2025-02-05 18:08:42.144997+00	email/signup	5e6023ec-a737-4f57-a939-72af35ae9621
0e95a001-dadd-4797-8793-38de832bf427	2025-02-05 18:08:48.443232+00	2025-02-05 18:08:48.443232+00	password	84d1de94-f783-492c-aec1-cf23977b8d56
300cf0ff-2474-454d-ac98-e799dc93778c	2025-02-10 22:09:24.754812+00	2025-02-10 22:09:24.754812+00	email/signup	85d67268-3998-45c4-bd31-c2cb453c9f2b
0a01eee4-fe1d-417f-b478-7217f1f0d9e1	2025-02-10 22:09:35.82266+00	2025-02-10 22:09:35.82266+00	password	f499a8cf-aa55-4b90-b671-95607cd7f0e7
a2d03708-eea8-4cf9-91ca-0b253b8601bd	2025-02-10 22:26:21.446381+00	2025-02-10 22:26:21.446381+00	password	19571852-85f6-49b2-b32d-5384889677a5
df6da52a-731e-4a48-a851-e778e1a6a4c6	2025-02-14 22:37:51.610345+00	2025-02-14 22:37:51.610345+00	password	8d636d12-2864-4d1d-8b82-e0b652638175
b664a3b4-2ae9-4da1-9e41-e294040ff7de	2025-02-18 01:58:06.483342+00	2025-02-18 01:58:06.483342+00	password	dd99f4f0-8213-43f3-ae0e-ac5483e0b52c
656ff4f7-a2c0-4dd4-a506-9f8541f07d7d	2025-02-18 02:58:22.825925+00	2025-02-18 02:58:22.825925+00	password	9d6c4a99-d288-4221-a1f5-248435a58021
8e10bbfc-c38f-4bc7-b61d-5a43e634ffad	2025-02-18 03:03:43.718594+00	2025-02-18 03:03:43.718594+00	password	c22f0f4e-b225-4bca-a19b-f78f93932218
ea4e40d1-65e4-4184-adb3-93866bb306be	2025-02-24 19:20:08.763128+00	2025-02-24 19:20:08.763128+00	password	fe175ac8-d793-4775-b04b-ab54a3d758c4
b9899fdf-369d-42c7-917a-94d1807ed8d3	2025-03-05 02:00:52.749094+00	2025-03-05 02:00:52.749094+00	email/signup	85241a22-052f-4992-99c6-600aac515c63
34f6dd26-542f-4266-9ad9-e8d4193e93de	2025-03-05 02:01:12.066047+00	2025-03-05 02:01:12.066047+00	password	664b4480-c077-4847-94c0-a980016ac321
f2268791-f9c8-4978-a1b3-cb06f0a4b41c	2025-03-10 01:45:55.037829+00	2025-03-10 01:45:55.037829+00	password	96aafafa-db34-4f5e-9552-21f29c74835b
117840a7-8d7a-4bdf-88ad-691f958a22b4	2025-04-13 23:11:55.977154+00	2025-04-13 23:11:55.977154+00	password	4e02c8f7-5cfd-4e85-9614-68aa4da43dac
302f001f-d264-422c-904f-7b6f0eaaae83	2025-04-20 22:04:22.051544+00	2025-04-20 22:04:22.051544+00	password	43eb7d39-62b8-44bc-80b3-b67429065f3f
\.


--
-- Data for Name: mfa_challenges; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_challenges (id, factor_id, created_at, verified_at, ip_address, otp_code, web_authn_session_data) FROM stdin;
\.


--
-- Data for Name: mfa_factors; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_factors (id, user_id, friendly_name, factor_type, status, created_at, updated_at, secret, phone, last_challenged_at, web_authn_credential, web_authn_aaguid) FROM stdin;
\.


--
-- Data for Name: one_time_tokens; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.one_time_tokens (id, user_id, token_type, token_hash, relates_to, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: refresh_tokens; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.refresh_tokens (instance_id, id, token, user_id, revoked, created_at, updated_at, parent, session_id) FROM stdin;
00000000-0000-0000-0000-000000000000	61	qmTYEqNw9uxi3Tuxgp_8RA	ef817874-a92d-4c10-beeb-c6180d14621b	t	2025-02-23 20:18:46.857248+00	2025-02-23 21:19:30.847181+00	aF5eTK1RepDy_HP6AqnVfw	a2d03708-eea8-4cf9-91ca-0b253b8601bd
00000000-0000-0000-0000-000000000000	62	w2YJdR5Y3WiNYyR6wPYX4Q	ef817874-a92d-4c10-beeb-c6180d14621b	t	2025-02-23 21:19:30.847845+00	2025-02-24 14:25:08.593341+00	qmTYEqNw9uxi3Tuxgp_8RA	a2d03708-eea8-4cf9-91ca-0b253b8601bd
00000000-0000-0000-0000-000000000000	63	3AMKahVIlm3NTZGEzjUtAA	ef817874-a92d-4c10-beeb-c6180d14621b	t	2025-02-24 14:25:08.6051+00	2025-02-24 18:11:02.302223+00	w2YJdR5Y3WiNYyR6wPYX4Q	a2d03708-eea8-4cf9-91ca-0b253b8601bd
00000000-0000-0000-0000-000000000000	64	Yyy54yp6tl7IOe8MhHCwUg	ef817874-a92d-4c10-beeb-c6180d14621b	t	2025-02-24 18:11:02.303039+00	2025-02-24 19:17:12.677091+00	3AMKahVIlm3NTZGEzjUtAA	a2d03708-eea8-4cf9-91ca-0b253b8601bd
00000000-0000-0000-0000-000000000000	65	M_D7Kwxs8rE1BczOftGvOA	ef817874-a92d-4c10-beeb-c6180d14621b	t	2025-02-24 19:17:12.679303+00	2025-02-24 22:51:07.678211+00	Yyy54yp6tl7IOe8MhHCwUg	a2d03708-eea8-4cf9-91ca-0b253b8601bd
00000000-0000-0000-0000-000000000000	67	ZgLqwWGKjR9tmQu0cGkjLQ	ef817874-a92d-4c10-beeb-c6180d14621b	t	2025-02-24 22:51:07.681022+00	2025-02-25 00:36:28.22742+00	M_D7Kwxs8rE1BczOftGvOA	a2d03708-eea8-4cf9-91ca-0b253b8601bd
00000000-0000-0000-0000-000000000000	68	wnj1olnF_fzq0pNYlbAicQ	ef817874-a92d-4c10-beeb-c6180d14621b	t	2025-02-25 00:36:28.229833+00	2025-02-26 23:55:14.831017+00	ZgLqwWGKjR9tmQu0cGkjLQ	a2d03708-eea8-4cf9-91ca-0b253b8601bd
00000000-0000-0000-0000-000000000000	13	J-3RVkP6U-0spQZ7GXFDpQ	a4a8b29c-6144-4352-8360-3b41bdd72816	f	2025-02-04 17:14:33.924484+00	2025-02-04 17:14:33.924484+00	\N	34e2f72d-138e-45e1-b3c8-1a92e50ecfe7
00000000-0000-0000-0000-000000000000	14	JUBJ5974rytpnOYY0Vr7Qw	a4a8b29c-6144-4352-8360-3b41bdd72816	f	2025-02-04 17:14:42.701363+00	2025-02-04 17:14:42.701363+00	\N	210e4c29-73d0-4a4d-be8a-82b29dbf1d24
00000000-0000-0000-0000-000000000000	70	pNJTL_cWj5teS0C5k5Et0w	d1849754-b996-46c0-8274-09f6ed44fda4	f	2025-03-05 02:00:52.728519+00	2025-03-05 02:00:52.728519+00	\N	b9899fdf-369d-42c7-917a-94d1807ed8d3
00000000-0000-0000-0000-000000000000	55	bm3TlaKUevh0TaKWrdiDMA	0d1955bc-f3f9-4460-be33-d9a1d176f91d	t	2025-02-18 02:58:22.821892+00	2025-03-08 16:35:42.652686+00	\N	656ff4f7-a2c0-4dd4-a506-9f8541f07d7d
00000000-0000-0000-0000-000000000000	72	k7_KAgP0atLFQolc5ODZlg	0d1955bc-f3f9-4460-be33-d9a1d176f91d	t	2025-03-08 16:35:42.66256+00	2025-03-08 22:08:55.068887+00	bm3TlaKUevh0TaKWrdiDMA	656ff4f7-a2c0-4dd4-a506-9f8541f07d7d
00000000-0000-0000-0000-000000000000	73	D5p1-1zWrEHWgr0dFK23GQ	0d1955bc-f3f9-4460-be33-d9a1d176f91d	t	2025-03-08 22:08:55.076553+00	2025-03-08 23:33:46.221817+00	k7_KAgP0atLFQolc5ODZlg	656ff4f7-a2c0-4dd4-a506-9f8541f07d7d
00000000-0000-0000-0000-000000000000	74	iLaht4mhupCbM7Coianvzw	0d1955bc-f3f9-4460-be33-d9a1d176f91d	t	2025-03-08 23:33:46.226988+00	2025-03-09 00:32:57.558265+00	D5p1-1zWrEHWgr0dFK23GQ	656ff4f7-a2c0-4dd4-a506-9f8541f07d7d
00000000-0000-0000-0000-000000000000	75	PZ080cX5UT4cVcLUQ_FuOA	0d1955bc-f3f9-4460-be33-d9a1d176f91d	f	2025-03-09 00:32:57.560691+00	2025-03-09 00:32:57.560691+00	iLaht4mhupCbM7Coianvzw	656ff4f7-a2c0-4dd4-a506-9f8541f07d7d
00000000-0000-0000-0000-000000000000	76	_byauRFkz6N79ItalTWrpA	66ddac5e-bc52-4963-9e11-f0d938c920f4	f	2025-03-10 01:45:55.018087+00	2025-03-10 01:45:55.018087+00	\N	f2268791-f9c8-4978-a1b3-cb06f0a4b41c
00000000-0000-0000-0000-000000000000	27	KWEY357TA-BxouvLLDnQDw	66ddac5e-bc52-4963-9e11-f0d938c920f4	t	2025-02-05 13:40:27.573869+00	2025-02-05 15:58:09.572332+00	\N	f7a252da-36eb-47b1-80d7-714a550f55dc
00000000-0000-0000-0000-000000000000	28	ZEJ5NW76Ar7r23V083yEKw	66ddac5e-bc52-4963-9e11-f0d938c920f4	t	2025-02-05 15:58:09.580675+00	2025-02-05 17:11:11.211024+00	KWEY357TA-BxouvLLDnQDw	f7a252da-36eb-47b1-80d7-714a550f55dc
00000000-0000-0000-0000-000000000000	29	cuO3HKz-8P4MTqQFasldWQ	66ddac5e-bc52-4963-9e11-f0d938c920f4	f	2025-02-05 17:11:11.212793+00	2025-02-05 17:11:11.212793+00	ZEJ5NW76Ar7r23V083yEKw	f7a252da-36eb-47b1-80d7-714a550f55dc
00000000-0000-0000-0000-000000000000	30	Inp1pjUemZjB0p5JvAiFVg	66ddac5e-bc52-4963-9e11-f0d938c920f4	f	2025-02-05 17:32:11.724763+00	2025-02-05 17:32:11.724763+00	\N	c1ad26be-a503-459f-b4b8-4ca70a8a324a
00000000-0000-0000-0000-000000000000	31	AOLT3JfGo6cX0QxmeFZcdg	66ddac5e-bc52-4963-9e11-f0d938c920f4	f	2025-02-05 17:32:50.151104+00	2025-02-05 17:32:50.151104+00	\N	17900bf6-ce94-4d2e-9391-c935e4c9d769
00000000-0000-0000-0000-000000000000	32	fHCiuAIbCMVVBHYigwe6fg	66ddac5e-bc52-4963-9e11-f0d938c920f4	f	2025-02-05 17:33:19.23946+00	2025-02-05 17:33:19.23946+00	\N	649e7e12-7d88-415a-a1ab-9ac7820e325b
00000000-0000-0000-0000-000000000000	33	rVGYBxELtVD4PZ7WtJqhhw	12171891-246d-4630-8215-d628807f8654	f	2025-02-05 18:08:42.14183+00	2025-02-05 18:08:42.14183+00	\N	42580a44-693f-4767-a1f9-b5c2604a34e7
00000000-0000-0000-0000-000000000000	34	p8vl8aD6r2I3Hh9ou136PQ	12171891-246d-4630-8215-d628807f8654	f	2025-02-05 18:08:48.44183+00	2025-02-05 18:08:48.44183+00	\N	0e95a001-dadd-4797-8793-38de832bf427
00000000-0000-0000-0000-000000000000	43	-oux8ZRyhpW3wFff7Z57RQ	0d1955bc-f3f9-4460-be33-d9a1d176f91d	f	2025-02-10 22:09:24.753013+00	2025-02-10 22:09:24.753013+00	\N	300cf0ff-2474-454d-ac98-e799dc93778c
00000000-0000-0000-0000-000000000000	45	5ue4r8Xsr7b1vjA4gPOO3w	ef817874-a92d-4c10-beeb-c6180d14621b	t	2025-02-10 22:26:21.443072+00	2025-02-10 23:47:39.365448+00	\N	a2d03708-eea8-4cf9-91ca-0b253b8601bd
00000000-0000-0000-0000-000000000000	46	khe1sQU8AyPqhjkiFBca0g	ef817874-a92d-4c10-beeb-c6180d14621b	t	2025-02-10 23:47:39.368434+00	2025-02-14 12:50:02.986663+00	5ue4r8Xsr7b1vjA4gPOO3w	a2d03708-eea8-4cf9-91ca-0b253b8601bd
00000000-0000-0000-0000-000000000000	47	AK5emaogBPUl6lpim8q6cQ	ef817874-a92d-4c10-beeb-c6180d14621b	t	2025-02-14 12:50:02.992973+00	2025-02-14 16:04:31.943727+00	khe1sQU8AyPqhjkiFBca0g	a2d03708-eea8-4cf9-91ca-0b253b8601bd
00000000-0000-0000-0000-000000000000	48	WAg4z8Dtw3h-zzGCQKAJew	ef817874-a92d-4c10-beeb-c6180d14621b	t	2025-02-14 16:04:31.953778+00	2025-02-14 18:04:51.809497+00	AK5emaogBPUl6lpim8q6cQ	a2d03708-eea8-4cf9-91ca-0b253b8601bd
00000000-0000-0000-0000-000000000000	50	ljFmnvGyF97uyQrMMtY6qg	66ddac5e-bc52-4963-9e11-f0d938c920f4	f	2025-02-14 22:37:51.604846+00	2025-02-14 22:37:51.604846+00	\N	df6da52a-731e-4a48-a851-e778e1a6a4c6
00000000-0000-0000-0000-000000000000	44	fKBqsJbDXD4wfr0yq35nfg	0d1955bc-f3f9-4460-be33-d9a1d176f91d	t	2025-02-10 22:09:35.821439+00	2025-02-17 23:48:29.059708+00	\N	0a01eee4-fe1d-417f-b478-7217f1f0d9e1
00000000-0000-0000-0000-000000000000	51	bbRa654czXX6Ib2TTIdGOQ	0d1955bc-f3f9-4460-be33-d9a1d176f91d	t	2025-02-17 23:48:29.076918+00	2025-02-18 00:58:23.505353+00	fKBqsJbDXD4wfr0yq35nfg	0a01eee4-fe1d-417f-b478-7217f1f0d9e1
00000000-0000-0000-0000-000000000000	52	PQrjUEFwFelBMwxsuUhNUA	0d1955bc-f3f9-4460-be33-d9a1d176f91d	t	2025-02-18 00:58:23.50678+00	2025-02-18 01:58:33.868615+00	bbRa654czXX6Ib2TTIdGOQ	0a01eee4-fe1d-417f-b478-7217f1f0d9e1
00000000-0000-0000-0000-000000000000	54	B-IYFhUUigXrBZrlzcnnRA	0d1955bc-f3f9-4460-be33-d9a1d176f91d	f	2025-02-18 01:58:33.870254+00	2025-02-18 01:58:33.870254+00	PQrjUEFwFelBMwxsuUhNUA	0a01eee4-fe1d-417f-b478-7217f1f0d9e1
00000000-0000-0000-0000-000000000000	56	e8rku0InO4581dyY4xKf4Q	0d1955bc-f3f9-4460-be33-d9a1d176f91d	f	2025-02-18 03:03:43.716113+00	2025-02-18 03:03:43.716113+00	\N	8e10bbfc-c38f-4bc7-b61d-5a43e634ffad
00000000-0000-0000-0000-000000000000	53	Eu7xuUcNmw3tGlEhvG3JYw	66ddac5e-bc52-4963-9e11-f0d938c920f4	t	2025-02-18 01:58:06.479237+00	2025-02-21 21:08:20.430646+00	\N	b664a3b4-2ae9-4da1-9e41-e294040ff7de
00000000-0000-0000-0000-000000000000	57	d5tmUQHK9q_U4Snjl2wS3w	66ddac5e-bc52-4963-9e11-f0d938c920f4	t	2025-02-21 21:08:20.454527+00	2025-02-21 22:08:33.193778+00	Eu7xuUcNmw3tGlEhvG3JYw	b664a3b4-2ae9-4da1-9e41-e294040ff7de
00000000-0000-0000-0000-000000000000	58	JH_2cDyu074AWidFGpSyYA	66ddac5e-bc52-4963-9e11-f0d938c920f4	f	2025-02-21 22:08:33.198518+00	2025-02-21 22:08:33.198518+00	d5tmUQHK9q_U4Snjl2wS3w	b664a3b4-2ae9-4da1-9e41-e294040ff7de
00000000-0000-0000-0000-000000000000	49	rSFnGkINPK5iu4ucSqgh3A	ef817874-a92d-4c10-beeb-c6180d14621b	t	2025-02-14 18:04:51.81426+00	2025-02-23 14:09:55.357341+00	WAg4z8Dtw3h-zzGCQKAJew	a2d03708-eea8-4cf9-91ca-0b253b8601bd
00000000-0000-0000-0000-000000000000	59	RfZOwG-emtFxNy1eymfKEw	ef817874-a92d-4c10-beeb-c6180d14621b	t	2025-02-23 14:09:55.369498+00	2025-02-23 15:22:14.245365+00	rSFnGkINPK5iu4ucSqgh3A	a2d03708-eea8-4cf9-91ca-0b253b8601bd
00000000-0000-0000-0000-000000000000	60	aF5eTK1RepDy_HP6AqnVfw	ef817874-a92d-4c10-beeb-c6180d14621b	t	2025-02-23 15:22:14.250195+00	2025-02-23 20:18:46.853225+00	RfZOwG-emtFxNy1eymfKEw	a2d03708-eea8-4cf9-91ca-0b253b8601bd
00000000-0000-0000-0000-000000000000	71	GiP5-oy_MtgU65P91Bg9pQ	d1849754-b996-46c0-8274-09f6ed44fda4	t	2025-03-05 02:01:12.062706+00	2025-03-27 13:40:56.613078+00	\N	34f6dd26-542f-4266-9ad9-e8d4193e93de
00000000-0000-0000-0000-000000000000	69	RQAhNYnYD2RnocQSST9p2A	ef817874-a92d-4c10-beeb-c6180d14621b	t	2025-02-26 23:55:14.854761+00	2025-03-27 13:44:56.667979+00	wnj1olnF_fzq0pNYlbAicQ	a2d03708-eea8-4cf9-91ca-0b253b8601bd
00000000-0000-0000-0000-000000000000	78	X5nVcXz6vzw1CmCmTtEFxA	ef817874-a92d-4c10-beeb-c6180d14621b	t	2025-03-27 13:44:56.668575+00	2025-03-27 14:58:51.734422+00	RQAhNYnYD2RnocQSST9p2A	a2d03708-eea8-4cf9-91ca-0b253b8601bd
00000000-0000-0000-0000-000000000000	79	z_zNjYZaZt8OW9zBKmISYw	ef817874-a92d-4c10-beeb-c6180d14621b	t	2025-03-27 14:58:51.736278+00	2025-03-28 17:24:07.262594+00	X5nVcXz6vzw1CmCmTtEFxA	a2d03708-eea8-4cf9-91ca-0b253b8601bd
00000000-0000-0000-0000-000000000000	80	qVCCTvQGSyWpTvjPhOHEPg	ef817874-a92d-4c10-beeb-c6180d14621b	t	2025-03-28 17:24:07.278261+00	2025-03-30 12:45:11.788723+00	z_zNjYZaZt8OW9zBKmISYw	a2d03708-eea8-4cf9-91ca-0b253b8601bd
00000000-0000-0000-0000-000000000000	81	Mfzvf2GOD1HAmhhTMCt1gQ	ef817874-a92d-4c10-beeb-c6180d14621b	f	2025-03-30 12:45:11.797369+00	2025-03-30 12:45:11.797369+00	qVCCTvQGSyWpTvjPhOHEPg	a2d03708-eea8-4cf9-91ca-0b253b8601bd
00000000-0000-0000-0000-000000000000	66	NkAoegrtBkfuubVuKdVZMg	1be84c60-ce80-4243-b54f-56b7078389c5	t	2025-02-24 19:20:08.760517+00	2025-04-14 17:11:10.469331+00	\N	ea4e40d1-65e4-4184-adb3-93866bb306be
00000000-0000-0000-0000-000000000000	77	Uqm6VynRzFckfoEMIMSzew	d1849754-b996-46c0-8274-09f6ed44fda4	t	2025-03-27 13:40:56.617815+00	2025-04-08 12:22:35.005256+00	GiP5-oy_MtgU65P91Bg9pQ	34f6dd26-542f-4266-9ad9-e8d4193e93de
00000000-0000-0000-0000-000000000000	82	OlOSXQm061_wESIcJikOnA	d1849754-b996-46c0-8274-09f6ed44fda4	f	2025-04-08 12:22:35.014791+00	2025-04-08 12:22:35.014791+00	Uqm6VynRzFckfoEMIMSzew	34f6dd26-542f-4266-9ad9-e8d4193e93de
00000000-0000-0000-0000-000000000000	83	4F6u86V4ezSqJ7ZwL81f2Q	d1849754-b996-46c0-8274-09f6ed44fda4	f	2025-04-13 23:11:55.954451+00	2025-04-13 23:11:55.954451+00	\N	117840a7-8d7a-4bdf-88ad-691f958a22b4
00000000-0000-0000-0000-000000000000	84	PMZb2EWCBJfgEiwONPiN6A	1be84c60-ce80-4243-b54f-56b7078389c5	f	2025-04-14 17:11:10.486287+00	2025-04-14 17:11:10.486287+00	NkAoegrtBkfuubVuKdVZMg	ea4e40d1-65e4-4184-adb3-93866bb306be
00000000-0000-0000-0000-000000000000	85	H-BHnDLq3k9NeIPZCm6VhA	0d1955bc-f3f9-4460-be33-d9a1d176f91d	t	2025-04-20 22:04:22.026397+00	2025-04-20 23:30:37.46411+00	\N	302f001f-d264-422c-904f-7b6f0eaaae83
00000000-0000-0000-0000-000000000000	86	QvCbnFmmVIvjWn3DZslpWg	0d1955bc-f3f9-4460-be33-d9a1d176f91d	t	2025-04-20 23:30:37.471929+00	2025-04-21 00:29:50.880113+00	H-BHnDLq3k9NeIPZCm6VhA	302f001f-d264-422c-904f-7b6f0eaaae83
00000000-0000-0000-0000-000000000000	87	a0oPeoG8_z_PseUNeZk5RQ	0d1955bc-f3f9-4460-be33-d9a1d176f91d	f	2025-04-21 00:29:50.883046+00	2025-04-21 00:29:50.883046+00	QvCbnFmmVIvjWn3DZslpWg	302f001f-d264-422c-904f-7b6f0eaaae83
\.


--
-- Data for Name: saml_providers; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.saml_providers (id, sso_provider_id, entity_id, metadata_xml, metadata_url, attribute_mapping, created_at, updated_at, name_id_format) FROM stdin;
\.


--
-- Data for Name: saml_relay_states; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.saml_relay_states (id, sso_provider_id, request_id, for_email, redirect_to, created_at, updated_at, flow_state_id) FROM stdin;
\.


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.schema_migrations (version) FROM stdin;
20171026211738
20171026211808
20171026211834
20180103212743
20180108183307
20180119214651
20180125194653
00
20210710035447
20210722035447
20210730183235
20210909172000
20210927181326
20211122151130
20211124214934
20211202183645
20220114185221
20220114185340
20220224000811
20220323170000
20220429102000
20220531120530
20220614074223
20220811173540
20221003041349
20221003041400
20221011041400
20221020193600
20221021073300
20221021082433
20221027105023
20221114143122
20221114143410
20221125140132
20221208132122
20221215195500
20221215195800
20221215195900
20230116124310
20230116124412
20230131181311
20230322519590
20230402418590
20230411005111
20230508135423
20230523124323
20230818113222
20230914180801
20231027141322
20231114161723
20231117164230
20240115144230
20240214120130
20240306115329
20240314092811
20240427152123
20240612123726
20240729123726
20240802193726
20240806073726
20241009103726
\.


--
-- Data for Name: sessions; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sessions (id, user_id, created_at, updated_at, factor_id, aal, not_after, refreshed_at, user_agent, ip, tag) FROM stdin;
0a01eee4-fe1d-417f-b478-7217f1f0d9e1	0d1955bc-f3f9-4460-be33-d9a1d176f91d	2025-02-10 22:09:35.820705+00	2025-02-18 01:58:33.872209+00	\N	aal1	\N	2025-02-18 01:58:33.872137	undici	76.237.197.227	\N
34e2f72d-138e-45e1-b3c8-1a92e50ecfe7	a4a8b29c-6144-4352-8360-3b41bdd72816	2025-02-04 17:14:33.922891+00	2025-02-04 17:14:33.922891+00	\N	aal1	\N	\N	Mozilla/5.0 (X11; Linux x86_64; rv:134.0) Gecko/20100101 Firefox/134.0	146.70.171.231	\N
210e4c29-73d0-4a4d-be8a-82b29dbf1d24	a4a8b29c-6144-4352-8360-3b41bdd72816	2025-02-04 17:14:42.700547+00	2025-02-04 17:14:42.700547+00	\N	aal1	\N	\N	node	146.70.171.231	\N
8e10bbfc-c38f-4bc7-b61d-5a43e634ffad	0d1955bc-f3f9-4460-be33-d9a1d176f91d	2025-02-18 03:03:43.714246+00	2025-02-18 03:03:43.714246+00	\N	aal1	\N	\N	undici	76.237.197.227	\N
b664a3b4-2ae9-4da1-9e41-e294040ff7de	66ddac5e-bc52-4963-9e11-f0d938c920f4	2025-02-18 01:58:06.474772+00	2025-02-21 22:08:33.205056+00	\N	aal1	\N	2025-02-21 22:08:33.204981	Mozilla/5.0 (X11; Linux x86_64; rv:135.0) Gecko/20100101 Firefox/135.0	174.57.176.229	\N
f7a252da-36eb-47b1-80d7-714a550f55dc	66ddac5e-bc52-4963-9e11-f0d938c920f4	2025-02-05 13:40:27.572635+00	2025-02-05 17:11:23.632213+00	\N	aal1	\N	2025-02-05 17:11:23.632142	node	146.70.166.111	\N
c1ad26be-a503-459f-b4b8-4ca70a8a324a	66ddac5e-bc52-4963-9e11-f0d938c920f4	2025-02-05 17:32:11.720914+00	2025-02-05 17:32:11.720914+00	\N	aal1	\N	\N	node	146.70.166.111	\N
17900bf6-ce94-4d2e-9391-c935e4c9d769	66ddac5e-bc52-4963-9e11-f0d938c920f4	2025-02-05 17:32:50.150317+00	2025-02-05 17:32:50.150317+00	\N	aal1	\N	\N	node	146.70.166.111	\N
649e7e12-7d88-415a-a1ab-9ac7820e325b	66ddac5e-bc52-4963-9e11-f0d938c920f4	2025-02-05 17:33:19.238702+00	2025-02-05 17:33:19.238702+00	\N	aal1	\N	\N	node	146.70.166.111	\N
42580a44-693f-4767-a1f9-b5c2604a34e7	12171891-246d-4630-8215-d628807f8654	2025-02-05 18:08:42.138047+00	2025-02-05 18:08:42.138047+00	\N	aal1	\N	\N	Mozilla/5.0 (X11; Linux x86_64; rv:134.0) Gecko/20100101 Firefox/134.0	146.70.168.53	\N
0e95a001-dadd-4797-8793-38de832bf427	12171891-246d-4630-8215-d628807f8654	2025-02-05 18:08:48.441007+00	2025-02-05 18:08:48.441007+00	\N	aal1	\N	\N	node	146.70.168.53	\N
300cf0ff-2474-454d-ac98-e799dc93778c	0d1955bc-f3f9-4460-be33-d9a1d176f91d	2025-02-10 22:09:24.752091+00	2025-02-10 22:09:24.752091+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36	76.237.197.227	\N
df6da52a-731e-4a48-a851-e778e1a6a4c6	66ddac5e-bc52-4963-9e11-f0d938c920f4	2025-02-14 22:37:51.594826+00	2025-02-14 22:37:51.594826+00	\N	aal1	\N	\N	node	23.162.8.123	\N
b9899fdf-369d-42c7-917a-94d1807ed8d3	d1849754-b996-46c0-8274-09f6ed44fda4	2025-03-05 02:00:52.72188+00	2025-03-05 02:00:52.72188+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/132.0.0.0 Safari/537.36	73.244.91.246	\N
656ff4f7-a2c0-4dd4-a506-9f8541f07d7d	0d1955bc-f3f9-4460-be33-d9a1d176f91d	2025-02-18 02:58:22.819569+00	2025-03-09 00:32:57.565627+00	\N	aal1	\N	2025-03-09 00:32:57.565552	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36	76.237.197.227	\N
f2268791-f9c8-4978-a1b3-cb06f0a4b41c	66ddac5e-bc52-4963-9e11-f0d938c920f4	2025-03-10 01:45:55.008764+00	2025-03-10 01:45:55.008764+00	\N	aal1	\N	\N	node	143.244.47.76	\N
a2d03708-eea8-4cf9-91ca-0b253b8601bd	ef817874-a92d-4c10-beeb-c6180d14621b	2025-02-10 22:26:21.441362+00	2025-03-30 12:45:11.817948+00	\N	aal1	\N	2025-03-30 12:45:11.817301	node	73.244.91.246	\N
34f6dd26-542f-4266-9ad9-e8d4193e93de	d1849754-b996-46c0-8274-09f6ed44fda4	2025-03-05 02:01:12.062028+00	2025-04-08 12:22:35.029351+00	\N	aal1	\N	2025-04-08 12:22:35.029236	node	50.203.246.118	\N
117840a7-8d7a-4bdf-88ad-691f958a22b4	d1849754-b996-46c0-8274-09f6ed44fda4	2025-04-13 23:11:55.941187+00	2025-04-13 23:11:55.941187+00	\N	aal1	\N	\N	node	73.244.91.246	\N
ea4e40d1-65e4-4184-adb3-93866bb306be	1be84c60-ce80-4243-b54f-56b7078389c5	2025-02-24 19:20:08.755993+00	2025-04-14 17:11:10.505114+00	\N	aal1	\N	2025-04-14 17:11:10.504593	node	50.203.246.118	\N
302f001f-d264-422c-904f-7b6f0eaaae83	0d1955bc-f3f9-4460-be33-d9a1d176f91d	2025-04-20 22:04:22.013604+00	2025-04-21 00:29:50.88665+00	\N	aal1	\N	2025-04-21 00:29:50.886579	undici	76.237.197.227	\N
\.


--
-- Data for Name: sso_domains; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sso_domains (id, sso_provider_id, domain, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: sso_providers; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sso_providers (id, resource_id, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: users; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.users (instance_id, id, aud, role, email, encrypted_password, email_confirmed_at, invited_at, confirmation_token, confirmation_sent_at, recovery_token, recovery_sent_at, email_change_token_new, email_change, email_change_sent_at, last_sign_in_at, raw_app_meta_data, raw_user_meta_data, is_super_admin, created_at, updated_at, phone, phone_confirmed_at, phone_change, phone_change_token, phone_change_sent_at, email_change_token_current, email_change_confirm_status, banned_until, reauthentication_token, reauthentication_sent_at, is_sso_user, deleted_at, is_anonymous) FROM stdin;
00000000-0000-0000-0000-000000000000	a4a8b29c-6144-4352-8360-3b41bdd72816	authenticated	authenticated	testing@arithefirst.com	$2a$10$WNwM4OXT.uepz1LE4cTeF.4koDp1M08D96/TeOjgcQrZ1ptq3AYuK	2025-02-04 17:14:32.839496+00	\N		2025-02-04 17:14:16.02944+00		\N			\N	2025-02-04 17:14:42.700469+00	{"provider": "email", "providers": ["email"]}	{"sub": "a4a8b29c-6144-4352-8360-3b41bdd72816", "email": "testing@arithefirst.com", "email_verified": true, "phone_verified": false}	\N	2025-02-04 17:14:15.989838+00	2025-02-04 17:14:42.702268+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	12171891-246d-4630-8215-d628807f8654	authenticated	authenticated	newaccount@arithefirst.com	$2a$10$qLo/tGWAnB6LH6OFLUMaDe.iLogcUtAW8ix6IOtVdKUtyONQyrJJq	2025-02-05 18:08:41.380698+00	\N		2025-02-05 18:08:33.265037+00		\N			\N	2025-02-05 18:08:48.440915+00	{"provider": "email", "providers": ["email"]}	{"sub": "12171891-246d-4630-8215-d628807f8654", "email": "newaccount@arithefirst.com", "email_verified": true, "phone_verified": false}	\N	2025-02-05 18:08:33.237625+00	2025-02-05 18:08:48.442877+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	18d19b49-bb99-4581-90c6-28e7ff16ff3f	authenticated	authenticated	aaryeh27@palmertrinity.org	$2a$10$0WpeCF37pFkYrxOCuvsbDueIL7YE7GvVEuoPCKhXWz6Vk8dcCyedG	2025-02-24 19:20:30.346177+00	\N		2025-02-24 19:20:23.165914+00		\N			\N	\N	{"provider": "email", "providers": ["email"]}	{"sub": "18d19b49-bb99-4581-90c6-28e7ff16ff3f", "email": "aaryeh27@palmertrinity.org", "email_verified": true, "phone_verified": false}	\N	2025-02-24 19:20:23.129287+00	2025-02-24 19:20:30.355338+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	66ddac5e-bc52-4963-9e11-f0d938c920f4	authenticated	authenticated	ari@arithefirst.com	$2a$10$7eU6CVpzfCRa/xPblXYbDeXHA5v0v9t8zqKSCx8nhjuHGF9.4.IiC	2025-01-24 20:02:38.135142+00	\N		2025-01-24 20:02:28.107541+00		\N			\N	2025-03-10 01:45:55.008666+00	{"provider": "email", "providers": ["email"]}	{"sub": "66ddac5e-bc52-4963-9e11-f0d938c920f4", "email": "ari@arithefirst.com", "email_verified": true, "phone_verified": false}	\N	2025-01-24 19:28:09.560766+00	2025-03-10 01:45:55.036009+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	ef817874-a92d-4c10-beeb-c6180d14621b	authenticated	authenticated	justinebanks580@gmail.com	$2a$10$PKumrHMyJ2Bj9ZVSBX4kd.FGkzH5RAABfhr4KZxHtRv80vaBisOYW	2025-02-10 22:25:45.234701+00	\N		2025-02-10 22:15:14.967858+00		\N			\N	2025-02-10 22:26:21.441293+00	{"provider": "email", "providers": ["email"]}	{"sub": "ef817874-a92d-4c10-beeb-c6180d14621b", "email": "justinebanks580@gmail.com", "email_verified": true, "phone_verified": false}	\N	2025-02-10 22:15:14.958845+00	2025-03-30 12:45:11.809104+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	d1849754-b996-46c0-8274-09f6ed44fda4	authenticated	authenticated	juebanks27@palmertrinity.org	$2a$10$4Fo.FCRe2jWFpUznLD98pOL80HwSV39UPt1nTv5kcnkrCxy7lMhzi	2025-03-05 02:00:50.142446+00	\N		2025-03-05 02:00:40.688147+00		\N			\N	2025-04-13 23:11:55.941074+00	{"provider": "email", "providers": ["email"]}	{"sub": "d1849754-b996-46c0-8274-09f6ed44fda4", "email": "juebanks27@palmertrinity.org", "email_verified": true, "phone_verified": false}	\N	2025-03-05 02:00:40.634727+00	2025-04-13 23:11:55.971449+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	1be84c60-ce80-4243-b54f-56b7078389c5	authenticated	authenticated	adrian.aryeh@gmail.com	$2a$10$.NNfE0VZmHRNIAvrBOFgluh2DRUH6k8HoNaOy7rCLq2pQb0lUavGC	2025-01-31 15:22:50.052451+00	\N		2025-01-31 15:22:41.195535+00		\N			\N	2025-02-24 19:20:08.755915+00	{"provider": "email", "providers": ["email"]}	{"sub": "1be84c60-ce80-4243-b54f-56b7078389c5", "email": "adrian.aryeh@gmail.com", "email_verified": true, "phone_verified": false}	\N	2025-01-31 15:22:41.133577+00	2025-04-14 17:11:10.494729+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	0d1955bc-f3f9-4460-be33-d9a1d176f91d	authenticated	authenticated	platinumplus999@gmail.com	$2a$10$aJWx8oahnHhqPf/QjlCw7.HxEQyddhf9tJBKoP9QdacecSMQw.OPG	2025-02-10 22:09:24.196937+00	\N		2025-02-10 22:09:05.413517+00		\N			\N	2025-04-20 22:04:22.012658+00	{"provider": "email", "providers": ["email"]}	{"sub": "0d1955bc-f3f9-4460-be33-d9a1d176f91d", "email": "platinumplus999@gmail.com", "email_verified": true, "phone_verified": false}	\N	2025-02-10 22:09:05.408251+00	2025-04-21 00:29:50.884219+00	\N	\N			\N		0	\N		\N	f	\N	f
\.


--
-- Data for Name: key; Type: TABLE DATA; Schema: pgsodium; Owner: supabase_admin
--

COPY pgsodium.key (id, status, created, expires, key_type, key_id, key_context, name, associated_data, raw_key, raw_key_nonce, parent_key, comment, user_data) FROM stdin;
\.


--
-- Data for Name: cohost_conversations; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.cohost_conversations (id, user_id, chats) FROM stdin;
1	d1849754-b996-46c0-8274-09f6ed44fda4	[{"user_prompt":"test","chat_response":"Hello! How can I assist you today?","timestamp":"Tue Mar 04 2025 21:14:51 GMT-0500 (Eastern Standard Time)"}]
3	ef817874-a92d-4c10-beeb-c6180d14621b	[{"user_prompt":"hi there, cohost AI","chat_response":"Hello! How can I assist you with optimizing your Airbnb listing for better search ranking and guest appeal?","timestamp":"Thu Mar 27 2025 09:57:01 GMT-0400 (Eastern Daylight Time)"},{"user_prompt":"how can I optimize listing 1","chat_response":"To optimize your listing for the A-Frame cabin on the Satilla River with Dock, consider the following suggestions:\\n   \\n1. Update your title to include keywords like \\"Riverfront Retreat\\" or \\"Nature Lover's Paradise\\" for better search visibility.\\n   \\n2. Highlight key amenities like the private dock, river views, bonfire pit, and nearby attractions in your description to attract guests interested in outdoor activities and relaxation.\\n   \\n3. Showcase the cozy and modern comforts of the cabin, such as the queen and twin beds, riverfront porch, and streaming capabilities, to appeal to a wide range of travelers.\\n   \\n4. Address any missing amenities like an exterior security camera, washer, dryer, and essentials to enhance guest convenience and comfort.\\n   \\n5. Consider adjusting your pricing to reflect the value of your unique riverside location and amenities compared to similar top-performing listings in the area.\\n   \\nBy implementing these optimizations, you can improve your listing's search ranking, guest appeal, and overall booking potential.","timestamp":"Thu Mar 27 2025 10:02:29 GMT-0400 (Eastern Daylight Time)"}]
4	1be84c60-ce80-4243-b54f-56b7078389c5	[{"user_prompt":"hi","chat_response":"Hello! How can I assist you with your Airbnb listing today? If you have any specific questions or need help optimizing your listing, feel free to let me know.","timestamp":"Mon Apr 14 2025 13:35:40 GMT-0400 (Eastern Daylight Time)"}]
2	0d1955bc-f3f9-4460-be33-d9a1d176f91d	[{"user_prompt":"Create a 30 second clip of the most importain moments in USA history","chat_response":"The clip begins with the signing of the Declaration of Independence in 1776, showcasing the birth of the United States as a nation. It quickly transitions to the Emancipation Proclamation in 1863, highlighting the end of slavery in America.\\n\\nNext, the clip shows the surrender at Appomattox Court House in 1865, marking the end of the Civil War and the reunification of the country. This is followed by the 1920 passage of the 19th Amendment, granting women the right to vote.\\n\\nThe clip then moves to the end of World War II in 1945, with the iconic image of American soldiers raising the flag at Iwo Jima. It concludes with footage of the civil rights movement in the 1960s, including Martin Luther King Jr.'s \\"I Have a Dream\\" speech and the 1964 Civil Rights Act.\\n\\nOverall, the clip highlights key moments in American history that have shaped the nation and its values.","timestamp":"Sat Mar 08 2025 11:37:04 GMT-0500 (Eastern Standard Time)"},{"user_prompt":"Hi","chat_response":"Hello! How can I assist you with your Airbnb listings today?","timestamp":"Sun Apr 20 2025 18:04:35 GMT-0400 (Eastern Daylight Time)"}]
\.


--
-- Data for Name: emails; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.emails (id, email) FROM stdin;
1	justinebanks580@gmail.com
2	juebanks27@palmertrinity.org
3	jj2guys@gmail.com
7	ttexiera27@palmertrinity.org
10	saragovia@gmail.com
12	ari@arithefirst.com
13	arihall4239@gmail.com
17	platinumplus999@gmail.com
20	aaryeh27@palmertrinity.org
\.


--
-- Data for Name: listings; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.listings (id, user_id, data, url, "time") FROM stdin;
ebe12f78-d046-458e-8e8b-cab6e1d7fde2	0d1955bc-f3f9-4460-be33-d9a1d176f91d	{"seo": {"keywordsInTitle": [], "keywordsInDescription": []}, "title": "Tulum on the Water - Miami Waterfront Villa", "photos": {"captions": [], "photoCount": 55}, "pricing": {"cleaningFee": 700, "minimumStay": null, "nightlyRate": 2215, "dynamicPricing": null}, "reviews": {"rating": 5, "reviewCount": 55, "recentReviews": ["Monica was an absolutely amazing host. She responding almost immediately to every message and always found the fastest possible way to resolve every issue or request.  Tulum On the Water easily accommodated our 12 person group with ample space for large meals together.  The hot tub and heated pool were amazing during a cooler but sunny week.", "Our stay at Monica's place was very good! The house is large, comfortable and with excellent outdoor area.", "Thanks to Monica for her attention, the property is in perfect condition and I matched the description , super recommended 100 of 10", "Thank you for an amazing time. Great location!!!!", "Wonderful host, she was very helpful and easygoing. I had a last minute booking because my event was going to be ruined by rain and she saved it, and I am so grateful for it. The place was clean, and the pictures don't do it justice to how beautiful the sunset and views are. Will definitely book again, and I recommend Monica as a host and the place for your stay.", "Thank you for your hospitality Monica! My friends and I loved staying at your home!!"]}, "success": true, "location": "Miami, Florida", "roomType": null, "amenities": {"missing": ["Unavailable: Carbon monoxide alarmCarbon monoxide alarmHost has indicated no carbon monoxide detector is necessary. Reach out to the host with any questions.", "Unavailable: HeatingHeating"], "provided": ["Bay view", "Pool view", "River view", "Bathtub", "Hair dryer", "Cleaning products", "Shampoo", "Conditioner", "Body soap", "Hot water", "Shower gel", "Free washer – In unit", "Free dryer – In unit", "EssentialsTowels, bed sheets, soap, and toilet paper", "Hangers", "Bed linensCotton linens", "Extra pillows and blankets", "Iron", "Safe", "TV", "Sound system", "Pack ’n play/Travel crib - available upon requestSheets provided", "Children’s books and toys", "Baby monitor", "Board games", "Baby safety gates", "Central air conditioning", "Ceiling fan", "Exterior security cameras on propertyFront porch, pool area, gated garage, barbecue area.", "Smoke alarm", "Fire extinguisher", "Wifi", "KitchenSpace where guests can cook their own meals", "Refrigerator", "Microwave", "Cooking basicsPots and pans, oil, salt and pepper", "Dishes and silverwareBowls, chopsticks, plates, cups, etc.", "Mini fridge", "Freezer", "Dishwasher", "Electric stove", "Stainless steel oven", "Hot water kettle", "Coffee maker: drip coffee maker, espresso machine", "Wine glasses", "Blender", "Dining table", "Coffee", "WaterfrontRight next to a body of water", "Private patio or balcony", "Private backyard – Not fully fencedAn open space on the property usually covered in grass", "Outdoor furniture", "Outdoor dining area", "BBQ grill", "Beach essentialsBeach towels, umbrella, beach blanket, snorkeling gear", "Boat slip", "Sun loungers", "Free parking on premises", "Private outdoor pool - available all year, open 24 hours, heated", "Private hot tub - available all year, open 24 hours", "Long term stays allowedAllow stay for 28 days or more", "Self check-in", "Lockbox"]}, "description": "Our Miami waterfront private residence features a modern & outstanding design with four spacious living areas, splendid and top notch accommodations, premium amenities, swimming pool with jacuzzi, private dock with open access to the bay  & a pleasant view of the river.  Location is one great plus! Tulum on the Water is ideal for private retreats, family, social & corporate gatherings, where the whole group will enjoy easy access to everything from this centrally located spot.\\n\\nThe space\\nStunning custom finishes throughout, including floor-to-ceiling glass windows and boho-inspired decor. Pool and hot tub overlooking the wide river waterfront surrounded by palm trees and lush foliage, with views of the open bay.\\n\\nGuest access\\nThe entire residence is available for guests during their stay.\\n\\nOther things to note\\nThe relaxation and well-being of guests during their stay is our priority.\\nOnce you confirm your booking, we will kindly ask for your email address to share with you the house rules via docu-sign.", "availability": {"seasonality": null, "occupancyRate": null}, "propertyType": "Entire home", "guestCapacity": 16}	https://www.airbnb.com/rooms/792223142947046509?adults=1&category_tag=Tag%3A8102&children=0&enable_m3_private_room=true&infants=0&pets=0&photo_id=1729741629&search_mode=flex_destinations_search&check_in=2025-03-16&check_out=2025-03-21&source_impression_id=p3_1737841638_P3uEvLDyrRe7wlbM&previous_page_section_name=1000&federated_search_id=eeb25c2b-0508-4adf-9022-8a0189a220c3	2025-02-18 01:53:34.773213
7d7ed87f-2a04-4f82-8441-385a719e1ca9	0d1955bc-f3f9-4460-be33-d9a1d176f91d	{"seo": {"keywordsInTitle": [], "keywordsInDescription": []}, "title": "Studio with 1 Queen Bed", "photos": {"captions": [], "photoCount": 16}, "pricing": {"cleaningFee": null, "minimumStay": null, "nightlyRate": 133, "dynamicPricing": null}, "reviews": {"rating": null, "reviewCount": null, "recentReviews": ["I recommend it Excellent Option", "Great place great location friendly staff!", "Wonderful experience", "Great location in downtown new york. The airbnb was comfortable and clean.loved it", "We had a very good experience, very accessible to transport us highly recommended", "I am so pleased with this listing. Kenny and Jason was great, amazing I mean lost of words in such an outstanding way. Even the front desk made me feel super welcome. The room was unexpected I love the space I had a great time. Thank you guys for making this a special most affordable moment of my year.You guys are awesome…"]}, "success": true, "location": "hotel", "roomType": null, "amenities": {"missing": [], "provided": ["Hair dryer", "Shampoo", "Body soap", "Washer", "EssentialsTowels, bed sheets, soap, and toilet paper", "Bed linens", "Iron", "Safe", "TV with standard cable", "Air conditioning", "Heating", "Smoke alarm", "Carbon monoxide alarm", "Wifi", "Dedicated workspace", "KitchenSpace where guests can cook their own meals", "Refrigerator", "Microwave", "Dishes and silverwareBowls, chopsticks, plates, cups, etc.", "Dishwasher", "Coffee maker", "Private entranceSeparate street or building entrance", "ElevatorThe home or building has an elevator that’s at least 52 inches deep and a doorway at least 32 inches wide", "Gym", "Paid parking off premises", "Long term stays allowedAllow stay for 28 days or more", "Host greets you"]}, "description": "Welcome to Candlewood Suites Times Square\\n\\n\\n\\nSurrounded by the electrifying Times Square, Candlewood Suites New York City Times Square is the perfect NYC location for your extended stay. When blending business with leisure, our NYC hotel is convenient to major businesses in Times Square and the attractions of New York City. If you are traveling to \\"the Big Apple\\" for just an overnight stay or for a long stay, our NYC hotel's studio suites with full kitchen facilities will make your trip a smashi\\n\\nThe space\\n—   Destination fee of $17.12 per night is required upon check-in.\\n\\n\\n\\nOur Times Square address places you within walking distance of the Jacob Javitz Convention Center, Madison Square Garden, Penn Station, Port Authority, Hudson Yard, Ernst & Young, New York Times Building and Amazon among others. Our All-Suite hotel offers comfortable work spaces and free high-speed Internet access.\\n\\n\\n\\nOur hotel in NYC's Times Square is centrally located so it is easy to visit the best of the city; the electricity of Times Square, the majesty of the Empire State Building and the excitement of Broadway Theater are at our doorstep. All modes of transportation, from trains, buses and subways are nearby.\\n\\n\\n\\nOur extended stay Midtown Manhattan hotel offers a free 24-hour fitness center. We are a 100% non-smoking hotel. There is the Candlewood Cupboard, located in the main lobby, for food and sundries. We also offer free laundry facilities.\\n\\n\\n\\n✔You must show a valid photo ID and credit card upon check-in. Please note that all special requests cannot be guaranteed and are subject to availability upon check-in. Additional charges may apply.\\n\\n✔You must be 18 to rent this room. Only the person's name on the booking will be allowed to check in.\\n\\n✔ Check in: 3:00 pm / Check out 12:00 noon\\n\\n\\n\\nRoom amenities\\n\\n▶Be entertained\\n\\n• DVD player\\n\\n• Flat-screen television\\n\\n• Cable TV channels\\n\\n\\n\\n▶Home comfort\\n\\n• Air conditioning (climate-controlled)\\n\\n• Coffee/tea maker\\n\\n• Iron/ironing board\\n\\n\\n\\n▶Sleep well\\n\\n• Bed sheets provided\\n\\n\\n\\n▶Freshen up\\n\\n• Bathtub or shower\\n\\n• Free toiletries\\n\\n• Hair dryer\\n\\n\\n\\n▶Stay connected\\n\\n• Desk\\n\\n• Free WiFi\\n\\n• Free local calls\\n\\nOther things to note\\nJust a 5-minute walk from Times Square, this all-suite Manhattan hotel features an on-site 24-hour convenience store and suites equipped with free Wi-Fi, a flat-screen TV, and a DVD player.\\n\\n\\n\\nA fully equipped kitchen complete with a dishwasher is also in each suite at Candlewood Suites NYC – Times Square. There is a dining area and a seating area, as well as a work desk.\\n\\n\\n\\nA modern fitness center and a business center are available on site at the Times Square Candlewood Suites. The front desk is staffed 24 hours a day. Weekly housekeeping service is provided.\\n\\n\\n\\nBroadway and the Theater District are a 5-minute walk from this hotel, while Madison Square Garden is a 9-minute bus ride away. Macy's and the Javitz Center are both within 15 minutes' walk of the Candlewood Suites NYC.\\n\\n\\n\\n▶ Mandatory fees\\n\\n\\n\\nImportant: Please read carefully. \\n\\n— Destination fee of $17.12 per night, is required upon check-in.\\n\\n— A damage deposit of $150 per night is required on arrival. This will be collected by credit card. You should be reimbursed within 7 days of check-out. Your deposit will be refunded in full by credit card, subject to an inspection of the property.\\t\\t\\t\\t\\n\\n  \\n\\n▶Optional extra \\n\\n• This property allows pets however there is $75 fee for 1 to 6 nights and $150  for 7 or more nights – non-refundable fee, If you're bringing your fuzzy little one! \\n\\n\\n\\nAt a glance\\n\\n▶Hotel size\\n\\n• 188 rooms\\n\\n• Arranged over 32 floors\\n\\n\\n\\n▶Arriving/Leaving\\n\\n• Check-in time from 3 PM - midnight\\n\\n• Check-out time is noon\\n\\n\\n\\n\\n\\n▶Special check-in instructions\\n\\n• Front desk staff will greet guests on arrival\\n\\n\\n\\n▶Required at check-in\\n\\n• Credit card, debit card, or cash deposit required for incidental charges\\n\\n• Government-issued photo ID may be required\\n\\n• Minimum check-in age is 18\\n\\n\\n\\n▶Pets\\n\\n• Pets allowed (up to 80 lbs)*\\n\\n\\n\\n▶Internet\\n\\n• Free WiFi in public areas\\n\\n• Free WiFi in rooms\\n\\n\\n\\n▶Parking\\n\\n• Onsite valet parking (USD 75.00 per day)\\n\\n• Height restrictions apply for onsite parking\\n\\n\\n\\nProperty amenities\\n\\n▶Food and drink\\n\\n• Room service\\n\\n\\n\\n▶Working away\\n\\n• Business center\\n\\n• Computer station\\n\\n\\n\\n▶Services\\n\\n• 24-hour front desk\\n\\n• Dry cleaning/laundry services\\n\\n• Free newspapers in lobby\\n\\n• Multilingual staff\\n\\n\\n\\n▶Facilities\\n\\n• 1 building/tower\\n\\n• ATM/banking\\n\\n• Safe-deposit box at front desk\\n\\n• Television in common areas\\n\\n• Fitness center\\n\\nRegistration number\\nExempt", "availability": {"seasonality": null, "occupancyRate": null}, "propertyType": "Room", "guestCapacity": 2}	https://www.airbnb.com/rooms/992970965790772607?search_mode=regular_search&adults=1&check_in=2025-02-22&check_out=2025-02-27&children=0&infants=0&pets=0&source_impression_id=p3_1739844561_P3Sk0sDBFKrDQz2r&previous_page_section_name=1000&federated_search_id=095fe3f1-ea95-4a37-b3e3-c818a3d0ca56	2025-02-18 02:10:04.919409
5deedcb1-6a89-406b-8ed1-18f3c6492475	66ddac5e-bc52-4963-9e11-f0d938c920f4	{"seo": {"keywordsInTitle": [], "keywordsInDescription": []}, "title": "Sleeps 4|King Bed|W/D|Rooftop Views|Near FishTown!", "photos": {"captions": ["Sofa bed", "King bed"], "photoCount": 43}, "pricing": {"cleaningFee": null, "minimumStay": null, "nightlyRate": 0, "dynamicPricing": null}, "reviews": {"rating": 5, "reviewCount": 13, "recentReviews": ["Richard’s Airbnb was absolutely amazing. From the moment we arrived, everything was clean, cozy, and well thought out. He was an incredible host—super responsive, kind, and made sure we had everything we needed. The space was even better than the pictures, and the little thoughtful touches made it feel like home. Definitely one of the best stays I’ve had—I’ll be back for sure!", "Great Place to stay. Easy Check-in and out. Apartment was clean and pictures were as described. Richard communicated perfectly. 10/10", "Appreciated Richard’s quick response in helping to get Netflix working at 9:30 pm.", "My stay was very nice and relaxing! Clean and loved the large windows. Would definitely stay here again. Was able to find parking directly outside the building and view my car from the bedroom windows. We caught Ubers the entire weekend so we wouldn’t loose our parking spot. Great location and wasn’t noisy from the club across the street.", "Beautiful place I loved it", "This apart was beautifully furnished, relaxing yet functional. My daughter, my dog and I all enjoyed the space.  The bed was wonderful for a restful nights sleep. I would have liked more kitchen supplies, for cooking meals, instead it’s very minimal with mostly empty cabinets, but otherwise an overall great experience."]}, "success": true, "location": "Philadelphia, Pennsylvania", "roomType": null, "amenities": {"missing": ["Unavailable: Private entrancePrivate entrance"], "provided": ["Canal view", "City skyline view", "Harbor view", "Park view", "River view", "Hair dryer", "Cleaning products", "Shampoo", "Conditioner", "Body soap", "Hot water", "Washer", "Dryer – In unit", "EssentialsTowels, bed sheets, soap, and toilet paper", "Hangers", "Bed linens", "Extra pillows and blankets", "Room-darkening shades", "Iron", "Clothing storage", "TV", "Arcade games", "Theme roomA room or multiple spaces that are designed to follow the same theme", "Pack ’n play/Travel crib", "Board games", "Air conditioning", "Central heating", "Noise decibel monitors on propertyWe have a noise monitor in unit (DOES NOT RECORD CONVERSATIONS) to prevent noise from reaching a certain level\\n", "Exterior security cameras on propertyWe have security cameras facing the exterior of the building and in all common shared areas (hallways, roof lounge, lobby, etc.). They will be recording for safety purposes", "Smoke alarm", "Carbon monoxide alarm", "Fire extinguisher", "First aid kit", "Wifi", "Dedicated workspace", "KitchenSpace where guests can cook their own meals", "Refrigerator", "Microwave", "Cooking basicsPots and pans, oil, salt and pepper", "Dishes and silverwareBowls, chopsticks, plates, cups, etc.", "Freezer", "Dishwasher", "Stainless steel electric stove", "Oven", "Hot water kettle", "Coffee maker", "Wine glasses", "Toaster", "Rice maker", "Trash compactor", "Dining table", "Coffee", "Free street parking", "ElevatorThe home or building has an elevator that’s at least 52 inches deep and a doorway at least 32 inches wide", "Shared gym in building", "Paid parking garage off premises", "Single level homeNo stairs in home", "Pets allowedAssistance animals are always allowed", "Long term stays allowedAllow stay for 28 days or more", "Self check-in", "Smart lock"]}, "description": "Experience the charm of Philadelphia at this stylish 1-bedroom getaway! Perfect for group trips, it offers modern comfort and a prime location - just minutes away from the city’s top attractions and experiences.\\n\\n✨ 3 mins to Fishtown hotspots\\n✨ 10 mins to Temple University\\n✨ 12 mins to UPenn \\n🚗 10 mins to historic Old City\\n🚗 12 mins to Lincoln Financial Field + Wells Fargo Center\\n🎵 5-min walk to the Fillmore concerts\\n🎵 5-min drive to Franklin Hall shows\\n🚗5 mins to Yards Brewing vibes\\n\\nThe space\\nWe work hard everyday to provide a comfortable and quality experience for our guests! We would be honored to have the opportunity to host your stay in Philadelphia.\\n\\n★★THE APARTMENT★★\\n⭐ Beautiful New 1 Bedroom /1 Bathroom Apartment \\n⭐ Dedicated working space in the living room\\n⭐ Features plush king-sized bed in Bedroom and a sofa bed in the living room\\n⭐ Cozy Living Room With 50\\" Smart TV and a Smart TV in Bedroom (Please note: Guests will need to use their own streaming accounts to access Netflix, Hulu, and other services)\\n⭐ In-Unit Washer & Dryer\\n⭐ Central Air Conditioning/Heating!\\n⭐ Full kitchen w/ stainless steel appliances + cooking necessities\\n⭐ Complimentary High Speed Wi-Fi \\n⭐ Updated Full Bathrooms - Clean, Fresh and Modern Equipped With Makeup towels, Bathmats, Hotel Style Towels, Shampoo, Conditioner, Hand Soap and Body Wash!\\n⭐ Rooftop lounge, offering stunning panoramic views of the city skyline and the scenic Delaware River waterfront (May be occasionally closed for scheduled repairs and maintenance)\\n\\nIMPORTANT NOTE: This is a home with other tenants and NOT a hotel. We ask to please respect all areas of the property. Any public disturbances in common areas, complaints from residential tenants, or interference with mail or packages will be grounds for immediate termination of your reservation. We appreciate your cooperation in maintaining a respectful and secure environment for all residents.\\n\\nGuest access\\n★★AMENITY HIGHLIGHTS★★\\nBONUS!!!!! For guests staying two weeks or longer, you’ll enjoy full access to our exclusive amenity center. (There will be amenities such as spas/saunas/even a podcast room and a small dog park but they are CURRENTLY under construction)\\n\\n⚡ Fully-Equipped Fitness Center – Stay active with a range of exercise options (Amenity Center)\\n⚡ Movie Room – Luxury lounge for unforgettable movie nights. (Amenity Center)\\n\\nOther things to note\\n★ The home is professionally cleaned and sanitized between each guest. We ensure that our cleaners are committed to the highest standards of cleanliness.\\n\\n★ Smoking, Drugs and Partying inside our home is PROHIBITED. Any signs of smoking or partying will result to $1,000 fine.\\n\\n★ PARKING ★\\nThere is free street parking along side the building and local parking garages. We recommend downloading the SpotHero or ParkWhiz apps to locate a spot for multi-night stays. \\n\\nIMPORTANT: The parking lot within the complex is reserved exclusively for residents. Guest parking in this lot is prohibited, and any unauthorized vehicles may be towed from the premises and a $250 fine will be imposed for any violation.\\n\\n★ PETS ★\\nWe’re a pet-friendly establishment. One dog <25 lbs is allowed, but other types of pets are prohibited unless an exception has been granted. A pet cleaning fee applies, and all pet details must be provided before booking. Pet must be potty trained.\\n\\nNote: Any unannounced pets upon discovery of evidence will result in a $300 fine. Additionally, pets are not permitted on the rooftop and will incur a $150 fine if found.\\n\\n★★★ GUEST VERIFICATION PRIOR TO STAY IS REQUIRED ★★★\\n\\nTo ensure a safe stay, all guests must complete verification before check-in. This information is used only for screening and is not stored or used otherwise.\\n\\nBy booking, you agree to the following:\\n\\n• A valid government-issued ID and photo selfie is required before check-in.\\n• You must sign and be in agreement to our rental agreement. (Background check may be required)\\nCheck-in instructions will be withheld until verification is complete.\\n\\nVerification Details:\\n• All guests must provide verification info prior to arrival. Failure to do so may result in cancellation.\\n• New profiles with fewer than 2 reviews must pay a damage deposit, refundable if no damage occurs.\\n• Guests with ratings under 4 stars cannot book via instant booking; manual review and approval are required for new profiles. If for whatever reason the reservation confirms through the system, the reservation may be canceled.\\n\\n• We have security cameras facing the exterior of the building and in all common shared areas (hallways, roof lounge, lobby, etc.). They will be recording for safety purposes\\n• We have a noise monitor in unit (DOES NOT RECORD CONVERSATIONS) to prevent noise from reaching a certain level\\n• This is a pet friendly property & may encounter pets\\n• As we are directly across from Roar, a Club, it may get noisy Saturday Nights\\n• As this is a new building, there is construction all around\\n\\nRegistration number\\n968962", "availability": {"seasonality": null, "occupancyRate": null}, "propertyType": "Entire rental unit", "guestCapacity": 4}	https://www.airbnb.com/rooms/1279190400060397697?source_impression_id=p3_1739840579_P3nvvcEhsEjdI3AD	2025-02-21 21:50:22.896389
9cfb8adf-2d07-4a3d-a966-0d63e842c04e	ef817874-a92d-4c10-beeb-c6180d14621b	{"seo": {"keywordsInTitle": [], "keywordsInDescription": []}, "title": "A-Frame on the Satilla River with Dock", "photos": {"captions": ["Air conditioning\\n,\\n · TV", "Baking sheet\\n,\\n · Barbecue utensils\\n,\\n · Coffee maker\\n,\\n · Cooking basics\\n,\\n · Dishes and silverware\\n,\\n · Microwave\\n,\\n · Show more", "Air conditioning\\n,\\n · Dining table\\n,\\n · Wine glasses", "Queen bed\\n,\\n · Bed linens\\n,\\n · Air conditioning\\n,\\n · Ceiling fan\\n,\\n · Room-darkening shades", "Queen bed\\n,\\n · Single bed\\n,\\n · Air conditioning\\n,\\n · Bed linens\\n,\\n · Ceiling fan", "Air conditioning\\n,\\n · Body soap\\n,\\n · Conditioner\\n,\\n · Hair dryer\\n,\\n · Hot water\\n,\\n · Shampoo", "Backyard\\n,\\n · Barbecue utensils\\n,\\n · BBQ grill\\n,\\n · Bed linens\\n,\\n · Coffee maker\\n,\\n · Cooking basics\\n,\\n · Show more"], "photoCount": 32}, "pricing": {"cleaningFee": 95, "minimumStay": null, "nightlyRate": 0, "dynamicPricing": null}, "reviews": {"rating": 4.88, "reviewCount": 17, "recentReviews": ["This place is very beautiful. If you would like a place for peace and quiet and a beautiful view, this is your spot. I highly recommend this Airbnb.", "Can’t wait to go back", "We loved the place! It was impeccably clean and well-organized, exactly what we were looking for to enjoy some peaceful days away from the hustle and bustle of the big city. Although our stay was short, it was extremely pleasant.Katie was always attentive and friendly, ready to assist whenever we needed.", "Wife and I loved our stay. Beautiful view of river, clean place. Felt very homey, everything you need and then some. Would definitely recommend.", "Beautiful river house. Secluded. Very quiet. Exactly what we wanted.", "Nice spot to relax and enjoy nature. The place was cozy and made me feel like home. Highly recommend for a get away weekend."]}, "success": true, "location": "Hortense, Georgia", "roomType": null, "amenities": {"missing": ["Unavailable: Exterior security cameras on propertyExterior security cameras on property", "Unavailable: WasherWasher", "Unavailable: DryerDryer", "Unavailable: EssentialsEssentials", "Unavailable: Carbon monoxide alarmCarbon monoxide alarmThis place may not have a carbon monoxide detector. Reach out to the host with any questions.", "Unavailable: HeatingHeating"], "provided": ["Hair dryer", "Shampoo", "Conditioner", "Body soap", "Hot water", "Bed linens", "Room-darkening shades", "TV", "Air conditioning", "Indoor fireplace", "Ceiling fan", "Smoke alarm", "Fire extinguisher", "First aid kit", "Wifi", "KitchenSpace where guests can cook their own meals", "Refrigerator", "Microwave", "Cooking basicsPots and pans, oil, salt and pepper", "Dishes and silverwareBowls, chopsticks, plates, cups, etc.", "Stove", "Oven", "Coffee maker", "Wine glasses", "Baking sheet", "Barbecue utensilsGrill, charcoal, bamboo skewers/iron skewers, etc.", "Dining table", "Coffee", "WaterfrontRight next to a body of water", "Private patio or balcony", "BackyardAn open space on the property usually covered in grass", "Fire pit", "Outdoor dining area", "BBQ grill", "Sun loungers", "Free parking on premises", "Self check-in", "Lockbox"]}, "description": "Welcome to the Funky Cypress. The cozy A-Frame Cabin on the Satilla River with Private Dock. Escape to a unique and tranquil getaway on the Satilla River. Our A-Frame cabin offers an idyllic retreat for nature lovers and adventurers alike. Catch and cook fish from the dock or launch a boat/kayak/float at the nearby public ramp . This riverfront oasis is conveniently located near Interstate 95, Red River Estate, The Hunter Barn, Georgia beaches, Okefenokee Swamp, & Laura Walker State Park.\\n\\nThe space\\nThis elevated A-Frame cabin sits directly on the Satilla River, and offers a private dock perfect for fishing or enjoying the river views. Bring your boat, kayak, or float to launch at the Warner's Landing Boat Ramp less than .5 miles away and float down to your private dock. After a day of fishing or river exploration unwind on your riverfront porch, gather around the bonfire pit for s'mores, or snuggle in on the sofa and stream your favorite movie. Concrete pad under home with fans offers additional covered outdoor living space. \\n\\nUpstairs offers a bedroom with queen bed that adjoins the second bedroom. Your second bedroom is equipped with a queen bed, twin bed, and access to your upper porch. All bedrooms are located atop a spiral stairway and adjoin.\\n\\nWhether you seek a romantic retreat or an extended getaway, our A-Frame cabin promises the perfect blend of natures tranquility and modern comforts.\\n\\nGuest access\\nGuest will have full access to the property and the dock. Gates will be unlocked for guests. There is a lockbox on property for guest entry. Guests will be given their code the morning of check-in.\\n\\nOther things to note\\nHome is located down a rural dirt road that is county maintained.\\n\\nTo stay at this property guest will have to climb steps, and the bedrooms are accessible by a spiral staircase. \\n\\nTV's are internet equipped, and all streaming must be done with your personal log in information. \\n\\nThere is a charcoal grill on property. Guests will need to bring charcoal/lighter fluid. \\n\\nWhen the river begins to reach \\"flood\\" stages around 13 feet the property will need to be accessed by truck or SUV, due to a portion of the road that holds water. If at the time of your booking the river has reached \\"flood\\" stage we will let you know in advance. \\n\\nNo Pets and No Smoking.", "availability": {"seasonality": null, "occupancyRate": null}, "propertyType": "Entire cabin", "guestCapacity": 5}	https://www.airbnb.com/rooms/1160318843758080690?category_tag=Tag%3A5348&search_mode=flex_destinations_search&adults=1&check_in=2025-03-01&check_out=2025-03-06&children=0&infants=0&pets=0&photo_id=1910799111&source_impression_id=p3_1740347063_P363pMMzqtvnJ8w-&previous_page_section_name=1000&federated_search_id=8f456ca9-458b-4687-9a7f-84e0e7d9c602	2025-02-23 21:46:54.926955
ae7451bc-61d4-4e57-b634-2924a7edda21	0d1955bc-f3f9-4460-be33-d9a1d176f91d	{"seo": {"keywordsInTitle": [], "keywordsInDescription": []}, "title": "Designer Studio| Close to Wynwood| SuperHost!", "photos": {"captions": [], "photoCount": 20}, "pricing": {"cleaningFee": null, "minimumStay": null, "nightlyRate": 0, "dynamicPricing": null}, "reviews": {"rating": null, "reviewCount": null, "recentReviews": ["Excellent place to stay. Clean unit with all relevant appliances. Easy access to main roads. Just we might hear noise from vehicles passing through adjacent streets, so consider earplug for light sleepers. That being said, I highly recommend this place and I will probably go back there to enjoy Miami.", "James welcomed me impeccably, even at the last minute, with great attention and care. He was extremely attentive, helpful, and did everything to make me feel welcome. The space was spotlessly clean, very comfortable, and felt completely safe. James truly demonstrated what it means to be an outstanding host. I highly recommend him!", "Our stay at Jason and Dave’s studio was wonderful! My wife and I enjoyed the space. It was stylish, clean, and thoughtfully designed, creating the perfect blend of comfort and modern charm. The location is ideal — peaceful and safe, yet close to beaches, restaurants, and all the excitement Miami offers around 14-20 mins.The studio had all the essentials we needed, from soft towels to quality toiletries, and the bed was incredibly comfortable for a great night’s sleep. Fast Wi-Fi made it easy to work when needed especially someone who works from home.Jason and Dave were fantastic hosts — responsive, helpful, and genuinely welcoming. Their attention to detail and hospitality made us feel at home.If you’re looking for a beautiful, well-located place to stay in Miami, this studio is a fantastic choice. We’d absolutely stay again!", "Jason and Dave are great host! They are very attentive and whenever we had a problem they fixed immediately they either gave us a two day voucher for the stay due to the issue. As far as the studio, it looks bigger in the pictures, but in person, it is a studio, literally so it’s on the smaller side, but it was enough room for our short stay and the bed was very comfortable. The only thing I would say is not a plus is the parking because it’s parallel parking making it very hard for me and my husband to get into our little spot but overall we had a great stay and we definitely will come back again! Thanks Dave! 🙏🏾❤️", "Jason and Dave were outstanding hosts from start to finish. Their clear and responsive communication made me feel welcome right away—they checked in regularly to see if I needed anything. After my first night, I requested a few adjustments to enhance my comfort, and they acted quickly by sending their maintenance team within hours. I truly appreciated their prompt and thoughtful service.The unit itself is charming and fully equipped for a short stay. Although I hadn’t noticed initially, the full-size bed turned out to be wonderfully comfortable for both my girlfriend and me. The location couldn’t be better either—perfect for my work trip to Miami. Most of my activities were centered around Wynwood and Midtown, and we even made a quick trip to Miami Beach with ease.Overall, I highly recommend staying here if you’re looking for a hassle-free and pleasant experience.", "We spend a week at Jason and Dave’s place,  we felt like we were at home. There is a pizza place just two minutes walk and the area is very peaceful. Jason and Dave’s are very polite and attentive. Highly recommended, we really enjoy our stay."]}, "success": true, "location": "Miami, Florida", "roomType": null, "amenities": {"missing": ["Unavailable: Private entrancePrivate entrance", "Unavailable: HeatingHeating"], "provided": ["Hair dryer", "Shampoo", "Body soap", "Washer", "Dryer", "EssentialsTowels, bed sheets, soap, and toilet paper", "Bed linens", "Iron", "TV with standard cable", "Air conditioning", "Ceiling fan", "Smoke alarm", "Carbon monoxide alarm", "Wifi", "KitchenSpace where guests can cook their own meals", "Refrigerator", "Microwave", "Dishes and silverwareBowls, chopsticks, plates, cups, etc.", "Freezer", "Dishwasher", "Stove", "Oven", "Coffee maker", "Free parking on premises", "Self check-in", "Smart lock"]}, "description": "Welcome!\\n\\n\\n\\nLOCATION -  Location location location. My Studio is located in the Upper East neighborhood directly across from Ironside ( A Sustainable Super Block Community);  Situated just blocks away from the hip Mimo district and a short drive to Wynwood, El Portal, Little Haiti, and Miami Shores. Explore the Design District, Downtown Miami, and the beautiful beaches all within a 10-15 minute drive.\\n\\nThe space\\nWHAT MY GUESTS LOVE: \\n\\nTHE STUDIO - My studio is located in a restored six-unit building where you will enjoy classic features such as exposed wood beams, A fully equipped kitchen, designer furnishing, and a Queen Size bed perfect for up to (2) guests!  \\n\\nKITCHEN - Prepare your meals in our full kitchen\\n\\nFREE PARKING - There is free parking available on-site for one car - (No trucks or Big Vehicle The parking can only accommodate a sedan or similar type of car)\\n\\nCLOSE TO EVERYTHING: BEST OF BOTH WORLDS- My building is just minutes from Wynwood, the Design District, the beaches, the airport, the port, Downtown etc. Enjoy being minutes from it all and retiring to your quiet and relaxing unit after a long day.\\n\\n\\n\\n\\n\\nWhat you should think about:\\n\\nROAD - Our property is close to the road and train tracks, sounds of vehicles or a train passing by may be unavoidable\\n\\n\\n\\nIMPORTANT INFORMATION FOR YOUR STAY \\n\\n\\n\\nTo ensure a seamless check-in experience and maintain the security of our property, please review the following:\\n\\nSecure Registration & Verification: After booking, you will receive instructions to complete a quick identity verification through our Secure Registration & Verification process via Charge Automation.\\n\\nBooking Policies:\\n\\nLOCAL - Local guests or guests with a local number (starting with 786, 305, or 954) must contact the host before booking.\\n\\nThe person booking must be the one staying. Third-party bookings are not allowed.\\n\\nThe name on the reservation must match the government-issued ID provided during the verification process.\\n\\nAge Requirement: Guests must be 25 years or older to book this property\\n\\nOther things to note\\n-  I will be happy to assist you whenever you need us. Rest assured, we will take excellent care of you during your stay.\\n\\n\\n\\n- We ask that guests be considerate of noise levels. At all times, loud music is prohibited, and quiet hours are strictly enforced.\\n\\n\\n\\n- Daily housekeeping is not included. However, we are delighted to send towels and toiletries as needed.\\n\\n\\n\\n- Please be aware that parties and the use of illegal substances are prohibited and will result in a $250 fine. We also require you to report any missing or damaged belongings within the first 24 hours of your stay.\\n\\n\\n\\n- Tropical insects are endemic to our area. We have regular preventative pest control, but it's possible that insects might sneak inside. Please help us keep them out by keeping windows & doors closed and store food appropriately. \\n\\n\\n\\n- There are security cameras in the exterior spaces of the building.\\n\\n\\n\\n\\n\\nREMINDER BEFORE BOOKING: \\n\\n- You must complete SUPERHOG verification in order to receive check in details \\n\\n- Only 25 years old and above are allowed to book and stay \\n\\n- The one who book is the only allowed to check in\\n\\n- Booking name must match the name on the ID that will be used in SUPERHOG form\\n\\n- Locals are currently not allowed to stay", "availability": {"seasonality": null, "occupancyRate": null}, "propertyType": "Entire condo", "guestCapacity": 2}	https://www.airbnb.com/rooms/730328245606611275?adults=1&category_tag=Tag%3A8102&enable_m3_private_room=true&photo_id=2066714297&search_mode=flex_destinations_search&source_impression_id=p3_1737841638_P3UmDzG4ytT4xB9R&previous_page_section_name=1000&federated_search_id=eeb25c2b-0508-4adf-9022-8a0189a220c3&guests=1&check_in=2025-02-01	2025-03-08 17:11:30.095169
\.


--
-- Data for Name: stripe_sessions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.stripe_sessions (id, user_id, plan, session_id, customer_id, subscription_id, is_verified) FROM stdin;
1	d1849754-b996-46c0-8274-09f6ed44fda4	plan2	cs_live_a1MdRUw7nxlJAfFBVnoBx9y7RmfHeA4iPGWAVZgxQZ3RdGShIe3WsatpY0	\N	\N	f
\.


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.schema_migrations (version, inserted_at) FROM stdin;
20211116024918	2025-01-24 00:00:18
20211116045059	2025-01-24 00:00:18
20211116050929	2025-01-24 00:00:18
20211116051442	2025-01-24 00:00:18
20211116212300	2025-01-24 00:00:18
20211116213355	2025-01-24 00:00:18
20211116213934	2025-01-24 00:00:18
20211116214523	2025-01-24 00:00:18
20211122062447	2025-01-24 00:00:18
20211124070109	2025-01-24 00:00:18
20211202204204	2025-01-24 00:00:18
20211202204605	2025-01-24 00:00:18
20211210212804	2025-01-24 00:00:18
20211228014915	2025-01-24 00:00:18
20220107221237	2025-01-24 00:00:18
20220228202821	2025-01-24 00:00:18
20220312004840	2025-01-24 00:00:18
20220603231003	2025-01-24 00:00:18
20220603232444	2025-01-24 00:00:18
20220615214548	2025-01-24 00:00:18
20220712093339	2025-01-24 00:00:18
20220908172859	2025-01-24 00:00:18
20220916233421	2025-01-24 00:00:18
20230119133233	2025-01-24 00:00:18
20230128025114	2025-01-24 00:00:18
20230128025212	2025-01-24 00:00:18
20230227211149	2025-01-24 00:00:18
20230228184745	2025-01-24 00:00:18
20230308225145	2025-01-24 00:00:18
20230328144023	2025-01-24 00:00:18
20231018144023	2025-01-24 00:00:18
20231204144023	2025-01-24 00:00:18
20231204144024	2025-01-24 00:00:18
20231204144025	2025-01-24 00:00:18
20240108234812	2025-01-24 00:00:18
20240109165339	2025-01-24 00:00:18
20240227174441	2025-01-24 00:00:18
20240311171622	2025-01-24 00:00:18
20240321100241	2025-01-24 00:00:18
20240401105812	2025-01-24 00:00:19
20240418121054	2025-01-24 00:00:19
20240523004032	2025-01-24 00:00:19
20240618124746	2025-01-24 00:00:19
20240801235015	2025-01-24 00:00:19
20240805133720	2025-01-24 00:00:19
20240827160934	2025-01-24 00:00:19
20240919163303	2025-01-24 00:00:19
20240919163305	2025-01-24 00:00:19
20241019105805	2025-01-24 00:00:19
20241030150047	2025-01-24 00:00:19
20241108114728	2025-01-24 00:00:19
20241121104152	2025-01-24 00:00:19
20241130184212	2025-01-24 00:00:19
20241220035512	2025-01-24 00:00:19
20241220123912	2025-01-24 00:00:19
20241224161212	2025-01-24 00:00:19
20250107150512	2025-01-24 00:00:19
20250110162412	2025-01-24 00:00:19
20250123174212	2025-01-24 13:38:18
20250128220012	2025-01-29 17:10:07
\.


--
-- Data for Name: subscription; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.subscription (id, subscription_id, entity, filters, claims, created_at) FROM stdin;
\.


--
-- Data for Name: buckets; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.buckets (id, name, owner, created_at, updated_at, public, avif_autodetection, file_size_limit, allowed_mime_types, owner_id) FROM stdin;
\.


--
-- Data for Name: migrations; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.migrations (id, name, hash, executed_at) FROM stdin;
0	create-migrations-table	e18db593bcde2aca2a408c4d1100f6abba2195df	2025-01-20 00:18:48.644838
1	initialmigration	6ab16121fbaa08bbd11b712d05f358f9b555d777	2025-01-20 00:18:48.662369
2	storage-schema	5c7968fd083fcea04050c1b7f6253c9771b99011	2025-01-20 00:18:48.677927
3	pathtoken-column	2cb1b0004b817b29d5b0a971af16bafeede4b70d	2025-01-20 00:18:48.70922
4	add-migrations-rls	427c5b63fe1c5937495d9c635c263ee7a5905058	2025-01-20 00:18:48.740823
5	add-size-functions	79e081a1455b63666c1294a440f8ad4b1e6a7f84	2025-01-20 00:18:48.753972
6	change-column-name-in-get-size	f93f62afdf6613ee5e7e815b30d02dc990201044	2025-01-20 00:18:48.767318
7	add-rls-to-buckets	e7e7f86adbc51049f341dfe8d30256c1abca17aa	2025-01-20 00:18:48.778682
8	add-public-to-buckets	fd670db39ed65f9d08b01db09d6202503ca2bab3	2025-01-20 00:18:48.79459
9	fix-search-function	3a0af29f42e35a4d101c259ed955b67e1bee6825	2025-01-20 00:18:48.805681
10	search-files-search-function	68dc14822daad0ffac3746a502234f486182ef6e	2025-01-20 00:18:48.815706
11	add-trigger-to-auto-update-updated_at-column	7425bdb14366d1739fa8a18c83100636d74dcaa2	2025-01-20 00:18:48.826899
12	add-automatic-avif-detection-flag	8e92e1266eb29518b6a4c5313ab8f29dd0d08df9	2025-01-20 00:18:48.841279
13	add-bucket-custom-limits	cce962054138135cd9a8c4bcd531598684b25e7d	2025-01-20 00:18:48.853756
14	use-bytes-for-max-size	941c41b346f9802b411f06f30e972ad4744dad27	2025-01-20 00:18:48.868234
15	add-can-insert-object-function	934146bc38ead475f4ef4b555c524ee5d66799e5	2025-01-20 00:18:48.914733
16	add-version	76debf38d3fd07dcfc747ca49096457d95b1221b	2025-01-20 00:18:48.92721
17	drop-owner-foreign-key	f1cbb288f1b7a4c1eb8c38504b80ae2a0153d101	2025-01-20 00:18:48.939624
18	add_owner_id_column_deprecate_owner	e7a511b379110b08e2f214be852c35414749fe66	2025-01-20 00:18:48.958547
19	alter-default-value-objects-id	02e5e22a78626187e00d173dc45f58fa66a4f043	2025-01-20 00:18:48.970973
20	list-objects-with-delimiter	cd694ae708e51ba82bf012bba00caf4f3b6393b7	2025-01-20 00:18:48.987772
21	s3-multipart-uploads	8c804d4a566c40cd1e4cc5b3725a664a9303657f	2025-01-20 00:18:49.007495
22	s3-multipart-uploads-big-ints	9737dc258d2397953c9953d9b86920b8be0cdb73	2025-01-20 00:18:49.043389
23	optimize-search-function	9d7e604cddc4b56a5422dc68c9313f4a1b6f132c	2025-01-20 00:18:49.081454
24	operation-function	8312e37c2bf9e76bbe841aa5fda889206d2bf8aa	2025-01-20 00:18:49.098731
26	objects-prefixes	ef3f7871121cdc47a65308e6702519e853422ae2	2025-03-26 23:21:49.84881
27	search-v2	33b8f2a7ae53105f028e13e9fcda9dc4f356b4a2	2025-03-26 23:21:50.040338
28	object-bucket-name-sorting	8f385d71c72f7b9f6388e22f6e393e3b78bf8617	2025-03-26 23:21:50.054132
29	create-prefixes	8416491709bbd2b9f849405d5a9584b4f78509fb	2025-03-26 23:21:50.062039
30	update-object-levels	f5899485e3c9d05891d177787d10c8cb47bae08a	2025-03-26 23:21:50.06653
31	objects-level-index	33f1fef7ec7fea08bb892222f4f0f5d79bab5eb8	2025-03-26 23:21:50.076915
32	backward-compatible-index-on-objects	2d51eeb437a96868b36fcdfb1ddefdf13bef1647	2025-03-26 23:21:50.087952
33	backward-compatible-index-on-prefixes	fe473390e1b8c407434c0e470655945b110507bf	2025-03-26 23:21:50.099289
34	optimize-search-function-v1	82b0e469a00e8ebce495e29bfa70a0797f7ebd2c	2025-03-26 23:21:50.101697
35	add-insert-trigger-prefixes	63bb9fd05deb3dc5e9fa66c83e82b152f0caf589	2025-03-26 23:21:50.108706
25	custom-metadata	67eb93b7e8d401cafcdc97f9ac779e71a79bfe03	2025-01-20 00:18:49.111603
\.


--
-- Data for Name: objects; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.objects (id, bucket_id, name, owner, created_at, updated_at, last_accessed_at, metadata, version, owner_id, user_metadata, level) FROM stdin;
\.


--
-- Data for Name: prefixes; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.prefixes (bucket_id, name, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: s3_multipart_uploads; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.s3_multipart_uploads (id, in_progress_size, upload_signature, bucket_id, key, version, owner_id, created_at, user_metadata) FROM stdin;
\.


--
-- Data for Name: s3_multipart_uploads_parts; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.s3_multipart_uploads_parts (id, upload_id, size, part_number, bucket_id, key, etag, owner_id, version, created_at) FROM stdin;
\.


--
-- Data for Name: secrets; Type: TABLE DATA; Schema: vault; Owner: supabase_admin
--

COPY vault.secrets (id, name, description, secret, key_id, nonce, created_at, updated_at) FROM stdin;
\.


--
-- Name: refresh_tokens_id_seq; Type: SEQUENCE SET; Schema: auth; Owner: supabase_auth_admin
--

SELECT pg_catalog.setval('auth.refresh_tokens_id_seq', 87, true);


--
-- Name: key_key_id_seq; Type: SEQUENCE SET; Schema: pgsodium; Owner: supabase_admin
--

SELECT pg_catalog.setval('pgsodium.key_key_id_seq', 1, false);


--
-- Name: cohost_conversations_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.cohost_conversations_id_seq', 4, true);


--
-- Name: emails_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.emails_id_seq', 22, true);


--
-- Name: stripe_sessions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.stripe_sessions_id_seq', 1, true);


--
-- Name: subscription_id_seq; Type: SEQUENCE SET; Schema: realtime; Owner: supabase_admin
--

SELECT pg_catalog.setval('realtime.subscription_id_seq', 1, false);


--
-- Name: mfa_amr_claims amr_id_pk; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT amr_id_pk PRIMARY KEY (id);


--
-- Name: audit_log_entries audit_log_entries_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.audit_log_entries
    ADD CONSTRAINT audit_log_entries_pkey PRIMARY KEY (id);


--
-- Name: flow_state flow_state_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.flow_state
    ADD CONSTRAINT flow_state_pkey PRIMARY KEY (id);


--
-- Name: identities identities_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_pkey PRIMARY KEY (id);


--
-- Name: identities identities_provider_id_provider_unique; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_provider_id_provider_unique UNIQUE (provider_id, provider);


--
-- Name: instances instances_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.instances
    ADD CONSTRAINT instances_pkey PRIMARY KEY (id);


--
-- Name: mfa_amr_claims mfa_amr_claims_session_id_authentication_method_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT mfa_amr_claims_session_id_authentication_method_pkey UNIQUE (session_id, authentication_method);


--
-- Name: mfa_challenges mfa_challenges_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_challenges
    ADD CONSTRAINT mfa_challenges_pkey PRIMARY KEY (id);


--
-- Name: mfa_factors mfa_factors_last_challenged_at_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_factors
    ADD CONSTRAINT mfa_factors_last_challenged_at_key UNIQUE (last_challenged_at);


--
-- Name: mfa_factors mfa_factors_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_factors
    ADD CONSTRAINT mfa_factors_pkey PRIMARY KEY (id);


--
-- Name: one_time_tokens one_time_tokens_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.one_time_tokens
    ADD CONSTRAINT one_time_tokens_pkey PRIMARY KEY (id);


--
-- Name: refresh_tokens refresh_tokens_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_pkey PRIMARY KEY (id);


--
-- Name: refresh_tokens refresh_tokens_token_unique; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_token_unique UNIQUE (token);


--
-- Name: saml_providers saml_providers_entity_id_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_entity_id_key UNIQUE (entity_id);


--
-- Name: saml_providers saml_providers_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_pkey PRIMARY KEY (id);


--
-- Name: saml_relay_states saml_relay_states_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_pkey PRIMARY KEY (id);


--
-- Name: schema_migrations schema_migrations_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.schema_migrations
    ADD CONSTRAINT schema_migrations_pkey PRIMARY KEY (version);


--
-- Name: sessions sessions_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sessions
    ADD CONSTRAINT sessions_pkey PRIMARY KEY (id);


--
-- Name: sso_domains sso_domains_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_domains
    ADD CONSTRAINT sso_domains_pkey PRIMARY KEY (id);


--
-- Name: sso_providers sso_providers_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_providers
    ADD CONSTRAINT sso_providers_pkey PRIMARY KEY (id);


--
-- Name: users users_phone_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.users
    ADD CONSTRAINT users_phone_key UNIQUE (phone);


--
-- Name: users users_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: emails emails_email_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.emails
    ADD CONSTRAINT emails_email_key UNIQUE (email);


--
-- Name: listings listings_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.listings
    ADD CONSTRAINT listings_pkey PRIMARY KEY (id);


--
-- Name: stripe_sessions stripe_sessions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stripe_sessions
    ADD CONSTRAINT stripe_sessions_pkey PRIMARY KEY (id);


--
-- Name: messages messages_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER TABLE ONLY realtime.messages
    ADD CONSTRAINT messages_pkey PRIMARY KEY (id, inserted_at);


--
-- Name: subscription pk_subscription; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.subscription
    ADD CONSTRAINT pk_subscription PRIMARY KEY (id);


--
-- Name: schema_migrations schema_migrations_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.schema_migrations
    ADD CONSTRAINT schema_migrations_pkey PRIMARY KEY (version);


--
-- Name: buckets buckets_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.buckets
    ADD CONSTRAINT buckets_pkey PRIMARY KEY (id);


--
-- Name: migrations migrations_name_key; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.migrations
    ADD CONSTRAINT migrations_name_key UNIQUE (name);


--
-- Name: migrations migrations_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.migrations
    ADD CONSTRAINT migrations_pkey PRIMARY KEY (id);


--
-- Name: objects objects_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.objects
    ADD CONSTRAINT objects_pkey PRIMARY KEY (id);


--
-- Name: prefixes prefixes_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.prefixes
    ADD CONSTRAINT prefixes_pkey PRIMARY KEY (bucket_id, level, name);


--
-- Name: s3_multipart_uploads_parts s3_multipart_uploads_parts_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads_parts
    ADD CONSTRAINT s3_multipart_uploads_parts_pkey PRIMARY KEY (id);


--
-- Name: s3_multipart_uploads s3_multipart_uploads_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads
    ADD CONSTRAINT s3_multipart_uploads_pkey PRIMARY KEY (id);


--
-- Name: audit_logs_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX audit_logs_instance_id_idx ON auth.audit_log_entries USING btree (instance_id);


--
-- Name: confirmation_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX confirmation_token_idx ON auth.users USING btree (confirmation_token) WHERE ((confirmation_token)::text !~ '^[0-9 ]*$'::text);


--
-- Name: email_change_token_current_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX email_change_token_current_idx ON auth.users USING btree (email_change_token_current) WHERE ((email_change_token_current)::text !~ '^[0-9 ]*$'::text);


--
-- Name: email_change_token_new_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX email_change_token_new_idx ON auth.users USING btree (email_change_token_new) WHERE ((email_change_token_new)::text !~ '^[0-9 ]*$'::text);


--
-- Name: factor_id_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX factor_id_created_at_idx ON auth.mfa_factors USING btree (user_id, created_at);


--
-- Name: flow_state_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX flow_state_created_at_idx ON auth.flow_state USING btree (created_at DESC);


--
-- Name: identities_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX identities_email_idx ON auth.identities USING btree (email text_pattern_ops);


--
-- Name: INDEX identities_email_idx; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON INDEX auth.identities_email_idx IS 'Auth: Ensures indexed queries on the email column';


--
-- Name: identities_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX identities_user_id_idx ON auth.identities USING btree (user_id);


--
-- Name: idx_auth_code; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX idx_auth_code ON auth.flow_state USING btree (auth_code);


--
-- Name: idx_user_id_auth_method; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX idx_user_id_auth_method ON auth.flow_state USING btree (user_id, authentication_method);


--
-- Name: mfa_challenge_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX mfa_challenge_created_at_idx ON auth.mfa_challenges USING btree (created_at DESC);


--
-- Name: mfa_factors_user_friendly_name_unique; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX mfa_factors_user_friendly_name_unique ON auth.mfa_factors USING btree (friendly_name, user_id) WHERE (TRIM(BOTH FROM friendly_name) <> ''::text);


--
-- Name: mfa_factors_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX mfa_factors_user_id_idx ON auth.mfa_factors USING btree (user_id);


--
-- Name: one_time_tokens_relates_to_hash_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX one_time_tokens_relates_to_hash_idx ON auth.one_time_tokens USING hash (relates_to);


--
-- Name: one_time_tokens_token_hash_hash_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX one_time_tokens_token_hash_hash_idx ON auth.one_time_tokens USING hash (token_hash);


--
-- Name: one_time_tokens_user_id_token_type_key; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX one_time_tokens_user_id_token_type_key ON auth.one_time_tokens USING btree (user_id, token_type);


--
-- Name: reauthentication_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX reauthentication_token_idx ON auth.users USING btree (reauthentication_token) WHERE ((reauthentication_token)::text !~ '^[0-9 ]*$'::text);


--
-- Name: recovery_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX recovery_token_idx ON auth.users USING btree (recovery_token) WHERE ((recovery_token)::text !~ '^[0-9 ]*$'::text);


--
-- Name: refresh_tokens_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_instance_id_idx ON auth.refresh_tokens USING btree (instance_id);


--
-- Name: refresh_tokens_instance_id_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_instance_id_user_id_idx ON auth.refresh_tokens USING btree (instance_id, user_id);


--
-- Name: refresh_tokens_parent_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_parent_idx ON auth.refresh_tokens USING btree (parent);


--
-- Name: refresh_tokens_session_id_revoked_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_session_id_revoked_idx ON auth.refresh_tokens USING btree (session_id, revoked);


--
-- Name: refresh_tokens_updated_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_updated_at_idx ON auth.refresh_tokens USING btree (updated_at DESC);


--
-- Name: saml_providers_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_providers_sso_provider_id_idx ON auth.saml_providers USING btree (sso_provider_id);


--
-- Name: saml_relay_states_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_created_at_idx ON auth.saml_relay_states USING btree (created_at DESC);


--
-- Name: saml_relay_states_for_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_for_email_idx ON auth.saml_relay_states USING btree (for_email);


--
-- Name: saml_relay_states_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_sso_provider_id_idx ON auth.saml_relay_states USING btree (sso_provider_id);


--
-- Name: sessions_not_after_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sessions_not_after_idx ON auth.sessions USING btree (not_after DESC);


--
-- Name: sessions_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sessions_user_id_idx ON auth.sessions USING btree (user_id);


--
-- Name: sso_domains_domain_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX sso_domains_domain_idx ON auth.sso_domains USING btree (lower(domain));


--
-- Name: sso_domains_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sso_domains_sso_provider_id_idx ON auth.sso_domains USING btree (sso_provider_id);


--
-- Name: sso_providers_resource_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX sso_providers_resource_id_idx ON auth.sso_providers USING btree (lower(resource_id));


--
-- Name: unique_phone_factor_per_user; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX unique_phone_factor_per_user ON auth.mfa_factors USING btree (user_id, phone);


--
-- Name: user_id_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX user_id_created_at_idx ON auth.sessions USING btree (user_id, created_at);


--
-- Name: users_email_partial_key; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX users_email_partial_key ON auth.users USING btree (email) WHERE (is_sso_user = false);


--
-- Name: INDEX users_email_partial_key; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON INDEX auth.users_email_partial_key IS 'Auth: A partial unique index that applies only when is_sso_user is false';


--
-- Name: users_instance_id_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_instance_id_email_idx ON auth.users USING btree (instance_id, lower((email)::text));


--
-- Name: users_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_instance_id_idx ON auth.users USING btree (instance_id);


--
-- Name: users_is_anonymous_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_is_anonymous_idx ON auth.users USING btree (is_anonymous);


--
-- Name: unique_user_listing; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX unique_user_listing ON public.listings USING btree (user_id, url);


--
-- Name: ix_realtime_subscription_entity; Type: INDEX; Schema: realtime; Owner: supabase_admin
--

CREATE INDEX ix_realtime_subscription_entity ON realtime.subscription USING btree (entity);


--
-- Name: subscription_subscription_id_entity_filters_key; Type: INDEX; Schema: realtime; Owner: supabase_admin
--

CREATE UNIQUE INDEX subscription_subscription_id_entity_filters_key ON realtime.subscription USING btree (subscription_id, entity, filters);


--
-- Name: bname; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE UNIQUE INDEX bname ON storage.buckets USING btree (name);


--
-- Name: bucketid_objname; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE UNIQUE INDEX bucketid_objname ON storage.objects USING btree (bucket_id, name);


--
-- Name: idx_multipart_uploads_list; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX idx_multipart_uploads_list ON storage.s3_multipart_uploads USING btree (bucket_id, key, created_at);


--
-- Name: idx_name_bucket_unique; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE UNIQUE INDEX idx_name_bucket_unique ON storage.objects USING btree (name COLLATE "C", bucket_id);


--
-- Name: idx_objects_bucket_id_name; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX idx_objects_bucket_id_name ON storage.objects USING btree (bucket_id, name COLLATE "C");


--
-- Name: idx_objects_lower_name; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX idx_objects_lower_name ON storage.objects USING btree ((path_tokens[level]), lower(name) text_pattern_ops, bucket_id, level);


--
-- Name: idx_prefixes_lower_name; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX idx_prefixes_lower_name ON storage.prefixes USING btree (bucket_id, level, ((string_to_array(name, '/'::text))[level]), lower(name) text_pattern_ops);


--
-- Name: name_prefix_search; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX name_prefix_search ON storage.objects USING btree (name text_pattern_ops);


--
-- Name: objects_bucket_id_level_idx; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE UNIQUE INDEX objects_bucket_id_level_idx ON storage.objects USING btree (bucket_id, level, name COLLATE "C");


--
-- Name: subscription tr_check_filters; Type: TRIGGER; Schema: realtime; Owner: supabase_admin
--

CREATE TRIGGER tr_check_filters BEFORE INSERT OR UPDATE ON realtime.subscription FOR EACH ROW EXECUTE FUNCTION realtime.subscription_check_filters();


--
-- Name: objects objects_delete_delete_prefix; Type: TRIGGER; Schema: storage; Owner: supabase_storage_admin
--

CREATE TRIGGER objects_delete_delete_prefix AFTER DELETE ON storage.objects FOR EACH ROW EXECUTE FUNCTION storage.delete_prefix_hierarchy_trigger();


--
-- Name: objects objects_insert_create_prefix; Type: TRIGGER; Schema: storage; Owner: supabase_storage_admin
--

CREATE TRIGGER objects_insert_create_prefix BEFORE INSERT ON storage.objects FOR EACH ROW EXECUTE FUNCTION storage.objects_insert_prefix_trigger();


--
-- Name: objects objects_update_create_prefix; Type: TRIGGER; Schema: storage; Owner: supabase_storage_admin
--

CREATE TRIGGER objects_update_create_prefix BEFORE UPDATE ON storage.objects FOR EACH ROW WHEN ((new.name <> old.name)) EXECUTE FUNCTION storage.objects_insert_prefix_trigger();


--
-- Name: prefixes prefixes_create_hierarchy; Type: TRIGGER; Schema: storage; Owner: supabase_storage_admin
--

CREATE TRIGGER prefixes_create_hierarchy BEFORE INSERT ON storage.prefixes FOR EACH ROW WHEN ((pg_trigger_depth() < 1)) EXECUTE FUNCTION storage.prefixes_insert_trigger();


--
-- Name: prefixes prefixes_delete_hierarchy; Type: TRIGGER; Schema: storage; Owner: supabase_storage_admin
--

CREATE TRIGGER prefixes_delete_hierarchy AFTER DELETE ON storage.prefixes FOR EACH ROW EXECUTE FUNCTION storage.delete_prefix_hierarchy_trigger();


--
-- Name: objects update_objects_updated_at; Type: TRIGGER; Schema: storage; Owner: supabase_storage_admin
--

CREATE TRIGGER update_objects_updated_at BEFORE UPDATE ON storage.objects FOR EACH ROW EXECUTE FUNCTION storage.update_updated_at_column();


--
-- Name: identities identities_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: mfa_amr_claims mfa_amr_claims_session_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT mfa_amr_claims_session_id_fkey FOREIGN KEY (session_id) REFERENCES auth.sessions(id) ON DELETE CASCADE;


--
-- Name: mfa_challenges mfa_challenges_auth_factor_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_challenges
    ADD CONSTRAINT mfa_challenges_auth_factor_id_fkey FOREIGN KEY (factor_id) REFERENCES auth.mfa_factors(id) ON DELETE CASCADE;


--
-- Name: mfa_factors mfa_factors_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_factors
    ADD CONSTRAINT mfa_factors_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: one_time_tokens one_time_tokens_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.one_time_tokens
    ADD CONSTRAINT one_time_tokens_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: refresh_tokens refresh_tokens_session_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_session_id_fkey FOREIGN KEY (session_id) REFERENCES auth.sessions(id) ON DELETE CASCADE;


--
-- Name: saml_providers saml_providers_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- Name: saml_relay_states saml_relay_states_flow_state_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_flow_state_id_fkey FOREIGN KEY (flow_state_id) REFERENCES auth.flow_state(id) ON DELETE CASCADE;


--
-- Name: saml_relay_states saml_relay_states_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- Name: sessions sessions_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sessions
    ADD CONSTRAINT sessions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: sso_domains sso_domains_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_domains
    ADD CONSTRAINT sso_domains_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- Name: cohost_conversations cohost_conversations_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cohost_conversations
    ADD CONSTRAINT cohost_conversations_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id);


--
-- Name: listings listings_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.listings
    ADD CONSTRAINT listings_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: stripe_sessions stripe_sessions_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stripe_sessions
    ADD CONSTRAINT stripe_sessions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id);


--
-- Name: objects objects_bucketId_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.objects
    ADD CONSTRAINT "objects_bucketId_fkey" FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- Name: prefixes prefixes_bucketId_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.prefixes
    ADD CONSTRAINT "prefixes_bucketId_fkey" FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- Name: s3_multipart_uploads s3_multipart_uploads_bucket_id_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads
    ADD CONSTRAINT s3_multipart_uploads_bucket_id_fkey FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- Name: s3_multipart_uploads_parts s3_multipart_uploads_parts_bucket_id_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads_parts
    ADD CONSTRAINT s3_multipart_uploads_parts_bucket_id_fkey FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- Name: s3_multipart_uploads_parts s3_multipart_uploads_parts_upload_id_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads_parts
    ADD CONSTRAINT s3_multipart_uploads_parts_upload_id_fkey FOREIGN KEY (upload_id) REFERENCES storage.s3_multipart_uploads(id) ON DELETE CASCADE;


--
-- Name: audit_log_entries; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.audit_log_entries ENABLE ROW LEVEL SECURITY;

--
-- Name: flow_state; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.flow_state ENABLE ROW LEVEL SECURITY;

--
-- Name: identities; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.identities ENABLE ROW LEVEL SECURITY;

--
-- Name: instances; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.instances ENABLE ROW LEVEL SECURITY;

--
-- Name: mfa_amr_claims; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.mfa_amr_claims ENABLE ROW LEVEL SECURITY;

--
-- Name: mfa_challenges; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.mfa_challenges ENABLE ROW LEVEL SECURITY;

--
-- Name: mfa_factors; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.mfa_factors ENABLE ROW LEVEL SECURITY;

--
-- Name: one_time_tokens; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.one_time_tokens ENABLE ROW LEVEL SECURITY;

--
-- Name: refresh_tokens; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.refresh_tokens ENABLE ROW LEVEL SECURITY;

--
-- Name: saml_providers; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.saml_providers ENABLE ROW LEVEL SECURITY;

--
-- Name: saml_relay_states; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.saml_relay_states ENABLE ROW LEVEL SECURITY;

--
-- Name: schema_migrations; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.schema_migrations ENABLE ROW LEVEL SECURITY;

--
-- Name: sessions; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.sessions ENABLE ROW LEVEL SECURITY;

--
-- Name: sso_domains; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.sso_domains ENABLE ROW LEVEL SECURITY;

--
-- Name: sso_providers; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.sso_providers ENABLE ROW LEVEL SECURITY;

--
-- Name: users; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.users ENABLE ROW LEVEL SECURITY;

--
-- Name: messages; Type: ROW SECURITY; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER TABLE realtime.messages ENABLE ROW LEVEL SECURITY;

--
-- Name: buckets; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.buckets ENABLE ROW LEVEL SECURITY;

--
-- Name: migrations; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.migrations ENABLE ROW LEVEL SECURITY;

--
-- Name: objects; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.objects ENABLE ROW LEVEL SECURITY;

--
-- Name: prefixes; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.prefixes ENABLE ROW LEVEL SECURITY;

--
-- Name: s3_multipart_uploads; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.s3_multipart_uploads ENABLE ROW LEVEL SECURITY;

--
-- Name: s3_multipart_uploads_parts; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.s3_multipart_uploads_parts ENABLE ROW LEVEL SECURITY;

--
-- Name: supabase_realtime; Type: PUBLICATION; Schema: -; Owner: postgres
--

CREATE PUBLICATION supabase_realtime WITH (publish = 'insert, update, delete, truncate');


ALTER PUBLICATION supabase_realtime OWNER TO postgres;

--
-- Name: SCHEMA auth; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA auth TO anon;
GRANT USAGE ON SCHEMA auth TO authenticated;
GRANT USAGE ON SCHEMA auth TO service_role;
GRANT ALL ON SCHEMA auth TO supabase_auth_admin;
GRANT ALL ON SCHEMA auth TO dashboard_user;
GRANT ALL ON SCHEMA auth TO postgres;


--
-- Name: SCHEMA extensions; Type: ACL; Schema: -; Owner: postgres
--

GRANT USAGE ON SCHEMA extensions TO anon;
GRANT USAGE ON SCHEMA extensions TO authenticated;
GRANT USAGE ON SCHEMA extensions TO service_role;
GRANT ALL ON SCHEMA extensions TO dashboard_user;


--
-- Name: SCHEMA public; Type: ACL; Schema: -; Owner: pg_database_owner
--

GRANT USAGE ON SCHEMA public TO postgres;
GRANT USAGE ON SCHEMA public TO anon;
GRANT USAGE ON SCHEMA public TO authenticated;
GRANT USAGE ON SCHEMA public TO service_role;


--
-- Name: SCHEMA realtime; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA realtime TO postgres;
GRANT USAGE ON SCHEMA realtime TO anon;
GRANT USAGE ON SCHEMA realtime TO authenticated;
GRANT USAGE ON SCHEMA realtime TO service_role;
GRANT ALL ON SCHEMA realtime TO supabase_realtime_admin;


--
-- Name: SCHEMA storage; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT ALL ON SCHEMA storage TO postgres;
GRANT USAGE ON SCHEMA storage TO anon;
GRANT USAGE ON SCHEMA storage TO authenticated;
GRANT USAGE ON SCHEMA storage TO service_role;
GRANT ALL ON SCHEMA storage TO supabase_storage_admin;
GRANT ALL ON SCHEMA storage TO dashboard_user;


--
-- Name: FUNCTION email(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.email() TO dashboard_user;
GRANT ALL ON FUNCTION auth.email() TO postgres;


--
-- Name: FUNCTION jwt(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.jwt() TO postgres;
GRANT ALL ON FUNCTION auth.jwt() TO dashboard_user;


--
-- Name: FUNCTION role(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.role() TO dashboard_user;
GRANT ALL ON FUNCTION auth.role() TO postgres;


--
-- Name: FUNCTION uid(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.uid() TO dashboard_user;
GRANT ALL ON FUNCTION auth.uid() TO postgres;


--
-- Name: FUNCTION algorithm_sign(signables text, secret text, algorithm text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.algorithm_sign(signables text, secret text, algorithm text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.algorithm_sign(signables text, secret text, algorithm text) TO dashboard_user;


--
-- Name: FUNCTION armor(bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.armor(bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.armor(bytea) TO dashboard_user;


--
-- Name: FUNCTION armor(bytea, text[], text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.armor(bytea, text[], text[]) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.armor(bytea, text[], text[]) TO dashboard_user;


--
-- Name: FUNCTION crypt(text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.crypt(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.crypt(text, text) TO dashboard_user;


--
-- Name: FUNCTION dearmor(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.dearmor(text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.dearmor(text) TO dashboard_user;


--
-- Name: FUNCTION decrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.decrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.decrypt(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION decrypt_iv(bytea, bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.decrypt_iv(bytea, bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.decrypt_iv(bytea, bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION digest(bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.digest(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.digest(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION digest(text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.digest(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.digest(text, text) TO dashboard_user;


--
-- Name: FUNCTION encrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.encrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.encrypt(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION encrypt_iv(bytea, bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.encrypt_iv(bytea, bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.encrypt_iv(bytea, bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION gen_random_bytes(integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.gen_random_bytes(integer) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_random_bytes(integer) TO dashboard_user;


--
-- Name: FUNCTION gen_random_uuid(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.gen_random_uuid() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_random_uuid() TO dashboard_user;


--
-- Name: FUNCTION gen_salt(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.gen_salt(text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_salt(text) TO dashboard_user;


--
-- Name: FUNCTION gen_salt(text, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.gen_salt(text, integer) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_salt(text, integer) TO dashboard_user;


--
-- Name: FUNCTION grant_pg_cron_access(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.grant_pg_cron_access() FROM postgres;
GRANT ALL ON FUNCTION extensions.grant_pg_cron_access() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.grant_pg_cron_access() TO dashboard_user;


--
-- Name: FUNCTION grant_pg_graphql_access(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.grant_pg_graphql_access() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION grant_pg_net_access(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.grant_pg_net_access() FROM postgres;
GRANT ALL ON FUNCTION extensions.grant_pg_net_access() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.grant_pg_net_access() TO dashboard_user;


--
-- Name: FUNCTION hmac(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.hmac(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.hmac(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION hmac(text, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.hmac(text, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.hmac(text, text, text) TO dashboard_user;


--
-- Name: FUNCTION pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision) TO dashboard_user;


--
-- Name: FUNCTION pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone) TO dashboard_user;


--
-- Name: FUNCTION pg_stat_statements_reset(userid oid, dbid oid, queryid bigint); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pg_stat_statements_reset(userid oid, dbid oid, queryid bigint) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_reset(userid oid, dbid oid, queryid bigint) TO dashboard_user;


--
-- Name: FUNCTION pgp_armor_headers(text, OUT key text, OUT value text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_armor_headers(text, OUT key text, OUT value text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_armor_headers(text, OUT key text, OUT value text) TO dashboard_user;


--
-- Name: FUNCTION pgp_key_id(bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_key_id(bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_key_id(bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt(text, bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt(text, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt_bytea(bytea, bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt_bytea(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt(bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt(bytea, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt_bytea(bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt_bytea(bytea, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt(text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt(text, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt_bytea(bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt_bytea(bytea, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgrst_ddl_watch(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgrst_ddl_watch() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pgrst_drop_watch(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgrst_drop_watch() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION set_graphql_placeholder(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.set_graphql_placeholder() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION sign(payload json, secret text, algorithm text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.sign(payload json, secret text, algorithm text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.sign(payload json, secret text, algorithm text) TO dashboard_user;


--
-- Name: FUNCTION try_cast_double(inp text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.try_cast_double(inp text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.try_cast_double(inp text) TO dashboard_user;


--
-- Name: FUNCTION url_decode(data text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.url_decode(data text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.url_decode(data text) TO dashboard_user;


--
-- Name: FUNCTION url_encode(data bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.url_encode(data bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.url_encode(data bytea) TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v1(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_generate_v1() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1() TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v1mc(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_generate_v1mc() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1mc() TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v3(namespace uuid, name text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_generate_v3(namespace uuid, name text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v3(namespace uuid, name text) TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v4(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_generate_v4() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v4() TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v5(namespace uuid, name text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_generate_v5(namespace uuid, name text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v5(namespace uuid, name text) TO dashboard_user;


--
-- Name: FUNCTION uuid_nil(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_nil() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_nil() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_dns(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_ns_dns() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_dns() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_oid(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_ns_oid() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_oid() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_url(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_ns_url() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_url() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_x500(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_ns_x500() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_x500() TO dashboard_user;


--
-- Name: FUNCTION verify(token text, secret text, algorithm text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.verify(token text, secret text, algorithm text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.verify(token text, secret text, algorithm text) TO dashboard_user;


--
-- Name: FUNCTION graphql("operationName" text, query text, variables jsonb, extensions jsonb); Type: ACL; Schema: graphql_public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO postgres;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO anon;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO authenticated;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO service_role;


--
-- Name: FUNCTION get_auth(p_usename text); Type: ACL; Schema: pgbouncer; Owner: supabase_admin
--

REVOKE ALL ON FUNCTION pgbouncer.get_auth(p_usename text) FROM PUBLIC;
GRANT ALL ON FUNCTION pgbouncer.get_auth(p_usename text) TO pgbouncer;
GRANT ALL ON FUNCTION pgbouncer.get_auth(p_usename text) TO postgres;


--
-- Name: FUNCTION crypto_aead_det_decrypt(message bytea, additional bytea, key_uuid uuid, nonce bytea); Type: ACL; Schema: pgsodium; Owner: pgsodium_keymaker
--

GRANT ALL ON FUNCTION pgsodium.crypto_aead_det_decrypt(message bytea, additional bytea, key_uuid uuid, nonce bytea) TO service_role;


--
-- Name: FUNCTION crypto_aead_det_encrypt(message bytea, additional bytea, key_uuid uuid, nonce bytea); Type: ACL; Schema: pgsodium; Owner: pgsodium_keymaker
--

GRANT ALL ON FUNCTION pgsodium.crypto_aead_det_encrypt(message bytea, additional bytea, key_uuid uuid, nonce bytea) TO service_role;


--
-- Name: FUNCTION crypto_aead_det_keygen(); Type: ACL; Schema: pgsodium; Owner: supabase_admin
--

GRANT ALL ON FUNCTION pgsodium.crypto_aead_det_keygen() TO service_role;


--
-- Name: FUNCTION getuid(user_email text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.getuid(user_email text) TO anon;
GRANT ALL ON FUNCTION public.getuid(user_email text) TO authenticated;
GRANT ALL ON FUNCTION public.getuid(user_email text) TO service_role;


--
-- Name: FUNCTION apply_rls(wal jsonb, max_record_bytes integer); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO postgres;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO anon;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO authenticated;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO service_role;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO supabase_realtime_admin;


--
-- Name: FUNCTION broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text) TO postgres;
GRANT ALL ON FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text) TO dashboard_user;


--
-- Name: FUNCTION build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO postgres;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO anon;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO authenticated;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO service_role;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO supabase_realtime_admin;


--
-- Name: FUNCTION "cast"(val text, type_ regtype); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO postgres;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO dashboard_user;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO anon;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO authenticated;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO service_role;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO supabase_realtime_admin;


--
-- Name: FUNCTION check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO postgres;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO anon;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO authenticated;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO service_role;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO supabase_realtime_admin;


--
-- Name: FUNCTION is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO postgres;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO anon;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO authenticated;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO service_role;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO supabase_realtime_admin;


--
-- Name: FUNCTION list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO postgres;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO anon;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO authenticated;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO service_role;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO supabase_realtime_admin;


--
-- Name: FUNCTION quote_wal2json(entity regclass); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO postgres;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO anon;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO authenticated;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO service_role;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO supabase_realtime_admin;


--
-- Name: FUNCTION send(payload jsonb, event text, topic text, private boolean); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean) TO postgres;
GRANT ALL ON FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean) TO dashboard_user;


--
-- Name: FUNCTION subscription_check_filters(); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO postgres;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO dashboard_user;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO anon;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO authenticated;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO service_role;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO supabase_realtime_admin;


--
-- Name: FUNCTION to_regrole(role_name text); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO postgres;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO anon;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO authenticated;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO service_role;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO supabase_realtime_admin;


--
-- Name: FUNCTION topic(); Type: ACL; Schema: realtime; Owner: supabase_realtime_admin
--

GRANT ALL ON FUNCTION realtime.topic() TO postgres;
GRANT ALL ON FUNCTION realtime.topic() TO dashboard_user;


--
-- Name: FUNCTION add_prefixes(_bucket_id text, _name text); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.add_prefixes(_bucket_id text, _name text) TO postgres;


--
-- Name: FUNCTION can_insert_object(bucketid text, name text, owner uuid, metadata jsonb); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.can_insert_object(bucketid text, name text, owner uuid, metadata jsonb) TO postgres;


--
-- Name: FUNCTION delete_prefix(_bucket_id text, _name text); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.delete_prefix(_bucket_id text, _name text) TO postgres;


--
-- Name: FUNCTION delete_prefix_hierarchy_trigger(); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.delete_prefix_hierarchy_trigger() TO postgres;


--
-- Name: FUNCTION extension(name text); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.extension(name text) TO postgres;


--
-- Name: FUNCTION filename(name text); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.filename(name text) TO postgres;


--
-- Name: FUNCTION foldername(name text); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.foldername(name text) TO postgres;


--
-- Name: FUNCTION get_level(name text); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.get_level(name text) TO postgres;


--
-- Name: FUNCTION get_prefix(name text); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.get_prefix(name text) TO postgres;


--
-- Name: FUNCTION get_prefixes(name text); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.get_prefixes(name text) TO postgres;


--
-- Name: FUNCTION get_size_by_bucket(); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.get_size_by_bucket() TO postgres;


--
-- Name: FUNCTION list_multipart_uploads_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, next_key_token text, next_upload_token text); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.list_multipart_uploads_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, next_key_token text, next_upload_token text) TO postgres;


--
-- Name: FUNCTION list_objects_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, start_after text, next_token text); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.list_objects_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, start_after text, next_token text) TO postgres;


--
-- Name: FUNCTION objects_insert_prefix_trigger(); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.objects_insert_prefix_trigger() TO postgres;


--
-- Name: FUNCTION operation(); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.operation() TO postgres;


--
-- Name: FUNCTION prefixes_insert_trigger(); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.prefixes_insert_trigger() TO postgres;


--
-- Name: FUNCTION search(prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.search(prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text) TO postgres;


--
-- Name: FUNCTION search_legacy_v1(prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.search_legacy_v1(prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text) TO postgres;


--
-- Name: FUNCTION search_v1_optimised(prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.search_v1_optimised(prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text) TO postgres;


--
-- Name: FUNCTION search_v2(prefix text, bucket_name text, limits integer, levels integer, start_after text); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.search_v2(prefix text, bucket_name text, limits integer, levels integer, start_after text) TO postgres;


--
-- Name: FUNCTION update_updated_at_column(); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.update_updated_at_column() TO postgres;


--
-- Name: TABLE audit_log_entries; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.audit_log_entries TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.audit_log_entries TO postgres;
GRANT SELECT ON TABLE auth.audit_log_entries TO postgres WITH GRANT OPTION;


--
-- Name: TABLE flow_state; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.flow_state TO postgres;
GRANT SELECT ON TABLE auth.flow_state TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.flow_state TO dashboard_user;


--
-- Name: TABLE identities; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.identities TO postgres;
GRANT SELECT ON TABLE auth.identities TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.identities TO dashboard_user;


--
-- Name: TABLE instances; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.instances TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.instances TO postgres;
GRANT SELECT ON TABLE auth.instances TO postgres WITH GRANT OPTION;


--
-- Name: TABLE mfa_amr_claims; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.mfa_amr_claims TO postgres;
GRANT SELECT ON TABLE auth.mfa_amr_claims TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.mfa_amr_claims TO dashboard_user;


--
-- Name: TABLE mfa_challenges; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.mfa_challenges TO postgres;
GRANT SELECT ON TABLE auth.mfa_challenges TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.mfa_challenges TO dashboard_user;


--
-- Name: TABLE mfa_factors; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.mfa_factors TO postgres;
GRANT SELECT ON TABLE auth.mfa_factors TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.mfa_factors TO dashboard_user;


--
-- Name: TABLE one_time_tokens; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.one_time_tokens TO postgres;
GRANT SELECT ON TABLE auth.one_time_tokens TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.one_time_tokens TO dashboard_user;


--
-- Name: TABLE refresh_tokens; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.refresh_tokens TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.refresh_tokens TO postgres;
GRANT SELECT ON TABLE auth.refresh_tokens TO postgres WITH GRANT OPTION;


--
-- Name: SEQUENCE refresh_tokens_id_seq; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON SEQUENCE auth.refresh_tokens_id_seq TO dashboard_user;
GRANT ALL ON SEQUENCE auth.refresh_tokens_id_seq TO postgres;


--
-- Name: TABLE saml_providers; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.saml_providers TO postgres;
GRANT SELECT ON TABLE auth.saml_providers TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.saml_providers TO dashboard_user;


--
-- Name: TABLE saml_relay_states; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.saml_relay_states TO postgres;
GRANT SELECT ON TABLE auth.saml_relay_states TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.saml_relay_states TO dashboard_user;


--
-- Name: TABLE schema_migrations; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.schema_migrations TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.schema_migrations TO postgres;
GRANT SELECT ON TABLE auth.schema_migrations TO postgres WITH GRANT OPTION;


--
-- Name: TABLE sessions; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.sessions TO postgres;
GRANT SELECT ON TABLE auth.sessions TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.sessions TO dashboard_user;


--
-- Name: TABLE sso_domains; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.sso_domains TO postgres;
GRANT SELECT ON TABLE auth.sso_domains TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.sso_domains TO dashboard_user;


--
-- Name: TABLE sso_providers; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.sso_providers TO postgres;
GRANT SELECT ON TABLE auth.sso_providers TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.sso_providers TO dashboard_user;


--
-- Name: TABLE users; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.users TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.users TO postgres;
GRANT SELECT ON TABLE auth.users TO postgres WITH GRANT OPTION;


--
-- Name: TABLE pg_stat_statements; Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON TABLE extensions.pg_stat_statements TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE extensions.pg_stat_statements TO dashboard_user;


--
-- Name: TABLE pg_stat_statements_info; Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON TABLE extensions.pg_stat_statements_info TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE extensions.pg_stat_statements_info TO dashboard_user;


--
-- Name: TABLE decrypted_key; Type: ACL; Schema: pgsodium; Owner: supabase_admin
--

GRANT ALL ON TABLE pgsodium.decrypted_key TO pgsodium_keyholder;


--
-- Name: TABLE masking_rule; Type: ACL; Schema: pgsodium; Owner: supabase_admin
--

GRANT ALL ON TABLE pgsodium.masking_rule TO pgsodium_keyholder;


--
-- Name: TABLE mask_columns; Type: ACL; Schema: pgsodium; Owner: supabase_admin
--

GRANT ALL ON TABLE pgsodium.mask_columns TO pgsodium_keyholder;


--
-- Name: TABLE cohost_conversations; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.cohost_conversations TO anon;
GRANT ALL ON TABLE public.cohost_conversations TO authenticated;
GRANT ALL ON TABLE public.cohost_conversations TO service_role;


--
-- Name: SEQUENCE cohost_conversations_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.cohost_conversations_id_seq TO anon;
GRANT ALL ON SEQUENCE public.cohost_conversations_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.cohost_conversations_id_seq TO service_role;


--
-- Name: TABLE emails; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.emails TO anon;
GRANT ALL ON TABLE public.emails TO authenticated;
GRANT ALL ON TABLE public.emails TO service_role;


--
-- Name: SEQUENCE emails_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.emails_id_seq TO anon;
GRANT ALL ON SEQUENCE public.emails_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.emails_id_seq TO service_role;


--
-- Name: TABLE listings; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.listings TO anon;
GRANT ALL ON TABLE public.listings TO authenticated;
GRANT ALL ON TABLE public.listings TO service_role;


--
-- Name: TABLE stripe_sessions; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.stripe_sessions TO anon;
GRANT ALL ON TABLE public.stripe_sessions TO authenticated;
GRANT ALL ON TABLE public.stripe_sessions TO service_role;


--
-- Name: SEQUENCE stripe_sessions_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.stripe_sessions_id_seq TO anon;
GRANT ALL ON SEQUENCE public.stripe_sessions_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.stripe_sessions_id_seq TO service_role;


--
-- Name: TABLE messages; Type: ACL; Schema: realtime; Owner: supabase_realtime_admin
--

GRANT ALL ON TABLE realtime.messages TO postgres;
GRANT ALL ON TABLE realtime.messages TO dashboard_user;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.messages TO anon;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.messages TO authenticated;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.messages TO service_role;


--
-- Name: TABLE schema_migrations; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.schema_migrations TO postgres;
GRANT ALL ON TABLE realtime.schema_migrations TO dashboard_user;
GRANT SELECT ON TABLE realtime.schema_migrations TO anon;
GRANT SELECT ON TABLE realtime.schema_migrations TO authenticated;
GRANT SELECT ON TABLE realtime.schema_migrations TO service_role;
GRANT ALL ON TABLE realtime.schema_migrations TO supabase_realtime_admin;


--
-- Name: TABLE subscription; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.subscription TO postgres;
GRANT ALL ON TABLE realtime.subscription TO dashboard_user;
GRANT SELECT ON TABLE realtime.subscription TO anon;
GRANT SELECT ON TABLE realtime.subscription TO authenticated;
GRANT SELECT ON TABLE realtime.subscription TO service_role;
GRANT ALL ON TABLE realtime.subscription TO supabase_realtime_admin;


--
-- Name: SEQUENCE subscription_id_seq; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON SEQUENCE realtime.subscription_id_seq TO postgres;
GRANT ALL ON SEQUENCE realtime.subscription_id_seq TO dashboard_user;
GRANT USAGE ON SEQUENCE realtime.subscription_id_seq TO anon;
GRANT USAGE ON SEQUENCE realtime.subscription_id_seq TO authenticated;
GRANT USAGE ON SEQUENCE realtime.subscription_id_seq TO service_role;
GRANT ALL ON SEQUENCE realtime.subscription_id_seq TO supabase_realtime_admin;


--
-- Name: TABLE buckets; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.buckets TO anon;
GRANT ALL ON TABLE storage.buckets TO authenticated;
GRANT ALL ON TABLE storage.buckets TO service_role;
GRANT ALL ON TABLE storage.buckets TO postgres;


--
-- Name: TABLE migrations; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.migrations TO anon;
GRANT ALL ON TABLE storage.migrations TO authenticated;
GRANT ALL ON TABLE storage.migrations TO service_role;
GRANT ALL ON TABLE storage.migrations TO postgres;


--
-- Name: TABLE objects; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.objects TO anon;
GRANT ALL ON TABLE storage.objects TO authenticated;
GRANT ALL ON TABLE storage.objects TO service_role;
GRANT ALL ON TABLE storage.objects TO postgres;


--
-- Name: TABLE prefixes; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.prefixes TO service_role;
GRANT ALL ON TABLE storage.prefixes TO authenticated;
GRANT ALL ON TABLE storage.prefixes TO anon;
GRANT ALL ON TABLE storage.prefixes TO postgres;


--
-- Name: TABLE s3_multipart_uploads; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.s3_multipart_uploads TO service_role;
GRANT SELECT ON TABLE storage.s3_multipart_uploads TO authenticated;
GRANT SELECT ON TABLE storage.s3_multipart_uploads TO anon;
GRANT ALL ON TABLE storage.s3_multipart_uploads TO postgres;


--
-- Name: TABLE s3_multipart_uploads_parts; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.s3_multipart_uploads_parts TO service_role;
GRANT SELECT ON TABLE storage.s3_multipart_uploads_parts TO authenticated;
GRANT SELECT ON TABLE storage.s3_multipart_uploads_parts TO anon;
GRANT ALL ON TABLE storage.s3_multipart_uploads_parts TO postgres;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON SEQUENCES  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON FUNCTIONS  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON TABLES  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT ALL ON SEQUENCES  TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT ALL ON FUNCTIONS  TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT ALL ON TABLES  TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: pgsodium; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium GRANT ALL ON SEQUENCES  TO pgsodium_keyholder;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: pgsodium; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium GRANT ALL ON TABLES  TO pgsodium_keyholder;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: pgsodium_masks; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium_masks GRANT ALL ON SEQUENCES  TO pgsodium_keyiduser;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: pgsodium_masks; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium_masks GRANT ALL ON FUNCTIONS  TO pgsodium_keyiduser;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: pgsodium_masks; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium_masks GRANT ALL ON TABLES  TO pgsodium_keyiduser;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON SEQUENCES  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON FUNCTIONS  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON TABLES  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO service_role;


--
-- Name: issue_graphql_placeholder; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_graphql_placeholder ON sql_drop
         WHEN TAG IN ('DROP EXTENSION')
   EXECUTE FUNCTION extensions.set_graphql_placeholder();


ALTER EVENT TRIGGER issue_graphql_placeholder OWNER TO supabase_admin;

--
-- Name: issue_pg_cron_access; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_pg_cron_access ON ddl_command_end
         WHEN TAG IN ('CREATE EXTENSION')
   EXECUTE FUNCTION extensions.grant_pg_cron_access();


ALTER EVENT TRIGGER issue_pg_cron_access OWNER TO supabase_admin;

--
-- Name: issue_pg_graphql_access; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_pg_graphql_access ON ddl_command_end
         WHEN TAG IN ('CREATE FUNCTION')
   EXECUTE FUNCTION extensions.grant_pg_graphql_access();


ALTER EVENT TRIGGER issue_pg_graphql_access OWNER TO supabase_admin;

--
-- Name: issue_pg_net_access; Type: EVENT TRIGGER; Schema: -; Owner: postgres
--

CREATE EVENT TRIGGER issue_pg_net_access ON ddl_command_end
         WHEN TAG IN ('CREATE EXTENSION')
   EXECUTE FUNCTION extensions.grant_pg_net_access();


ALTER EVENT TRIGGER issue_pg_net_access OWNER TO postgres;

--
-- Name: pgrst_ddl_watch; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER pgrst_ddl_watch ON ddl_command_end
   EXECUTE FUNCTION extensions.pgrst_ddl_watch();


ALTER EVENT TRIGGER pgrst_ddl_watch OWNER TO supabase_admin;

--
-- Name: pgrst_drop_watch; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER pgrst_drop_watch ON sql_drop
   EXECUTE FUNCTION extensions.pgrst_drop_watch();


ALTER EVENT TRIGGER pgrst_drop_watch OWNER TO supabase_admin;

--
-- PostgreSQL database dump complete
--

--
-- PostgreSQL database cluster dump complete
--

